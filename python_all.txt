==============================================================================
http://howto.py.cz/index.htm

https://naucse.python.cz/

==============================================================================

https://www.w3schools.com/
https://www.w3schools.com/python/default.asp

https://naucse.python.cz/course/mi-pyt/beginners/testing/
https://macek.sandbox.cz/texty/python-tutorial-cz/tut/tut.html


miko python examples best of

https://www.w3schools.com/python/numpy_array_search.asp



==============================================================================
miko powershell
PS C:\Users\micha\Projects\mapboxgl-jupyter> virtualenv venv

How To Work with Environment Variables in PowerShell
https://mcpmag.com/articles/2019/03/28/environment-variables-in-powershell.aspx

Get-PSProvider -PSProvider Environment
Get-ChildItem -Path Env:\

$env:GOOGLE_APPLICATION_CREDENTIALS='C:\Users\micha\Projects\gs\speech-test-300122-d4f7f5f35fc7.json'

==============================================================================
python -m virtualenv venv




==============================================================================

<<<<<<< HEAD
PS D:\Python\mysite> py manage.py runserver

Corey Schafer (****)
https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g
https://www.youtube.com/watch?v=q5uM4VKywbA&list=RDCMUCCezIgC97PvUuR4_gbFUs5g&index=6




==============================================================================
real phyton
https://www.youtube.com/c/realpython
==============================================================================
python comunity web pages
https://realpython.com/

==============================================================================
zajimave projekty
https://www.geeksforgeeks.org/7-cool-python-project-ideas-for-intermediate-developers/?ref=rp
==============================================================================
miko python tutorials
https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ
==============================================================================
data sciences

https://www.youtube.com/playlist?list=PLWKjhJtqVAblQe2CCWqV4Zy3LY01Z8aF1


==============================================================================
Tech With Tim (*****)
https://www.youtube.com/channel/UC4JX40jDee_tINbkjycV4Sg

==============================================================================
deep learing
https://www.youtube.com/watch?v=aircAruvnKk&t=160s
==============================================================================
module request
https://requests.readthedocs.io/en/latest/user/quickstart/
https://requests.readthedocs.io/en/master/


==============================================================================
try to start with
https://www.skillshare.com/

==============================================================================

==============================================================================
https://stackoverflows.net/




==============================================================================
def common(text1, text2):
    result = ''
    for letter in text1:
        if letter in text2:
            result += letter
    return result
==============================================================================
def sequence(init, step, n):
    x = init
    for i in range(n):
        print(x, end=" ")
        x += step

sequence (4,3,7)
==============================================================================
def collatz(n):
    while n != 1:
        print(n, end=", ")
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3*n + 1
    print(1)

collatz(6);

==============================================================================
def common(text1, text2):
    result = ''
    for letter in text1:
        if letter in text2:
            result += letter
    return result
==============================================================================
def swap_cipher(text):
    cipher = ""
    for i in range(len(text)//2):
        cipher += text[2*i+1] + text[2*i]
    if len(text) % 2 == 1:
        cipher += text[len(text)-1]
    return cipher
==============================================================================
def count_a(text):
    count = 0
    for i in range(len(text)):
        if text[i] == 'a':
            count += 1
    return count
==============================================================================

==============================================================================
def magic(text):
    result = ""
    for letter in text:
        if letter.islower():
            result += letter + letter
    return result
==============================================================================
def prefixes(text):
    for i in range(1, len(text)):
        for j in range(i):
            print(text[j], end="")
        if i < len(text)-1:
            print(", ", end="")
==============================================================================
def reverse(mylist):
    result = []
    for x in mylist:
        result.insert(0, x)
    return result
==============================================================================

def process(mylist, n):
    result = []
    for i in range(len(mylist)):
        if i % n == 0:
            result.append(mylist[i])
    return result
==============================================================================
def process(mylist, n):
    result = []
    for i in range(len(mylist)):
        if i % n == 0:
            result.append(mylist[i])
    return result

==============================================================================
def search(str_list):
    value = None
    for s in str_list:
        if value is None or len(s) < len(value):
            value = s
    return value
==============================================================================

class Kalkulacka():
    # Trï¿½da reprezentuje kalkulacku, kterï¿½ provï¿½dï¿½ zï¿½kladnï¿½ aritmetickï¿½ operace

    cislo1 = None
    cislo2 = None

    def soucet(self):

        return self.cislo1 + self.cislo2


    def rozdil(self):

        return self.cislo1 - self.cislo2


    def soucin(self):

        return self.cislo1 * self.cislo2


    def podil(self):

        return self.cislo1 / self.cislo2

==============================================================================
main kalkulacka

from kalkulacka import Kalkulacka

#Vytvorenï¿½ instance
kalkulacka = Kalkulacka()
print("Zadej 1. cï¿½slo: ", end="")
cislo1 = float(input())
kalkulacka.cislo1 = cislo1
print("Zadej 2. cï¿½slo: ", end="")
cislo2 = float(input())
kalkulacka.cislo2 = cislo2
#Vï¿½pis
print( "Soucet: {0}".format(kalkulacka.soucet()) )
print( "Rozdï¿½l: {0}".format(kalkulacka.rozdil()) )
print( "Soucin: {0}".format(kalkulacka.soucin()) )
print( "Podï¿½l: {0}".format(kalkulacka.podil()) )
==============================================================================


REFERENCES
1. HTML
https://www.w3schools.com/html/default.asp
2. CSS
https://www.w3schools.com/css/default.asp
3. Bootstrap
https://getbootstrap.com/docs/3.3/
4. JQuery
http://api.jquery.com/
5. Php
http://php.net



SPS IT kurzy java
https://www.youtube.com/channel/UCicuR0AVgLkHGDS7Y0Wzkkg/videos

http://www.itnetwork.cz/java/android/



Android 4 Pruvodce programovï¿½nï¿½m mobilnï¿½ch aplikacï¿½ ï¿½ Allen Grant
http://cs.wikipedia.org/ï¿½%AD_jazyk%29
http://cs.wikipedia.org/ï¿½st%C3%A9m%29
http://www.globalnerdy.com/ï¿½ndows-phone/
http://help.adobe.com/ï¿½3b-8000.html#ï¿½
http://www.businessinsider.com/ï¿½one-6-2014-8
http://www.androidmarket.cz/ï¿½kartu-navod/
http://www.mobinfo.cz/ï¿½cni-systemy/


1 Instalace Eclipse
Stï¿½hneme na adrese: http://www.eclipse.org/downloads/


Emulï¿½tor
Genymotion

Postup instalace
Java SE Development kit 8 Update 20 (64-bit)


Vyhledat ucebnice na knihï¿½ch
OREILLY BOOK
https://learning.oreilly.com/library/view/oracle-cloud-infrastructure/9781260452600/ch7.xhtml

Instalace Apache a My SQL
https://www.itnetwork.cz/php/zaklady/wamp-xampp-instalace-apache-mysql-a-php-na-windows-lokalni-server


Stacï¿½ pri dobï¿½jenï¿½ bodu pouï¿½ï¿½t kï¿½d
"JEDNOU80"


http://localhost/phpmyadmin/
Vytvorï¿½me si databï¿½zi s kï¿½dovï¿½nï¿½m utf8_czech_ci


Apache doc_root
C:\xampp\htdocs

C:\install\install\PHP\ITnetworkMVC_02.zip\ITnetworkMVC_02\kontrolery

Python TOP
C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32
==============================================================================
Instalace djago
py -m pip install Django==2.0.4
install upgrade
C:\Users\MKOCANDR>C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\python.exe -m pip install --upgrade pip

supsteni web serveru na loclhost

PS D:\Python\mysite> py manage.py runserver




admin
mkocandr
Kokosak8

==============================================================================
migrace tabulek z
py manage.py makemigrations moviebook
py manage.py migrate

==============================================================================
spustit httpd server
py manage.py runserver

==============================================================================
class Akce(models.Model):
    nazev_akce = models.CharField(max_length=200, verbose_name="Nï¿½zev akce")
    datum_konani = models.DateTimeField()

    def __str__(self):
        return "Nazev akce: {0} | Datum konï¿½nï¿½: {1} ".format(self.nazev_akce, self.datum_konani)

    class Meta:
        verbose_name = "Udï¿½lost"
        verbose_name_plural = "Udï¿½losti"

class Clen (models.Model):
    email = models.EmailField(max_length = 300, unique=True)
    rc = models.CharField(max_length=10, verbose_name="Rodnï¿½ Cï¿½slo", default="", unique=True)
    narozen = models.DateTimeField
    clenem_od = models.DateTimeField
    active = models.BooleanField(default=False)
    jmeno = models.CharField(max_length = 40, default="", unique=False)
    prijmeni = models.CharField(max_length = 40, default="", unique=False)
    facr_id = models.IntegerField (default=1)
    var_symbol = models.IntegerField (default=1)

    def __str__(self):
        return "Jmï¿½no: {0} | Prï¿½jemnï¿½: {1} | email {3} ".format(self.jmeno, self.prijmeni, self.email)


    class Meta:
        verbose_name = "Clen"
        verbose_name_plural = "Clenovï¿½"


class Uzivatel(AbstractBaseUser):

    email = models.EmailField(max_length = 300, unique=True)
    is_admin = models.BooleanField(default=False)

    class Meta:
        verbose_name = "uï¿½ivatel"
        verbose_name_plural = "uï¿½ivatelï¿½"

    objects = UzivatelManager()

    USERNAME_FIELD = "email"

    def __str__(self):
        return "email: {}".format(self.email)

    @property
    def is_staff(self):
        return self.is_admin

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True


class Ucastnici(models.Model):
    akce = models.ForeignKey(Akce, on_delete=models.CASCADE, null=False, verbose_name="Akce")
    clen = models.ForeignKey(Clen, on_delete=models.CASCADE,null=False, verbose_name="Clen")

    def __str__(self):
        tags = [i.tag_title for i in self.tagy.all()]
        return "Akce: {0} | Datum: {1} | Ucastnï¿½k: {2} ".format(akce.nazev_akce, akce.datum_konani, clen.jmeno, clen.prijmeni)


    class Meta:
        verbose_name = "ï¿½castnï¿½k"
        verbose_name_plural = "ï¿½castnï¿½ci"


==============================================================================
py manage.py shell
A do nej napï¿½eme nï¿½sledujï¿½cï¿½ kï¿½d:

from moviebook.models import Film, Zanr, Clen, Akce, Ucastnici
clen = Clen() # Vytvorï¿½me si novï¿½ film
clen.email="miko73@seznam.cz"
clen.narozen="22.9.1973"
clen.clenem_od="1.1.2019"
clen.active=1
clen.jmeno="Michal"
clen.prijmeni="Kocandrle"
clen.facr_id=2
clen.save()


Clen.objects.all() # Zobrazï¿½ vï¿½echny existujï¿½cï¿½ filmy





==============================================================================
PS D:\Python\mysite> py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0003_auto_20180626_0457...Traceback (most recent call last):
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 83, in _execute
    return self.cursor.execute(sql)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\sqlite3\base.py", line 301, in execute
    return Database.Cursor.execute(self, query)
sqlite3.OperationalError: table "moviebook_uzivatel" already exists

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "manage.py", line 15, in <module>
    execute_from_command_line(sys.argv)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\__init__.py", line 371, in execute_from_command_line
    utility.execute()
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\__init__.py", line 365, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\base.py", line 288, in run_from_argv
    self.execute(*args, **cmd_options)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\base.py", line 335, in execute
    output = self.handle(*args, **options)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\commands\migrate.py", line 198, in handle
    post_migrate_state = executor.migrate(
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 117, in migrate
    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 147, in _migrate_all_forwards
    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 244, in apply_migration
    state = migration.apply(state, schema_editor)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\migration.py", line 122, in apply
    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\operations\models.py", line 92, in database_forwards
    schema_editor.create_model(model)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\base\schema.py", line 298, in create_model
    self.execute(sql, params or None)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\base\schema.py", line 117, in execute
    cursor.execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 100, in execute
    return super().execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 68, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 77, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 83, in _execute
    return self.cursor.execute(sql)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\sqlite3\base.py", line 301, in execute
    return Database.Cursor.execute(self, query)
django.db.utils.OperationalError: table "moviebook_uzivatel" already exists
==============================================================================
class Uzivatel(AbstractBaseUser):

    email = models.EmailField(max_length = 300, unique=True)
    is_admin = models.BooleanField(default=False)

    class Meta:
        verbose_name = "uï¿½ivatel"
        verbose_name_plural = "uï¿½ivatelï¿½"

    objects = UzivatelManager()

    USERNAME_FIELD = "email"

    def __str__(self):
        return "email: {}".format(self.email)

    @property
    def is_staff(self):
        return self.is_admin

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True
==============================================================================
https://docs.python.org/3/library/datetime.html


==============================================================================
to change data model
in models.py added

class Akce(models.Model):
    nazev_akce = models.CharField(max_length=80, verbose_name="Nï¿½zev akce")
    datum_konani = models.DateTimeField(auto_now_add=True)


    def __str__(self):
        return "Nazev_akce: {0}".format(self.nazev_akce)

    class Meta:
        verbose_name="Akce"
        verbose_name_plural="Akce"

in admin.py
from .models import Akce, Film, Zanr, Tag, Uzivatel, UzivatelManager #Importujeme si modely

#Modely registrujeme
admin.site.register(Akce)
admin.site.register(Film)
admin.site.register(Zanr)
admin.site.register(Uzivatel, UzivatelAdmin)
admin.site.register(Tag)

PS D:\python\mysite> py manage.py makemigrations
Migrations for 'moviebook':
  moviebook\migrations\0005_akce.py
    - Create model Akce
PS D:\python\mysite> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0005_akce... OK



PS D:\python\mysite> python manage.py sqlmigrate
usage: manage.py sqlmigrate [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--database DATABASE] [--backwards] app_label migration_name
manage.py sqlmigrate: error: the following arguments are required: app_label, migration_name

python manage.py showmigrations
PS D:\python\mysite> python manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
ahoj_svete
 (no migrations)
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
calculator
 (no migrations)
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
moviebook
 [X] 0001_initial
 [X] 0002_auto_20180606_1143
 [X] 0003_auto_20180626_0457
 [X] 0004_auto_20180628_0657
 [X] 0005_akce
 [X] 0006_clen
 [X] 0007_clen_klub_id
 [X] 0008_ucastnici
 [X] 0009_auto_20201002_1345
 [X] 0010_clen_cislo_uctu
 [X] 0011_auto_20201006_1332
 [X] 0012_auto_20201006_1339
 [X] 0013_akce_vedouci
 [X] 0014_akce_trener
 [ ] 0015_auto_20201006_1352
 [ ] 0016_auto_20201006_1354
 [ ] 0017_auto_20201006_1355
 [ ] 0018_remove_clen_telefonni_cislo
 [ ] 0019_clen_telefonni_cislo
sessions
 [X] 0001_initial

PS D:\python\mysite>  python manage.py sqlmigrate moviebook 0015_auto_20201006_1352
BEGIN;
--
-- Add field telefonni_cislo to clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "narozen" datetime NOT NULL, "clenem_od" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "narozen", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo") SELECT "id", "email", "rc", "narozen", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", '' FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
--
-- Alter field clenem_od on clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "narozen" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "clenem_od" datetime NOT NULL);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "narozen", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "clenem_od") SELECT "id", "email", "rc", "narozen", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "clenem_od" FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
--
-- Alter field narozen on clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "clenem_od" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "narozen" datetime NOT NULL);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "narozen") SELECT "id", "email", "rc", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "narozen" FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
COMMIT;


==============================================================================
python manage.py migrate moviebook 0015_auto_20201006_1352 --fake


PS D:\python\mysite> python manage.py migrate moviebook 0015_auto_20201006_1352 --fake
Operations to perform:
  Target specific migration: 0015_auto_20201006_1352, from moviebook
Running migrations:
  Applying moviebook.0015_auto_20201006_1352... FAKED
PS D:\python\mysite>  python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0016_auto_20201006_1354... OK
  Applying moviebook.0017_auto_20201006_1355... OK
  Applying moviebook.0018_remove_clen_telefonni_cislo... OK
  Applying moviebook.0019_clen_telefonni_cislo... OK



==============================================================================
py manage.py shell

from datetime import date
from moviebook.models import Akce, Film, Zanr, Tag, Uzivatel, UzivatelManager


akce_z = Akce(nazev_akce = "Zï¿½pas Repy", datum_konani = date(2020, 10, 4).isoformat()) # Vytvorï¿½me si novï¿½ akcii

akce_z.save()
akce_z
Akce.objects.all()

akce_z = Akce.objects.get(nazev_akce="Zï¿½pas Repy")


==============================================================================
miko datetime
https://docs.python.org/3/library/datetime.html
==============================================================================
miko dbadmin
http://localhost:8000/admin/

==============================================================================
miko server
py manage.py runserver

==============================================================================
http://localhost:8000/moviebook/film_index/
==============================================================================
Administrace databáze
Konečně se dostáváme k administraci. Superusera máme vytvořeného.
Nejprve je třeba naše modely do administrace zaregistrovat.
To provedeme úpravou souboru /mysite/moviebook/admin.py:

from django.contrib import admin
from .models import Film, Zanr #Importujeme si modely

#Modely registrujeme
admin.site.register(Film)
admin.site.register(Zanr)


==============================================================================
miko django migration
https://docs.djangoproject.com/en/3.1/topics/migrations/
==============================================================================
miko python
https://www.tutorialspoint.com/python/index.htm

==============================================================================



==============================================================================
miko python doc
miko doc
http://bruxy.regnet.cz/web/programming/EN/python-cheatsheet/


miko sql light
https://www.sqlite.org/lang_datefunc.html
https://www.sqlite.org/lang_corefunc.html
https://www.tutlane.com/tutorial/sqlite/sqlite-upper-function

https://www.zdrojak.cz/

miko git
https://blog.horejsek.com/jasne-umim-git-dot-dot-dot/

miko codility
https://app.codility.com/programmers/lessons/90-tasks_from_indeed_prime_2015_challenge/
https://www.martinkysel.com/codility-ladder-solution/


python advanced
https://machinelearningknowledge.ai/activity/?hashtag/beginners/
https://machinelearningknowledge.ai/11-python-data-visualization-libraries-data-scientists-shouldknow/
https://machinelearningknowledge.ai/category/mlkblogs/python/
https://www.datasciencecentral.com/profiles/blogs/python-for-big-data-in-one-picture?xg_source=activity


https://docs.python.org/3.3/tutorial/index.html

miko codity
https://programming-review.com/python/algorithms#primes

for all programming
https://programming-review.com/
https://docs.python.org/3.3/tutorial/index.html

miko codity including assignments



==============================================================================


--update vypis_komplet set Datum = substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2);


alter table vypis_komplet add COLUMN datum_transakce datetime;


drop table "CSV_k_vyplneni_FO_UTF-";
select count(*) from "CSV_k_vyplneni_FO";
select count(*) from "CSV_k_vyplneni_FO" where RODNE_CISLO like '%7309%';



FOR csv in CSV_k_vyplneni_FO
	insert into moviebook_clen (jmeno=csv.jmeno, prijmen=csv.prijmeni, rc=csv.RODNE_CISLO, clenem_od=csv.SPORTOVCEM_OD)


select sum(Objem), count(*) from vypis_komplet where Poznï¿½mka like upper('%forman%');



==============================================================================
miko data placen

--update vypis_komplet set datum_transakce = datetime("13.12.2020", '%d.%m.%Y');
--SELECT date('now');
--select date(Datum,'localdate') as created_at from vypis_komplet where ROWID < 10 ;
--select Datum||' 16:16:46' as created_at from vypis_komplet where ROWID < 10 ;
--update vypis_komplet set Datum = Datum||' 16:16:46';
--SELECT datetime('now');
--SELECT datetime('now','localtime');
--pragma table_info('vypis_komplet');
--select created_at from referrals;
--select created_at from referrals;
--SELECT datetime(1092941466, 'unixepoch');
--SELECT date('now');
-- update vypis_komplet set datum_transakce = Datum;
--select strftime('%d.%m.%Y', Datum, ) from vypis_komplet where ROWID < 1;
--select substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2) from vypis_komplet WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
select substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2) from vypis_komplet

--update vypis_komplet set Datum = substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2);
--select Datum from vypis_komplet WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
-- update vypis_komplet set Datum = '2017-09-03 16:16:46' WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
--select strftime(Datum, 'DD.MM.YYYY HH:MM:SS'), objem from vypis_komplet WHERE Protiï¿½cet = '2900118951' and objem = 1100;
--drop table vypis_komplet;
--select strftime('%Y', Datum) from vypis_komplet where ROWID < 10;
--select sum(Objem), Poznï¿½mka, strftime('%Y', Datum) from vypis_komplet where Objem > 0 group by Poznï¿½mka, strftime('%Y', Datum);
--select sum(Objem), Protiï¿½cet, strftime('%Y', Datum) from vypis_komplet where Objem > 0 group by Protiï¿½cet, strftime('%Y', Datum);
select sum(Objem), Protiï¿½cet, Poznï¿½mka from vypis_komplet where Objem > 0 and strftime('%Y', Datum)='2019' and Poznï¿½mka like '%Kocan%' group by Protiï¿½cet, Poznï¿½mka;

==============================================================================
miko pridvam form

in views.py
od samostatneho views
from .clen_view import ClenIndex, CurrentClenView, CreateClen, EditClen



in urls.py
# sada formulï¿½ru pro clena
    path("clen_index/", views.ClenIndex.as_view(), name="clenove_index"),
    path("<int:pk>/clen_detail/", views.CurrentClenView.as_view(), name="clenove_detail"),
    path("create_clen/", views.CreateClen.as_view(), name="novy_clen"),
    path("<int:pk>/edit_clen/", views.EditClen.as_view(), name="edit_clen"),


in admin.py
admin.site.register(Clen)

in forms.py
nadefinovat ClenForm


==============================================================================
miko seznamy
miko prunik
miko rozdil

slovnik
ja = {'jméno': 'Anna', 'mesto': 'Brno', 'císla': [3, 7]}
>>> ja[ 'císla']
[3, 7]
>>> ja[ 'císla'][0]
3
>>> ja[ 'císla'][1]
7




import sqlite3

def solution(A):
    s = {x for x in A if x > 0}
    if not s:
        return 1
    last = max(s)+1
    print ("s - ", s)
    # Find elements present in either of the two sets, but not common to both the sets
    s2 = set(range(1, last))
    print ("s2 od 1 do max - ",s2)
    #new_set = s2.intersection(s)
    new_set = s2.difference(s)
    #new_set = s^set(range(1, last))
    print("prunik? - ", new_set)

    if not new_set:
        return last

    return min(new_set)

#A = [4,2,3, 3, 3, 3]
#A= [1, 3, 6, 4, 1, 2]
#A=[-1, -3]
#A=[-1000000, 1000000]
#A=[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149]
#A=[90, 91, 92, 93]
#A=[1,2,3]
A=[1,2,3, 5, 99, 199]
print (solution(A))
==============================================================================
def solution(A):
    B = [x for x in A if x > 0]
    B = sorted(B)
    if 1 not in B:
        return 1
    for i in range(0, len(B) - 1):
        if B[i+1] - B[i] > 1:
            return B[i] + 1
    return max(B) + 1

A=[-1, -3]
print (solution(A))
==============================================================================

==============================================================================
cisla = []
vstup="vstup"
while vstup != "":
      vstup = input("Zadej cislo - ")
      if vstup != "":
         cisla.append(int(vstup))

cisla.sort()
median = cisla[len(cisla)//2]
for cislo in cisla:
   print(cislo, " se od mediï¿½nu odliï¿½uje o ", cislo - median)
==============================================================================
miko python format

print('{0} and {1}'.format('spam', 'eggs'))


==============================================================================
miko python strings
miko python print

table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
  for name, phone in table.items():
    print(f'{name:10} ==> {phone:10d}')

==============================================================================
==============================================================================
binary gaps
import sqlite3
#1) prevod in na bin
n = 2000000000
#  b=bin(n)[2:]
b=bin(n)
c = b[2:len(b)]
print(b)
print(c)
#2) rozbor bin retezce
nul_max=[]
prev=1
current=1
ukonceno=1
for x in c:
   prev = current
   current = x
   if prev == "1" and current == "0":
      ukonceno = 0
      nul_max.append(1)
   elif prev == "0" and current == "0":
      nul_max[len(nul_max)-1] += 1
   elif prev == "0" and current == "1":
      ukonceno = 1
if ukonceno:
   pass
else:
   nul_max[len(nul_max) - 1] = 0
   ukonceno = 0

nul_max.sort()
if nul_max:
   print(nul_max[len(nul_max)-1])
else:
   print("no gaps")

==============================================================================
frog
import math

def solution(x,y,d):
    r = y-x
    if(r==0): return 0

    c = math.ceil(r/d)
    return c

my soulution
==============================================================================
def solution(x, y, d):
    if d <= 0:
        print("Takhel tam nedojdu")
        return 0
    if x * y <= 0 or y < x:
        print("spatny vstup")
        return 0
    steps = (y-x)//d
    #print(steps)
    if ((y-x)%d) > 0:
        steps += 1
    return steps


X = 10
Y = 85
D = 30
print(solution(X,Y,D))
==============================================================================
OddOccurrencesInArray

import sqlite3
#fine the unique
def solution(A):
    existing = []
    for a in A:
        if A.count(a) > 1:
            pass
        else:
            existing.append(a)

    return existing


A = [1,1,2,3,2,3,3,4,4,5]
print(solution(A))
==============================================================================

def solution(A):
   A.sort()
   #print(A)
   c=0
   for x in A:
      if x+1 == A[c+1]:
         #print(x)
         pass
      else:
         return x+1
      c+=1
   return 0


def solution2(a):
   if (len(a) == 0):
      return 1
   print (max(a))
   print (len(a))
   if (max(a) == len(a)): # jen performance na ï¿½kor obecnosti
      return len(a) + 1

   a.sort()
   for _ in range(1, len(a) + 1):
      if _ != a[_ - 1]:
         return _

A = [2,3,1,5]
print("resolution - ",solution2(A))

==============================================================================
type balance pomale
import sqlite3


def solution(A):
   res = sum(A)
   for edge in range(1,len(A)):
      print("edge -",edge)
      left=0
      right=0
      c=0
      left = sum(A[:edge])
      right= sum(A[edge:])
      #for a in A:
      #   if c <= edge:
      #     left = left + a
      #   else:
      #      right = right+a
      #   c+=1
      print("left ", A[:edge])
      print("right ", A[edge:])
      print("diff -", abs(left-right))
      print("res", res)
      if res > abs(left - right):
         res = abs(left - right)
      edge += 1
      print("=======")
   return res

A = [3,1,2,4,3]
print("resolution - ",solution(A))

type balance rychla
def solution(a):
   l = len(a)
   ms = None  # min sum
   sl = 0  # sum left
   sr = sum(a)

   for p in range(0, l - 1):
      sl = sl + a[p]
      sr = sr - a[p]
      ab = abs(sl - sr)
      if (ms == None):
         ms = ab
      if (ms > ab):
         ms = ab
   return ms
==============================================================================
(pole A zacï¿½nï¿½ nulou), cyklus je vï¿½dy
    for a in range(0,len(A))

dvourozmerne pole
miko pole create
miko vynulovana n prvku


rada = [0] * n #create 0 row
m = max(r)     #get max from row
r = [m] * n    #fill in row by max



    print("Pro pole ", S )
    for x in range(0, len(P)):
    print("pro x={3} |pro [{0}:{1}] result {2}".format(x, x+1, S[x:x+1], x))

Pro pole  ['2', '1', '4', '2', '2', '4', '1']
pro x=0 |pro [0:1] result ['2']
pro x=1 |pro [1:2] result ['1']
pro x=2 |pro [2:3] result ['4']


#!/usr/bin/env python3

def solution(a):
    kinosal = []

    for i in range(5):
        temp = []
        for j in range(2):
            temp.append(j)
        kinosal.append(temp)

        kinosal[i][0] = i
        kinosal[i][1] = 0
    for a in kinosal:
        print(a)

A = [3,1,2,4,3]
print(solution(A))
[0, 0]
[1, 0]
[2, 0]
[3, 0]
[4, 0]
None
==============================================================================
miko set (unique list)
miko enumerate

def solution(x,A):
   l = len(A)
   r = -1
   path=set()
   for i, a in enumerate(A):
      path.add(a)
      #print("{0} - {1}".format(i,a))
      if a == x:
         if len(path) == x-1:
            return i
   return r


A = [1,3,1,5,2,3,5,4]
A = [1,3,1,3,4,2,5,4]
print("resolution - {0} - {1}".format(solution(5,A),solution2(5,A)))
==============================================================================
MissingInteger
==============================================================================

import sqlite3

def solution(A):
   s = {x for x in A if x > 0}
   if s:
      s = sorted(s)
   else:
      return 1
   if s[0] > 1:
      return 1

   print(s)
   for i, a in enumerate(s):
      current = a
      if i+1 < len(s):
         next = s[i+1]
      else:
         return current + 1
      print("curren {0} next {1}".format( current, next))
      if current + 1 == next: #mezera
         pass
      else:
         return current + 1
   print("last + 1 =",s[len(s)])
   return s[len(s)] + 1


A = [1,3,1,5,2,3,5,4]
A=[90, 91, 92, 93]
print("resolution - {0} ".format( solution(A) ) )


==============================================================================
rychlejsi MissingInteger

def solution(a):
    a = set(a)
    for i in range(1,1000000+1):
        if i not in a:
            return i

    return

A = [1,3,1,5,2,3,5,4]
A=[90, 91, 92, 93]
print("resolution - {0} ".format( solution(A) ) )

==============================================================================

do not understand

PassingCars

==============================================================================
miko dict
def solution(a):
    d=dict()
    for e in a:
        if e in d:
            d[e]+=1
        else:
            d[e]=1
    #print(d)
    return len(d)

a=[1,1,1,2,2,4,5]
solution(a)

==============================================================================
pruseciky kruhy
import sqlite3
def solution(A):
    posun = 0
    delka = len(A)
    e = []
    for i, a in enumerate(S):
        e += [(i-a,1),(i+a,0)] #nauklada is zacatky kruhu na ose (1) a konce kruhu na ose (0) do pole e
        #print(i-a, i, i+a)
    print(e)
    e.sort(key=lambda x: (x[0], not x[1])) #pole e sesortuje podle pruniku kruhu s osou
    print(e)
    c=0 # count of intersections
    ac=0 # active circles

    for _, start in e: #jedeme kruhy jeden za druhym a bereme is priznak startu nebo konce.
    #    print("start = {0} c = {1} ac = {2}".format( start, c, ac))
        if start:
            c+=ac #k celkovemu poctu pruniku, pricte pocet probihajicich kruhu
            ac+= 1 # pocet probihajicich kruhu ++
        else:
            ac-= 1 #jestlize nejaky kruh konci snizi se pocet aktivnich kruhu
        if c > 10000000:
            return -1
    return c

S = [1,5,2,1,4,0]
==============================================================================


==============================================================================

MaxDoubleSliceSum
miko strings
from collections import defaultdict


# A[X + 1] + A[X + 2] + ... + A[Y âˆ’ 1] + A[Y + 1] + A[Y + 2] + ... + A[Z âˆ’ 1].
# double slice (0, 3, 6), sum is 2 + 6 + 4 + 5 = 17,
# double slice (0, 3, 7), sum is 2 + 6 + 4 + 5 âˆ’ 1 = 16,
# double slice (3, 4, 5), sum is 0.
#   0 1 2  3 4 5  6 7
#A=[3,2,6,-1,4,5,-1,2]


def solution(A):
    s=set()
    X=0
    Z=0
    max=0
    for X in range(0, len(A)):
        for Z in range(0, len(A)):
            for Y in range(X+1, Z-1):
                    #print("[{} {} {} ] - {}".format(X,Y,Z,sum(A[X+1:Y-1]) + sum(A[Y+1:Z-1]) ))
                    m = sum(A[X+1:Y]) + sum(A[Y+1:Z])
                    print("[{} {} {} ] - {} + {} = {}".format(X, Y, Z, A[X + 1:Y], A[Y + 1:Z], m))
                    #print("m {} max {}".format(m, max))
                    if max < m:
                        max = m
    return max

A=[3,2,6,-1,4,5,-1,2]
print(solution(A))

==============================================================================
MaxSliceSum

from collections import defaultdict
#  A[P] + A[P+1] + ... + A[Q]
#(3, 4) is a slice of A that has sum 4,
#(2, 2) is a slice of A that has sum âˆ’6,
#(0, 1) is a slice of A that has sum 5,
#no other slice of A has sum greater than (0, 1).

def solution(A):
    s=set()
    P=0
    Q=0
    max=0
    for P in range(0, len(A)):
        for Q in range(0, len(A)):
            print("A[P:Q] {} sum {}".format(A[P:Q],sum(A[P:Q]) ))
            if max < sum(A[P:Q]):
                max = sum(A[P:Q])
    return max

# [0 1  2 3 4]
A=[3,2,-6,4,0]
print(solution(A))
==============================================================================

#to A[Q] âˆ’ A[P], provided that A[Q] â‰¥ A[P]. Otherwise, the transaction brings loss of A[P] âˆ’ A[Q].

def solution(A):
    max = 0
    l = len(A)
    x=0
    y=0
    for x in range (0, l-1):
#        print(l -x -1)
        for y in range(x, l-1):
            print("[{} {}] max {}".format(l - x - 1, l - 2 - y, A[l - x - 1]- A[l - 2 - y]))
            if max < A[l - x - 1]- A[l - 2 - y]:
                max = A[l - x - 1]- A[l - 2 - y]
    return max
# delka bude 6
# max range 5
# pojedu 5-4,5-3, 5-2, 5-1, 5-0, 4-3, 4-2, 4-1, 4-0, 3-2, 3-1, 3-0, 2-1, 2-0, 1-0,
A=[23171,21011,21123,21366,21013,21367]

print(solution(A))

#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
########################################################################
from collections import defaultdict

def solution(a):
    n = len(a)
    if n==0: return -1

    d=defaultdict(lambda: 0)
    dm = a[0] # dominator
    for e in a:
        d[e]+=1
        if d[dm]<d[e]:
            dm = e
    if(d[dm]> n//2):
        return a.index(dm)
    else:
        return -1
########################################################################
LongestPassword
s = "zxcasdqwe123"

import re


def a(s):
    m = re.match(r"^[a-zA-Z0-9]+$", s)
    if (m == None):
        return False
    else:
        return True


def l(s):
    l = re.findall(r'[a-zA-Z]', s)
    s = "".join(str(i) for i in l)
    print(len(s))
    return len(s)


def d(s):
    d = re.findall(r'[0-9]+', s)
    s = "".join(str(i) for i in d)
    return len(s)


def solution(s):
    nws = []
    ws = s.split()
    # print(ws)
    for w in ws:
        if a(w) and l(w) % 2 == 0 and d(w) % 2 == 1:
            nws.append(w)

    print(nws)

    if (len(nws) == 0):
        return -1
    mx = max(set(nws), key=len)
    return (len(mx))


########################################################################

from collections import defaultdict

def validate(S):
    res = 1
    num_alp=0
    num_dig=0
    for c in S:
        if c.isascii:
            if c.isalpha():
                num_alp +=1
            elif c.isnumeric():
                num_dig +=1
            else:
                return 0
        else:
            return 0
    if num_dig%2 == 0:
        return 0
    if num_alp%1 == 1:
        return 0
    return 1


def solution(S):
    d=defaultdict(lambda: 0)
    print(S.split())
    for str in S.split():
        d[str] = validate(str)
    max = 0
    for str in d:
        if d[str]:
            if max < len(str):
                max = len(str)
    return max

S = "test 5 a0A pass007 ?xy1"

# nacpu retÄ›zce do slovnÃku, budu je postupnÄ› validovat
# nejdelÅ¡Ã z validnÃch je vÃ½sledek.


print (solution(S))

########################################################################
miko peaks
from collections import defaultdict
# pojedu polem a urÄÃm vrcholy
#
#prvni neni vrchol
#posledni neni vrchol
#jak rozdÄ›lit pole kolem vrcholÅ¯
# projedu pole, najdu vrcholy
# je-li vzdÃ¡lenost vrcholÅ¯ jedna, ukonÄÃme skupinu hned za prnÃm vrcholem
#skupina bez vrcholu musÃ bÃ½t pÅ™ipojena zpÄ›t k poslednÃ skupinÄ› s vcholem
# rozdÄ›lÃm to na jednotlivÃ¡ pole
#udÄ›lÃ¡m dic pozic a ke keÅ¾dÃ© z  nich co ta pozice znamenÃ¡, pÅ™Ãznamky First, Last, Peak
#len=12
#last index = 11
#A=[1,2,3, 4 ,3, 4 ,1,2,3,4, 6 ,2]

def solution(A):
    d = defaultdict(lambda :0)
    is_first=1
    is_last=0
    res =0
    from_peek = 0
    for x in range(0, len(A)) :
        if x == len(A)-1:
            d[x] = "plain"
        else:
            if is_first:
                d[x] = "first"
                is_first = 0
            elif A[x-1] < A[x] and A[x] > A[x+1]:
                if from_peek > 0:
                    d[x] = "peak"
                    from_peek = 0
            else:
                d[x] = "plain"
        from_peek+=1
    l_index = len(d) -1
    last_element=""
    for el in d:
        print(el,d[el])
        if d[el] == "peak":
            res +=1
    return res


A=[1,2,3,4,3,4,1,2,3,4,6,2]
print(solution(A))
########################################################################
miko CountSemiprimes
from collections import defaultdict
#jsou primes 2, 3, 5, 7, 11 and 13.
#semiprimes jsou 4, 6, 9, 10, 14, 15, 21, 22, 25, 26 ruzne dÄ›litele ale puze dva
#PQ jsou dve pole semiprimes
#(P[K], Q[K]), where 1 â‰¤ P[K] â‰¤ Q[K] â‰¤ N.
#The number of semiprimes within each of these ranges is as follows:
#P=[1,4,16]
#Q=[26,10,20]
#N=26
#12 = 2x6 ale taky 3x4


#(1, 26) is 10, (4, 6, 9, 10, 14, 15, 21, 22, 25, 26)
#(4, 10) is 4,  (4, 6, 9, 10)
#(16, 20) is 0. ()
# should return array [10,4,0]
#jak najdu semiprimes
# pak je nacountuju po vÃ½seÄÃch.

def solution(P,Q,N):
    semi=[]
    for x in range(2, N+1):
        poc = 0
        for y in range(2,x):
            #if x ==8: print("{}|{}".format(x,y))
            if x%y == 0:
                if x//y==y:
                    poc+=2
                else:
                    if semi.count(x//y)>0:
                        print("tady", x//y)
                        poc += 2
                    else:
                        poc+=1
            if poc > 2:
                break

        if poc==2:
            semi.append(x)
        #print("[{} | {}]".format(x,poc))



    semi=[4, 6, 9, 10, 14, 15, 21, 22, 25, 26]
    print(semi)

    res=[0]*len(P)
    for x in range(0,len(P)):
        print("[{}:{}]".format(P[x], Q[x]+1))
        temp=[x for x in range( P[x], Q[x]+1)]
        print(temp)
        for y in temp:
            if semi.count(y):
                print(y)
                res[x]+=1

    return res


P=[1,4,16]
Q=[26,10,20]
N=26
#print(semi_primes(N))

print(solution(P,Q,N))
########################################################################
CountNonDivisible

#A=[3,1,2,3,6]

#A[0] = 3, the non-divisors are: 2, 6,
#A[1] = 1, the non-divisors are: 3, 2, 3, 6,
#A[2] = 2, the non-divisors are: 3, 3, 6,
#A[3] = 3, the non-divisors are: 2, 6,
#A[4] = 6, there aren't any non-divisors.
#A=[3,1,2,3,6]
# najdi nedÄ›liÄe return [2, 4, 3, 2, 0]
# udÄ›lÃ¡m si pole res o stenem poctu prvku
# vezmu prvek a projedu s nÃ­m zbytek, kdyz najdu do res[i] +=1
# return res


def solution(A):
    res=[0]*len(A)
    for x in range(0, len(A)):
        for y in range(0, len(A)):
#            if x==1: print (A[x],A[y])
            if A[x]%A[y]>0:
                res[x] += 1
    return res


A=[3,1,2,3,6]

#print(semi_primes(N))
print(solution(A))
########################################################################
PrvoÄÃ­sla
prvocislo3.py
# prvocislo3.py - VypÃ­Å¡e prvoÄÃ­sla menÅ¡Ã­ neÅ¾ zadanÃ½ limit
import sys
m=int(sys.argv[1])
for n in range(2,m): # cyklus 2..m-1
p=2 # zaÄÃ¡tek testu
while p*p<=n:
if n % p == 0:
break
p+=1
if p*p > n: # n je prvoÄÃ­slo
print(n,end=", ")
print() # zÃ¡vÄ›reÄnÃ½ konec Å™Ã¡dky
########################################################################
CommonPrimeDivisors
# A=[15,10,3]
# B=[75,30,5]
#return 1, because only one pair (15, 75) has the same set of prime divisors.
#najÃ­ tÃ¡kladnÃ­ dÄ›litele
# vracet pocet shod
def devisor_list(a):
    div = []
    for x in range(2,a):
        if a%x==0:
            found=0
            for d in div:
                found=0
                if x%d == 0:
                   found=1
            if found == 0:
                div.append(x)

    return div


def solution(A, B):
    res=0
    div_lists=[]
    for x in range(0, len(A)):
        #print("[{}:{}]".format(A[x], B[x]))
        d1=devisor_list(A[x])
        d2=devisor_list(B[x])

        rozdilna=0
        d1.sort()
        d2.sort()
        if len(d1)==len(d2) and len(d1) >0:
            for x in range(0, len(d1)):
                if d1[x] != d2[x]:
                    rozdilna=1
        else:
            rozdilna=1

        if rozdilna == 0:
            print("A- ", d1)
            print("B- ", d2)
            res+=1

    return res


A=[15,4,200]
B=[75,8,400]


#print(semi_primes(N))

print(solution(A,B))
#print(devisor_list(75))
########################################################################
==============================================================================
miko Fibonacci numbers
#!!! pro kazdou pozici hledam minimalni pocet fibo_skoku, jak se na ni dostanu !!!

def fib(n=25):
    # there are 26 numbers smaller than 1000
    f = [0] * (n)
    f[1] = 1
    for i in range(2, n):
        f[i] = f[i - 1] + f[i - 2]
    print("fib - {}",f)
    return f
## projedu si zadané pole pozic updatnu si to poctem skoku na kolik nejméne se tam dá dostat ?

def solution(a):
    a.insert(0, 1)
    a.append(1)
    print("extended a{}".format(a))
    n=len(a)
    steps = [0]+[n]*(n-1)
    print ("steps {}".format(steps))

    for p in range(1, len(steps)): # position
        s_min = n

        for jump in fib(): #pro každkou pozici hledám mimnimální pocet na kolik se tam dostanu
            prev_leaf = p - jump # ze kterého listu by se dalo ke skoku odrazit
            print("prev_leaf {} p {} jump {}".format(prev_leaf, p, jump ))
            if prev_leaf >= 0: # je-li prípadná odrazvá pozice kde muže být list vetší naž 0
                if a[prev_leaf] == 1 and steps[prev_leaf] + 1 < s_min: # (a[prev_leaf] == 1) je li tam  list
                #steps[prev_leaf] + 1 < s_min
                    print("s_min puv {} steps[prev_leaf] + 1 = {}".format(s_min, steps[prev_leaf] + 1 ))
                    s_min = steps[prev_leaf] + 1
            else:
                print("BREAK prev_leaf {} p {} jump {}".format(prev_leaf, p, jump ))
                break
        steps[p] = s_min
        print("steps in for ",steps)
# extended a[1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1]
# steps [0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
# fib - {} [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]
    return steps[-1] if steps[-1] != n else -1


#A=[0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0]
A= [0, 0, 0,  1, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 1, 1, 13, 1, 2, 2, 1, 2, 2, 2, 3]
print(solution(A))
==============================================================================

MinMaxDivision
def get_max_sector(A, K):
    max_s = 0
    max_index=0
    for x in range(0,K):
        if sum(A[x])>max_s:
            max_s=sum(A[x])
            max_index=x
    return max_index


def solution(K,M,A):
    l=len(A)
    pocet_prvku = l
    s_init=l//K #init velikost sektoru
    sektory=[]
    pozice=0
    max_sector = 0
    sum_max = 0
    min_sum_in_sector= sorted(A)[-1]
    for x in range(0,K):
        if x != k1:
            sektory.append(A[pozice:pozice+s_init])
        else:
            sektory.append(A[pozice:])
        pozice +=s_init
        if sum(sektory[x]) > sum_max:
            sum_max = sum(sektory[x])
            max_sector = x
    #print("At the start ",sektory)
    # ma soused vic ? vezmi si jeho jeden
    stop_it=0
    while stop_it == 0:
        if max_sector == len(sektory)-1: #je posledni
            #move prvek back
            if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector]):
                sektory[max_sector-1].append(sektory[max_sector][0])
                sektory[max_sector] = sektory[max_sector][1:]
            else:
                #print("u posledniho to se nevyplati")
                stop_it = 1
            # reclaculate
            #print("in last",sektory)
        elif max_sector == 0: # je prvni
            if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]) :
                sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                #print("in firs",sektory)
            else:
                #print ("in the first to se nevyplati")
                stop_it = 1
        else: # je uvnitr
            if sum(sektory[max_sector+1]) > sum(sektory[max_sector -1]): #je -li sektor vpravo menší než ten vlevo
                if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector][1:]):
                    sektory[max_sector-1].append(sektory[max_sector][0])
                    sektory[max_sector] = sektory[max_sector][1:]
                else:
                    #print("in middle left < right to se nevyplati")
                    stop_it = 1
                # reclaculate
                #print("in middle move to left",sektory)
            elif sum(sektory[max_sector+1]) < sum(sektory[max_sector-1]):
                if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]):
                    sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                    sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                else:
                    #print ("in middle right > left to se nevyplati")
                    stop_it = 1
            else:
                if sektory[max_sector][0] > sektory[max_sector][-1]:
                    if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]):
                        sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                        sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                    else:
                        #print ("in middle right = left move to right to se nevyplati")
                        stop_it = 1
                else:
                    if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector][1:]):
                        sektory[max_sector-1].append(sektory[max_sector][0])
                        sektory[max_sector] = sektory[max_sector][1:]
                    else:
                        #print ("in middle right = left move to left to se nevyplati")
                        stop_it = 1
                    # reclaculate


        max_sector = get_max_sector(sektory, K)
        #print("max_sector", max_sector)
        #print("at the end -", sektory)

    return sum(sektory[get_max_sector(sektory, K)])
########################################################################
CountTriangles

def solution(a):
    n=len(a)
    a.sort()
    print(a)
    c=0
    for p in range(0, n-2):
        q=p+1
        r=p+2
        while r<n:
            print("{}, {}, {}|c={}".format(a[p], a[q], a[r], c))
            if a[p]+a[q]>a[r]:
                c+=r-q
                r+=1
            elif q<r-1:
                q+=1
            else:
                r+=1
                q+=1
    return c

def solution2(B):
    A = sorted(B,reverse=True)
    res=0
    for x in range(0, len(A)):
        for y in range(x+1, len(A)):
            for z in range(y+1, len(A)):
                if A[x] < A[y] + A[z]:
                    #print("({},{},{})=({},{},{})".format(x, y, z, A[x], A[y], A[z]))
                    res +=1
    return res

B=[10, 2, 5, 1 , 8, 12]
print(solution(B))

########################################################################
==============================================================================
MinAbsSumOfTwo


from collections import defaultdict
# (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)
# extreme_double
# sequences of 2 elements?WRONG ANSWER
# got 200000 expected
#     1999999998
# 1.0.036 sOK
# 2.0.036 sWRONG ANSWER, got 200000 expected 1999999998
# 3.0.036 sOK


def solution2(A):
    min_asp=200000
    for x in range(0,len(A)):
        for y in range (x, len(A)):
            #print("{} {}".format(A[x], A[y]))
            #print(abs(A[x] + A[y])
            if min_asp > abs(A[x] + A[y]):
                min_asp = abs(A[x] + A[y])
    return min_asp


def solution2(A):
    B = sorted(A)
    abs_min=2000000
    n=len(B)
    #print(B)
#y=x+1 0:1, 1:2, 2:3, 3:4
#y=x+2      1:3, 2:4
#           1:4,
#
    p=1
    q=0

    while q<n:
        for p in range(q, n):
            if p !=q:
                #print("[{}, {}] ({},{})".format(q, p, B[p], B[q]))
                if abs_min > abs(B[p] + B[q]):
                    abs_min = abs(B[p] + B[q])
        q+=1
    return abs_min

def solution3(a):
    n=len(a)

    if n==1:
        return abs(a[0]+a[0])

    a.sort()
    #print(a)

    l=0 # first
    r=n-1 # last
    m = 2000000000
    print(a)
    while l<=r:
        dif= a[l]+a[r]
        #print('dif:', dif, 'a[l]:', a[l], 'a[r]:', a[r],'l:', l, 'r:', r)
        print("{} a[{}]: {} a[{}]".format( a[l], l, a[r], r))
        if dif==0:
            return 0
        m = min(m,abs(dif))
        if dif>0:
            r=r-1
        else:
            l=l+1

    return m

def solution(a):
        #0:4 1:4, 2:4,
        #2:3,
        #2:2
    n=len(a)
    if n==1:
        return abs(a[0]+a[0])

    a.sort()
    l=0 # first
    r=n-1 # last
    m=20000000
    print(a)
    while l<=r:
        print("[{} {}]".format(l, r))
        dif= a[l]+a[r]
        #print('dif:', dif, 'a[l]:', a[l], 'a[r]:', a[r],'l:', l, 'r:', r)
        print("{} a[{}]: {} a[{}]".format( a[l], l, a[r], r))
        if dif==0:
            return 0
        m = min(m,abs(dif))
        if dif>0:
            r=r-1
        else:
            l=l+1

    return m



A=[-10, -8, 3, 4, 5]

A=[1, 4, -3]
A=[-8, 4, 5, -10, 3]
A=[-1,-2,3,4,5,6]
print(solution(A))
==============================================================================
MaxNonoverlappingSegments

def solution(a,b):
    n=len(a)
    if n==0:
        return 0

    cnt=1
    e = b[0] #naberu si konec prvniho segmentu

    for i in range(1, n):
        #print("start[{}]={} end[{}]={}".format(i, a[i], i-1, e))
        if a[i] > e:
            cnt += 1
            e = b[i]

    return cnt


A=[1, 3, 7, 9, 9]
B=[5, 6, 8, 9, 10]

A=[1, 3, 7, 10, 13, 6]
B=[5, 6, 8, 11, 13, 14]

print(solution(A, B))





==============================================================================
tieropes
from collections import defaultdict
# svazat lana tak zby vznikolo co nejvice lan delky vetsi nebo rovno K {4}
# vyradim a zapoctu všechny lana vetší a rovno K
def solution(k,a):
    an = [e if e<k else 0 for e in a]
    print("an ", an)
    gek = 0
    for e in an:
        if e==0:
            gek+=1

    ts=0
    for e in an:
        if e==0:
            ts=0
        else:
            ts+=e
            print("{} {}".format(ts, e))
            if ts>=k:
                gek+=1
                ts=0
    return gek



A=[1, 1, 1, 1, 2, 3, 4, 3, 3, 3, 3, 1, 1, 3]
K=4
print(solution(K,A))

==============================================================================
MinAbsSum

def solution(A):
    n=len(A)
    soucet=0
    for x in range(0, n):
        print(A[x])
        if soucet > 0:
            s = -1
        else:
            s = 1

        if A[x] < 0:
            s = -s
        soucet += A[x] * s
    return abs(soucet)

=======
PS D:\Python\mysite> py manage.py runserver



def common(text1, text2):
    result = ''
    for letter in text1:
        if letter in text2:
            result += letter
    return result
==============================================================================
def sequence(init, step, n):
    x = init
    for i in range(n):
        print(x, end=" ")
        x += step

sequence (4,3,7)
==============================================================================
def collatz(n):
    while n != 1:
        print(n, end=", ")
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3*n + 1
    print(1)

collatz(6);

==============================================================================
def common(text1, text2):
    result = ''
    for letter in text1:
        if letter in text2:
            result += letter
    return result
==============================================================================
def swap_cipher(text):
    cipher = ""
    for i in range(len(text)//2):
        cipher += text[2*i+1] + text[2*i]
    if len(text) % 2 == 1:
        cipher += text[len(text)-1]
    return cipher
==============================================================================
def count_a(text):
    count = 0
    for i in range(len(text)):
        if text[i] == 'a':
            count += 1
    return count
==============================================================================

==============================================================================
def magic(text):
    result = ""
    for letter in text:
        if letter.islower():
            result += letter + letter
    return result
==============================================================================
def prefixes(text):
    for i in range(1, len(text)):
        for j in range(i):
            print(text[j], end="")
        if i < len(text)-1:
            print(", ", end="")
==============================================================================
def reverse(mylist):
    result = []
    for x in mylist:
        result.insert(0, x)
    return result
==============================================================================

def process(mylist, n):
    result = []
    for i in range(len(mylist)):
        if i % n == 0:
            result.append(mylist[i])
    return result
==============================================================================
def process(mylist, n):
    result = []
    for i in range(len(mylist)):
        if i % n == 0:
            result.append(mylist[i])
    return result

==============================================================================
def search(str_list):
    value = None
    for s in str_list:
        if value is None or len(s) < len(value):
            value = s
    return value
==============================================================================

class Kalkulacka():
    # Trï¿½da reprezentuje kalkulacku, kterï¿½ provï¿½dï¿½ zï¿½kladnï¿½ aritmetickï¿½ operace

    cislo1 = None
    cislo2 = None

    def soucet(self):

        return self.cislo1 + self.cislo2


    def rozdil(self):

        return self.cislo1 - self.cislo2


    def soucin(self):

        return self.cislo1 * self.cislo2


    def podil(self):

        return self.cislo1 / self.cislo2

==============================================================================
main kalkulacka

from kalkulacka import Kalkulacka

#Vytvorenï¿½ instance
kalkulacka = Kalkulacka()
print("Zadej 1. cï¿½slo: ", end="")
cislo1 = float(input())
kalkulacka.cislo1 = cislo1
print("Zadej 2. cï¿½slo: ", end="")
cislo2 = float(input())
kalkulacka.cislo2 = cislo2
#Vï¿½pis
print( "Soucet: {0}".format(kalkulacka.soucet()) )
print( "Rozdï¿½l: {0}".format(kalkulacka.rozdil()) )
print( "Soucin: {0}".format(kalkulacka.soucin()) )
print( "Podï¿½l: {0}".format(kalkulacka.podil()) )
==============================================================================


REFERENCES
1. HTML
https://www.w3schools.com/html/default.asp
2. CSS
https://www.w3schools.com/css/default.asp
3. Bootstrap
https://getbootstrap.com/docs/3.3/
4. JQuery
http://api.jquery.com/
5. Php
http://php.net



SPS IT kurzy java
https://www.youtube.com/channel/UCicuR0AVgLkHGDS7Y0Wzkkg/videos

http://www.itnetwork.cz/java/android/



Android 4 Pruvodce programovï¿½nï¿½m mobilnï¿½ch aplikacï¿½ ï¿½ Allen Grant
http://cs.wikipedia.org/ï¿½%AD_jazyk%29
http://cs.wikipedia.org/ï¿½st%C3%A9m%29
http://www.globalnerdy.com/ï¿½ndows-phone/
http://help.adobe.com/ï¿½3b-8000.html#ï¿½
http://www.businessinsider.com/ï¿½one-6-2014-8
http://www.androidmarket.cz/ï¿½kartu-navod/
http://www.mobinfo.cz/ï¿½cni-systemy/


1 Instalace Eclipse
Stï¿½hneme na adrese: http://www.eclipse.org/downloads/


Emulï¿½tor
Genymotion

Postup instalace
Java SE Development kit 8 Update 20 (64-bit)


Vyhledat ucebnice na knihï¿½ch
OREILLY BOOK
https://learning.oreilly.com/library/view/oracle-cloud-infrastructure/9781260452600/ch7.xhtml

Instalace Apache a My SQL
https://www.itnetwork.cz/php/zaklady/wamp-xampp-instalace-apache-mysql-a-php-na-windows-lokalni-server


Stacï¿½ pri dobï¿½jenï¿½ bodu pouï¿½ï¿½t kï¿½d
"JEDNOU80"


http://localhost/phpmyadmin/
Vytvorï¿½me si databï¿½zi s kï¿½dovï¿½nï¿½m utf8_czech_ci


Apache doc_root
C:\xampp\htdocs

C:\install\install\PHP\ITnetworkMVC_02.zip\ITnetworkMVC_02\kontrolery

Python TOP
C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32
==============================================================================
C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\python.exe -m virtualenv todo


Instalace djago
py -m pip install Django==2.0.4
install upgrade
C:\Users\MKOCANDR>C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\python.exe -m pip install --upgrade pip

supsteni web serveru na loclhost

PS D:\Python\mysite> py manage.py runserver




admin
mkocandr
Kokosak8

==============================================================================
migrace tabulek z
py manage.py makemigrations moviebook
py manage.py migrate

==============================================================================
spustit httpd server
py manage.py runserver

==============================================================================
class Akce(models.Model):
    nazev_akce = models.CharField(max_length=200, verbose_name="Nï¿½zev akce")
    datum_konani = models.DateTimeField()

    def __str__(self):
        return "Nazev akce: {0} | Datum konï¿½nï¿½: {1} ".format(self.nazev_akce, self.datum_konani)

    class Meta:
        verbose_name = "Udï¿½lost"
        verbose_name_plural = "Udï¿½losti"

class Clen (models.Model):
    email = models.EmailField(max_length = 300, unique=True)
    rc = models.CharField(max_length=10, verbose_name="Rodnï¿½ Cï¿½slo", default="", unique=True)
    narozen = models.DateTimeField
    clenem_od = models.DateTimeField
    active = models.BooleanField(default=False)
    jmeno = models.CharField(max_length = 40, default="", unique=False)
    prijmeni = models.CharField(max_length = 40, default="", unique=False)
    facr_id = models.IntegerField (default=1)
    var_symbol = models.IntegerField (default=1)

    def __str__(self):
        return "Jmï¿½no: {0} | Prï¿½jemnï¿½: {1} | email {3} ".format(self.jmeno, self.prijmeni, self.email)


    class Meta:
        verbose_name = "Clen"
        verbose_name_plural = "Clenovï¿½"


class Uzivatel(AbstractBaseUser):

    email = models.EmailField(max_length = 300, unique=True)
    is_admin = models.BooleanField(default=False)

    class Meta:
        verbose_name = "uï¿½ivatel"
        verbose_name_plural = "uï¿½ivatelï¿½"

    objects = UzivatelManager()

    USERNAME_FIELD = "email"

    def __str__(self):
        return "email: {}".format(self.email)

    @property
    def is_staff(self):
        return self.is_admin

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True


class Ucastnici(models.Model):
    akce = models.ForeignKey(Akce, on_delete=models.CASCADE, null=False, verbose_name="Akce")
    clen = models.ForeignKey(Clen, on_delete=models.CASCADE,null=False, verbose_name="Clen")

    def __str__(self):
        tags = [i.tag_title for i in self.tagy.all()]
        return "Akce: {0} | Datum: {1} | Ucastnï¿½k: {2} ".format(akce.nazev_akce, akce.datum_konani, clen.jmeno, clen.prijmeni)


    class Meta:
        verbose_name = "ï¿½castnï¿½k"
        verbose_name_plural = "ï¿½castnï¿½ci"


==============================================================================
py manage.py shell
A do nej napï¿½eme nï¿½sledujï¿½cï¿½ kï¿½d:

from moviebook.models import Film, Zanr, Clen, Akce, Ucastnici
clen = Clen() # Vytvorï¿½me si novï¿½ film
clen.email="miko73@seznam.cz"
clen.narozen="22.9.1973"
clen.clenem_od="1.1.2019"
clen.active=1
clen.jmeno="Michal"
clen.prijmeni="Kocandrle"
clen.facr_id=2
clen.save()


Clen.objects.all() # Zobrazï¿½ vï¿½echny existujï¿½cï¿½ filmy





==============================================================================
PS D:\Python\mysite> py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0003_auto_20180626_0457...Traceback (most recent call last):
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 83, in _execute
    return self.cursor.execute(sql)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\sqlite3\base.py", line 301, in execute
    return Database.Cursor.execute(self, query)
sqlite3.OperationalError: table "moviebook_uzivatel" already exists

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "manage.py", line 15, in <module>
    execute_from_command_line(sys.argv)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\__init__.py", line 371, in execute_from_command_line
    utility.execute()
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\__init__.py", line 365, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\base.py", line 288, in run_from_argv
    self.execute(*args, **cmd_options)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\base.py", line 335, in execute
    output = self.handle(*args, **options)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\core\management\commands\migrate.py", line 198, in handle
    post_migrate_state = executor.migrate(
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 117, in migrate
    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 147, in _migrate_all_forwards
    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\executor.py", line 244, in apply_migration
    state = migration.apply(state, schema_editor)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\migration.py", line 122, in apply
    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\migrations\operations\models.py", line 92, in database_forwards
    schema_editor.create_model(model)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\base\schema.py", line 298, in create_model
    self.execute(sql, params or None)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\base\schema.py", line 117, in execute
    cursor.execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 100, in execute
    return super().execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 68, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 77, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 85, in _execute
    return self.cursor.execute(sql, params)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\utils.py", line 83, in _execute
    return self.cursor.execute(sql)
  File "C:\Users\MKOCANDR\AppData\Local\Programs\Python\Python38-32\lib\site-packages\django\db\backends\sqlite3\base.py", line 301, in execute
    return Database.Cursor.execute(self, query)
django.db.utils.OperationalError: table "moviebook_uzivatel" already exists
==============================================================================
class Uzivatel(AbstractBaseUser):

    email = models.EmailField(max_length = 300, unique=True)
    is_admin = models.BooleanField(default=False)

    class Meta:
        verbose_name = "uï¿½ivatel"
        verbose_name_plural = "uï¿½ivatelï¿½"

    objects = UzivatelManager()

    USERNAME_FIELD = "email"

    def __str__(self):
        return "email: {}".format(self.email)

    @property
    def is_staff(self):
        return self.is_admin

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True
==============================================================================
https://docs.python.org/3/library/datetime.html


==============================================================================
to change data model
in models.py added

class Akce(models.Model):
    nazev_akce = models.CharField(max_length=80, verbose_name="Nï¿½zev akce")
    datum_konani = models.DateTimeField(auto_now_add=True)


    def __str__(self):
        return "Nazev_akce: {0}".format(self.nazev_akce)

    class Meta:
        verbose_name="Akce"
        verbose_name_plural="Akce"

in admin.py
from .models import Akce, Film, Zanr, Tag, Uzivatel, UzivatelManager #Importujeme si modely

#Modely registrujeme
admin.site.register(Akce)
admin.site.register(Film)
admin.site.register(Zanr)
admin.site.register(Uzivatel, UzivatelAdmin)
admin.site.register(Tag)

PS D:\python\mysite> py manage.py makemigrations
Migrations for 'moviebook':
  moviebook\migrations\0005_akce.py
    - Create model Akce
PS D:\python\mysite> python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0005_akce... OK



PS D:\python\mysite> python manage.py sqlmigrate
usage: manage.py sqlmigrate [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--database DATABASE] [--backwards] app_label migration_name
manage.py sqlmigrate: error: the following arguments are required: app_label, migration_name

python manage.py showmigrations
PS D:\python\mysite> python manage.py showmigrations
admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
ahoj_svete
 (no migrations)
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
 [X] 0008_alter_user_username_max_length
 [X] 0009_alter_user_last_name_max_length
calculator
 (no migrations)
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
moviebook
 [X] 0001_initial
 [X] 0002_auto_20180606_1143
 [X] 0003_auto_20180626_0457
 [X] 0004_auto_20180628_0657
 [X] 0005_akce
 [X] 0006_clen
 [X] 0007_clen_klub_id
 [X] 0008_ucastnici
 [X] 0009_auto_20201002_1345
 [X] 0010_clen_cislo_uctu
 [X] 0011_auto_20201006_1332
 [X] 0012_auto_20201006_1339
 [X] 0013_akce_vedouci
 [X] 0014_akce_trener
 [ ] 0015_auto_20201006_1352
 [ ] 0016_auto_20201006_1354
 [ ] 0017_auto_20201006_1355
 [ ] 0018_remove_clen_telefonni_cislo
 [ ] 0019_clen_telefonni_cislo
sessions
 [X] 0001_initial

PS D:\python\mysite>  python manage.py sqlmigrate moviebook 0015_auto_20201006_1352
BEGIN;
--
-- Add field telefonni_cislo to clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "narozen" datetime NOT NULL, "clenem_od" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "narozen", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo") SELECT "id", "email", "rc", "narozen", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", '' FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
--
-- Alter field clenem_od on clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "narozen" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "clenem_od" datetime NOT NULL);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "narozen", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "clenem_od") SELECT "id", "email", "rc", "narozen", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "clenem_od" FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
--
-- Alter field narozen on clen
--
ALTER TABLE "moviebook_clen" RENAME TO "moviebook_clen__old";
CREATE TABLE "moviebook_clen" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "email" varchar(300) NOT NULL UNIQUE, "rc" varchar(10) NOT NULL UNIQUE, "clenem_od" datetime NOT NULL, "active" bool NOT NULL, "jmeno" varchar(40) NOT NULL, "prijmeni" varchar(40) NOT NULL, "facr_id" integer NOT NULL, "var_symbol" integer NOT NULL, "klub_id" integer NOT NULL, "cislo_uctu" varchar(30) NOT NULL UNIQUE, "telefonni_cislo" varchar(30) NOT NULL UNIQUE, "narozen" datetime NOT NULL);
INSERT INTO "moviebook_clen" ("id", "email", "rc", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "narozen") SELECT "id", "email", "rc", "clenem_od", "active", "jmeno", "prijmeni", "facr_id", "var_symbol", "klub_id", "cislo_uctu", "telefonni_cislo", "narozen" FROM "moviebook_clen__old";
DROP TABLE "moviebook_clen__old";
COMMIT;


==============================================================================
python manage.py migrate moviebook 0015_auto_20201006_1352 --fake


PS D:\python\mysite> python manage.py migrate moviebook 0015_auto_20201006_1352 --fake
Operations to perform:
  Target specific migration: 0015_auto_20201006_1352, from moviebook
Running migrations:
  Applying moviebook.0015_auto_20201006_1352... FAKED
PS D:\python\mysite>  python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, moviebook, sessions
Running migrations:
  Applying moviebook.0016_auto_20201006_1354... OK
  Applying moviebook.0017_auto_20201006_1355... OK
  Applying moviebook.0018_remove_clen_telefonni_cislo... OK
  Applying moviebook.0019_clen_telefonni_cislo... OK



==============================================================================
py manage.py shell

from datetime import date
from moviebook.models import Akce, Film, Zanr, Tag, Uzivatel, UzivatelManager


akce_z = Akce(nazev_akce = "Zï¿½pas Repy", datum_konani = date(2020, 10, 4).isoformat()) # Vytvorï¿½me si novï¿½ akcii

akce_z.save()
akce_z
Akce.objects.all()

akce_z = Akce.objects.get(nazev_akce="Zï¿½pas Repy")


==============================================================================
miko datetime
https://www.itnetwork.cz/python/oop/knihovna-datetime-pro-python
https://docs.python.org/3/library/datetime.html
==============================================================================
miko návrhové vzory
https://python-patterns.guide/

miko singleton
V celem projektu musi byt jen jedna instance singletonu, a to zajistíme prázdným konstruktorem
a v __new__ vrátíme nebo si zvoláme svoje new
        if cls._instance is None:
            print('Creating the object')
            cls._instance = super(Logger_e1, cls).__new__(cls)
            # Put any initialization here.


class Logger(object):
    _instance = None

    def __init__(self):
        raise RuntimeError('Call instance() instead')

    @classmethod
    def instance(cls):
        if cls._instance is None:
            print('Creating new instance')
            cls._instance = cls.__new__(cls)
            # Put any initialization here.
        return cls._instance

class Logger_e1(object):
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            print('Creating the object')
            cls._instance = super(Logger_e1, cls).__new__(cls)
            # Put any initialization here.
        return cls._instance



# log = Logger()
log1 = Logger.instance()
print(log1)
log2 = Logger.instance()
print(log2)

log3 = Logger_e1()
print (log3)
log4 = Logger_e1()
print (log4)



==============================================================================
miko dbadmin
http://localhost:8000/admin/

==============================================================================
miko server
py manage.py runserver

==============================================================================
http://localhost:8000/moviebook/film_index/
==============================================================================
miko django migration
https://docs.djangoproject.com/en/3.1/topics/migrations/
==============================================================================
miko python
https://www.tutorialspoint.com/python/index.htm
==============================================================================
miko data

array
    sorted(arr)

list

set

dict
dict = {'{': 0, '[': 0, '(': 0, ')':0 , ']':0, '}':0}



==============================================================================
miko python doc
miko doc

miko python
https://www.tutorialspoint.com/python/index.htm


miko sql light
https://www.sqlite.org/lang_datefunc.html
https://www.sqlite.org/lang_corefunc.html
https://www.tutlane.com/tutorial/sqlite/sqlite-upper-function

https://www.zdrojak.cz/

miko git
https://blog.horejsek.com/jasne-umim-git-dot-dot-dot/

miko codility
https://app.codility.com/programmers/lessons/90-tasks_from_indeed_prime_2015_challenge/
https://www.martinkysel.com/codility-ladder-solution/





python advanced
https://machinelearningknowledge.ai/activity/?hashtag/beginners/
https://machinelearningknowledge.ai/11-python-data-visualization-libraries-data-scientists-shouldknow/
https://machinelearningknowledge.ai/category/mlkblogs/python/
https://www.datasciencecentral.com/profiles/blogs/python-for-big-data-in-one-picture?xg_source=activity


https://docs.python.org/3.3/tutorial/index.html

miko codity
https://programming-review.com/python/algorithms#primes

for all programming
https://programming-review.com/
https://docs.python.org/3.3/tutorial/index.html

miko codity including assignments
==============================================================================

==============================================================================


--update vypis_komplet set Datum = substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2);


alter table vypis_komplet add COLUMN datum_transakce datetime;


drop table "CSV_k_vyplneni_FO_UTF-";
select count(*) from "CSV_k_vyplneni_FO";
select count(*) from "CSV_k_vyplneni_FO" where RODNE_CISLO like '%7309%';



FOR csv in CSV_k_vyplneni_FO
	insert into moviebook_clen (jmeno=csv.jmeno, prijmen=csv.prijmeni, rc=csv.RODNE_CISLO, clenem_od=csv.SPORTOVCEM_OD)


select sum(Objem), count(*) from vypis_komplet where Poznï¿½mka like upper('%forman%');



==============================================================================
miko data placen

--update vypis_komplet set datum_transakce = datetime("13.12.2020", '%d.%m.%Y');
--SELECT date('now');
--select date(Datum,'localdate') as created_at from vypis_komplet where ROWID < 10 ;
--select Datum||' 16:16:46' as created_at from vypis_komplet where ROWID < 10 ;
--update vypis_komplet set Datum = Datum||' 16:16:46';
--SELECT datetime('now');
--SELECT datetime('now','localtime');
--pragma table_info('vypis_komplet');
--select created_at from referrals;
--select created_at from referrals;
--SELECT datetime(1092941466, 'unixepoch');
--SELECT date('now');
-- update vypis_komplet set datum_transakce = Datum;
--select strftime('%d.%m.%Y', Datum, ) from vypis_komplet where ROWID < 1;
--select substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2) from vypis_komplet WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
--update vypis_komplet set Datum = substr(Datum, 7,4)||'-'||substr(Datum, 4,2)||'-'||substr(Datum, 1,2);
--select Datum from vypis_komplet WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
-- update vypis_komplet set Datum = '2017-09-03 16:16:46' WHERE Protiï¿½cet = '2900118951' and Objem = 2000;
--select strftime(Datum, 'DD.MM.YYYY HH:MM:SS'), objem from vypis_komplet WHERE Protiï¿½cet = '2900118951' and objem = 1100;
--drop table vypis_komplet;
--select strftime('%Y', Datum) from vypis_komplet where ROWID < 10;
--select sum(Objem), Poznï¿½mka, strftime('%Y', Datum) from vypis_komplet where Objem > 0 group by Poznï¿½mka, strftime('%Y', Datum);
--select sum(Objem), Protiï¿½cet, strftime('%Y', Datum) from vypis_komplet where Objem > 0 group by Protiï¿½cet, strftime('%Y', Datum);
select sum(Objem), Protiï¿½cet, Poznï¿½mka from vypis_komplet where Objem > 0 and strftime('%Y', Datum)='2019' and Poznï¿½mka like '%Kocan%' group by Protiï¿½cet, Poznï¿½mka;


==============================================================================
miko pridvam form

in views.py
od samostatneho views
from .clen_view import ClenIndex, CurrentClenView, CreateClen, EditClen



in urls.py
# sada formulï¿½ru pro clena
    path("clen_index/", views.ClenIndex.as_view(), name="clenove_index"),
    path("<int:pk>/clen_detail/", views.CurrentClenView.as_view(), name="clenove_detail"),
    path("create_clen/", views.CreateClen.as_view(), name="novy_clen"),
    path("<int:pk>/edit_clen/", views.EditClen.as_view(), name="edit_clen"),


in admin.py
admin.site.register(Clen)

in forms.py
nadefinovat ClenForm


==============================================================================
==============================================================================
cisla = []
vstup="vstup"
while vstup != "":
      vstup = input("Zadej cislo - ")
      if vstup != "":
         cisla.append(int(vstup))

cisla.sort()
median = cisla[len(cisla)//2]
for cislo in cisla:
   print(cislo, " se od mediï¿½nu odliï¿½uje o ", cislo - median)
==============================================================================
miko python format

print('{0} and {1}'.format('spam', 'eggs'))


==============================================================================
miko python strings
miko python print

table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}
  for name, phone in table.items():
    print(f'{name:10} ==> {phone:10d}')

==============================================================================
==============================================================================
binary gaps
import sqlite3
#1) prevod in na bin
n = 2000000000
#  b=bin(n)[2:]
b=bin(n)
c = b[2:len(b)]
print(b)
print(c)
#2) rozbor bin retezce
nul_max=[]
prev=1
current=1
ukonceno=1
for x in c:
   prev = current
   current = x
   if prev == "1" and current == "0":
      ukonceno = 0
      nul_max.append(1)
   elif prev == "0" and current == "0":
      nul_max[len(nul_max)-1] += 1
   elif prev == "0" and current == "1":
      ukonceno = 1
if ukonceno:
   pass
else:
   nul_max[len(nul_max) - 1] = 0
   ukonceno = 0

nul_max.sort()
if nul_max:
   print(nul_max[len(nul_max)-1])
else:
   print("no gaps")

==============================================================================
frog
import math

def solution(x,y,d):
    r = y-x
    if(r==0): return 0

    c = math.ceil(r/d)
    return c

my soulution
==============================================================================
def solution(x, y, d):
    if d <= 0:
        print("Takhel tam nedojdu")
        return 0
    if x * y <= 0 or y < x:
        print("spatny vstup")
        return 0
    steps = (y-x)//d
    #print(steps)
    if ((y-x)%d) > 0:
        steps += 1
    return steps


X = 10
Y = 85
D = 30
print(solution(X,Y,D))
==============================================================================
OddOccurrencesInArray

import sqlite3
#fine the unique
def solution(A):
    existing = []
    for a in A:
        if A.count(a) > 1:
            pass
        else:
            existing.append(a)

    return existing


A = [1,1,2,3,2,3,3,4,4,5]
print(solution(A))
==============================================================================

def solution(A):
   A.sort()
   #print(A)
   c=0
   for x in A:
      if x+1 == A[c+1]:
         #print(x)
         pass
      else:
         return x+1
      c+=1
   return 0


def solution2(a):
   if (len(a) == 0):
      return 1
   print (max(a))
   print (len(a))
   if (max(a) == len(a)): # jen performance na ï¿½kor obecnosti
      return len(a) + 1

   a.sort()
   for _ in range(1, len(a) + 1):
      if _ != a[_ - 1]:
         return _

A = [2,3,1,5]
print("resolution - ",solution2(A))

==============================================================================
type balance pomale
import sqlite3


def solution(A):
   res = sum(A)
   for edge in range(1,len(A)):
      print("edge -",edge)
      left=0
      right=0
      c=0
      left = sum(A[:edge])
      right= sum(A[edge:])
      #for a in A:
      #   if c <= edge:
      #     left = left + a
      #   else:
      #      right = right+a
      #   c+=1
      print("left ", A[:edge])
      print("right ", A[edge:])
      print("diff -", abs(left-right))
      print("res", res)
      if res > abs(left - right):
         res = abs(left - right)
      edge += 1
      print("=======")
   return res

A = [3,1,2,4,3]
print("resolution - ",solution(A))

type balance rychla
def solution(a):
   l = len(a)
   ms = None  # min sum
   sl = 0  # sum left
   sr = sum(a)

   for p in range(0, l - 1):
      sl = sl + a[p]
      sr = sr - a[p]
      ab = abs(sl - sr)
      if (ms == None):
         ms = ab
      if (ms > ab):
         ms = ab
   return ms
==============================================================================
(pole A zacï¿½nï¿½ nulou), cyklus je vï¿½dy
    for a in range(0,len(A))

dvourozmerne pole
miko pole create
miko vynulovana n prvku


rada = [0] * n #create 0 row
m = max(r)     #get max from row
r = [m] * n    #fill in row by max



    print("Pro pole ", S )
    for x in range(0, len(P)):
    print("pro x={3} |pro [{0}:{1}] result {2}".format(x, x+1, S[x:x+1], x))

Pro pole  ['2', '1', '4', '2', '2', '4', '1']
pro x=0 |pro [0:1] result ['2']
pro x=1 |pro [1:2] result ['1']
pro x=2 |pro [2:3] result ['4']


#!/usr/bin/env python3

def solution(a):
    kinosal = []

    for i in range(5):
        temp = []
        for j in range(2):
            temp.append(j)
        kinosal.append(temp)

        kinosal[i][0] = i
        kinosal[i][1] = 0
    for a in kinosal:
        print(a)

A = [3,1,2,4,3]
print(solution(A))
[0, 0]
[1, 0]
[2, 0]
[3, 0]
[4, 0]
None
==============================================================================
miko set (unique list)
miko enumerate

def solution(x,A):
   l = len(A)
   r = -1
   path=set()
   for i, a in enumerate(A):
      path.add(a)
      #print("{0} - {1}".format(i,a))
      if a == x:
         if len(path) == x-1:
            return i
   return r


A = [1,3,1,5,2,3,5,4]
A = [1,3,1,3,4,2,5,4]
print("resolution - {0} - {1}".format(solution(5,A),solution2(5,A)))
==============================================================================
MissingInteger

import sqlite3

def solution(A):
   s = {x for x in A if x > 0}
   if s:
      s = sorted(s)
   else:
      return 1
   if s[0] > 1:
      return 1

   print(s)
   for i, a in enumerate(s):
      current = a
      if i+1 < len(s):
         next = s[i+1]
      else:
         return current + 1
      print("curren {0} next {1}".format( current, next))
      if current + 1 == next: #mezera
         pass
      else:
         return current + 1
   print("last + 1 =",s[len(s)])
   return s[len(s)] + 1


A = [1,3,1,5,2,3,5,4]
A=[90, 91, 92, 93]
print("resolution - {0} ".format( solution(A) ) )


==============================================================================
rychlejsi MissingInteger

def solution(a):
    a = set(a)
    for i in range(1,1000000+1):
        if i not in a:
            return i

    return

A = [1,3,1,5,2,3,5,4]
A=[90, 91, 92, 93]
print("resolution - {0} ".format( solution(A) ) )

==============================================================================

do not understand

PassingCars

==============================================================================
miko dict
def solution(a):
    d=dict()
    for e in a:
        if e in d:
            d[e]+=1
        else:
            d[e]=1
    #print(d)
    return len(d)

a=[1,1,1,2,2,4,5]
solution(a)

==============================================================================
pruseciky kruhy
import sqlite3
def solution(A):
    posun = 0
    delka = len(A)
    e = []
    for i, a in enumerate(S):
        e += [(i-a,1),(i+a,0)] #nauklada is zacatky kruhu na ose (1) a konce kruhu na ose (0) do pole e
        #print(i-a, i, i+a)
    print(e)
    e.sort(key=lambda x: (x[0], not x[1])) #pole e sesortuje podle pruniku kruhu s osou
    print(e)
    c=0 # count of intersections
    ac=0 # active circles

    for _, start in e: #jedeme kruhy jeden za druhym a bereme is priznak startu nebo konce.
    #    print("start = {0} c = {1} ac = {2}".format( start, c, ac))
        if start:
            c+=ac #k celkovemu poctu pruniku, pricte pocet probihajicich kruhu
            ac+= 1 # pocet probihajicich kruhu ++
        else:
            ac-= 1 #jestlize nejaky kruh konci snizi se pocet aktivnich kruhu
        if c > 10000000:
            return -1
    return c

S = [1,5,2,1,4,0]
==============================================================================


==============================================================================

MaxDoubleSliceSum
from collections import defaultdict
# A[X + 1] + A[X + 2] + ... + A[Y âˆ’ 1] + A[Y + 1] + A[Y + 2] + ... + A[Z âˆ’ 1].
# double slice (0, 3, 6), sum is 2 + 6 + 4 + 5 = 17,
# double slice (0, 3, 7), sum is 2 + 6 + 4 + 5 âˆ’ 1 = 16,
# double slice (3, 4, 5), sum is 0.
#   0 1 2  3 4 5  6 7
#A=[3,2,6,-1,4,5,-1,2]


def solution(A):
    s=set()
    X=0
    Z=0
    max=0
    for X in range(0, len(A)):
        for Z in range(0, len(A)):
            for Y in range(X+1, Z-1):
                    #print("[{} {} {} ] - {}".format(X,Y,Z,sum(A[X+1:Y-1]) + sum(A[Y+1:Z-1]) ))
                    m = sum(A[X+1:Y]) + sum(A[Y+1:Z])
                    print("[{} {} {} ] - {} + {} = {}".format(X, Y, Z, A[X + 1:Y], A[Y + 1:Z], m))
                    #print("m {} max {}".format(m, max))
                    if max < m:
                        max = m
    return max

A=[3,2,6,-1,4,5,-1,2]
print(solution(A))

==============================================================================
MaxSliceSum

from collections import defaultdict
#  A[P] + A[P+1] + ... + A[Q]
#(3, 4) is a slice of A that has sum 4,
#(2, 2) is a slice of A that has sum âˆ’6,
#(0, 1) is a slice of A that has sum 5,
#no other slice of A has sum greater than (0, 1).

def solution(A):
    s=set()
    P=0
    Q=0
    max=0
    for P in range(0, len(A)):
        for Q in range(0, len(A)):
            print("A[P:Q] {} sum {}".format(A[P:Q],sum(A[P:Q]) ))
            if max < sum(A[P:Q]):
                max = sum(A[P:Q])
    return max

# [0 1  2 3 4]
A=[3,2,-6,4,0]
print(solution(A))
==============================================================================

#to A[Q] âˆ’ A[P], provided that A[Q] â‰¥ A[P]. Otherwise, the transaction brings loss of A[P] âˆ’ A[Q].

def solution(A):
    max = 0
    l = len(A)
    x=0
    y=0
    for x in range (0, l-1):
#        print(l -x -1)
        for y in range(x, l-1):
            print("[{} {}] max {}".format(l - x - 1, l - 2 - y, A[l - x - 1]- A[l - 2 - y]))
            if max < A[l - x - 1]- A[l - 2 - y]:
                max = A[l - x - 1]- A[l - 2 - y]
    return max
# delka bude 6
# max range 5
# pojedu 5-4,5-3, 5-2, 5-1, 5-0, 4-3, 4-2, 4-1, 4-0, 3-2, 3-1, 3-0, 2-1, 2-0, 1-0,
A=[23171,21011,21123,21366,21013,21367]

print(solution(A))

#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
#==============================================================================
########################################################################
from collections import defaultdict

def solution(a):
    n = len(a)
    if n==0: return -1

    d=defaultdict(lambda: 0)
    dm = a[0] # dominator
    for e in a:
        d[e]+=1
        if d[dm]<d[e]:
            dm = e
    if(d[dm]> n//2):
        return a.index(dm)
    else:
        return -1
########################################################################
LongestPassword
s = "zxcasdqwe123"

import re


def a(s):
    m = re.match(r"^[a-zA-Z0-9]+$", s)
    if (m == None):
        return False
    else:
        return True


def l(s):
    l = re.findall(r'[a-zA-Z]', s)
    s = "".join(str(i) for i in l)
    print(len(s))
    return len(s)


def d(s):
    d = re.findall(r'[0-9]+', s)
    s = "".join(str(i) for i in d)
    return len(s)


def solution(s):
    nws = []
    ws = s.split()
    # print(ws)
    for w in ws:
        if a(w) and l(w) % 2 == 0 and d(w) % 2 == 1:
            nws.append(w)

    print(nws)

    if (len(nws) == 0):
        return -1
    mx = max(set(nws), key=len)
    return (len(mx))
########################################################################

from collections import defaultdict

def validate(S):
    res = 1
    num_alp=0
    num_dig=0
    for c in S:
        if c.isascii:
            if c.isalpha():
                num_alp +=1
            elif c.isnumeric():
                num_dig +=1
            else:
                return 0
        else:
            return 0
    if num_dig%2 == 0:
        return 0
    if num_alp%1 == 1:
        return 0
    return 1


def solution(S):
    d=defaultdict(lambda: 0)
    print(S.split())
    for str in S.split():
        d[str] = validate(str)
    max = 0
    for str in d:
        if d[str]:
            if max < len(str):
                max = len(str)
    return max

S = "test 5 a0A pass007 ?xy1"

# nacpu retÄ›zce do slovnÃku, budu je postupnÄ› validovat
# nejdelÅ¡Ã­ z validnÃ­ch je vÃ½sledek.


print (solution(S))

########################################################################
miko peaks
from collections import defaultdict
# pojedu polem a urÄÃ­m vrcholy
#
#prvni neni vrchol
#posledni neni vrchol
#jak rozdÄ›lit pole kolem vrcholÅ¯
# projedu pole, najdu vrcholy
# je-li vzdÃ¡lenost vrcholÅ¯ jedna, ukonÄÃ­me skupinu hned za prnÃ­m vrcholem
#skupina bez vrcholu musÃ­ bÃ½t pÅ™ipojena zpÄ›t k poslednÃ­ skupinÄ› s vcholem
# rozdÄ›lÃ­m to na jednotlivÃ¡ pole
#udÄ›lÃ¡m dic pozic a ke keÅ¾dÃ© z  nich co ta pozice znamenÃ¡, pÅ™Ã­znamky First, Last, Peak
#len=12
#last index = 11
#A=[1,2,3, 4 ,3, 4 ,1,2,3,4, 6 ,2]

def solution(A):
    d = defaultdict(lambda :0)
    is_first=1
    is_last=0
    res =0
    from_peek = 0
    for x in range(0, len(A)) :
        if x == len(A)-1:
            d[x] = "plain"
        else:
            if is_first:
                d[x] = "first"
                is_first = 0
            elif A[x-1] < A[x] and A[x] > A[x+1]:
                if from_peek > 0:
                    d[x] = "peak"
                    from_peek = 0
            else:
                d[x] = "plain"
        from_peek+=1
    l_index = len(d) -1
    last_element=""
    for el in d:
        print(el,d[el])
        if d[el] == "peak":
            res +=1
    return res


A=[1,2,3,4,3,4,1,2,3,4,6,2]
print(solution(A))
########################################################################
miko CountSemiprimes
from collections import defaultdict
#jsou primes 2, 3, 5, 7, 11 and 13.
#semiprimes jsou 4, 6, 9, 10, 14, 15, 21, 22, 25, 26 ruzne dÄ›litele ale puze dva
#PQ jsou dve pole semiprimes
#(P[K], Q[K]), where 1 â‰¤ P[K] â‰¤ Q[K] â‰¤ N.
#The number of semiprimes within each of these ranges is as follows:
#P=[1,4,16]
#Q=[26,10,20]
#N=26
#12 = 2x6 ale taky 3x4


#(1, 26) is 10, (4, 6, 9, 10, 14, 15, 21, 22, 25, 26)
#(4, 10) is 4,  (4, 6, 9, 10)
#(16, 20) is 0. ()
# should return array [10,4,0]
#jak najdu semiprimes
# pak je nacountuju po vÃ½seÄÃ­ch.

def solution(P,Q,N):
    semi=[]
    for x in range(2, N+1):
        poc = 0
        for y in range(2,x):
            #if x ==8: print("{}|{}".format(x,y))
            if x%y == 0:
                if x//y==y:
                    poc+=2
                else:
                    if semi.count(x//y)>0:
                        print("tady", x//y)
                        poc += 2
                    else:
                        poc+=1
            if poc > 2:
                break

        if poc==2:
            semi.append(x)
        #print("[{} | {}]".format(x,poc))



    semi=[4, 6, 9, 10, 14, 15, 21, 22, 25, 26]
    print(semi)

    res=[0]*len(P)
    for x in range(0,len(P)):
        print("[{}:{}]".format(P[x], Q[x]+1))
        temp=[x for x in range( P[x], Q[x]+1)]
        print(temp)
        for y in temp:
            if semi.count(y):
                print(y)
                res[x]+=1

    return res


P=[1,4,16]
Q=[26,10,20]
N=26
#print(semi_primes(N))

print(solution(P,Q,N))
########################################################################
CountNonDivisible

#A=[3,1,2,3,6]

#A[0] = 3, the non-divisors are: 2, 6,
#A[1] = 1, the non-divisors are: 3, 2, 3, 6,
#A[2] = 2, the non-divisors are: 3, 3, 6,
#A[3] = 3, the non-divisors are: 2, 6,
#A[4] = 6, there aren't any non-divisors.
#A=[3,1,2,3,6]
# najdi nedÄ›liÄe return [2, 4, 3, 2, 0]
# udÄ›lÃ¡m si pole res o stenem poctu prvku
# vezmu prvek a projedu s nÃ­m zbytek, kdyz najdu do res[i] +=1
# return res


def solution(A):
    res=[0]*len(A)
    for x in range(0, len(A)):
        for y in range(0, len(A)):
#            if x==1: print (A[x],A[y])
            if A[x]%A[y]>0:
                res[x] += 1
    return res


A=[3,1,2,3,6]

#print(semi_primes(N))
print(solution(A))
########################################################################
PrvoÄÃ­sla
prvocislo3.py
# prvocislo3.py - VypÃ­Å¡e prvoÄÃ­sla menÅ¡Ã­ neÅ¾ zadanÃ½ limit
import sys
m=int(sys.argv[1])
for n in range(2,m): # cyklus 2..m-1
p=2 # zaÄÃ¡tek testu
while p*p<=n:
if n % p == 0:
break
p+=1
if p*p > n: # n je prvoÄÃ­slo
print(n,end=", ")
print() # zÃ¡vÄ›reÄnÃ½ konec Å™Ã¡dky
########################################################################
CommonPrimeDivisors
# A=[15,10,3]
# B=[75,30,5]
#return 1, because only one pair (15, 75) has the same set of prime divisors.
#najÃ­ tÃ¡kladnÃ­ dÄ›litele
# vracet pocet shod
def devisor_list(a):
    div = []
    for x in range(2,a):
        if a%x==0:
            found=0
            for d in div:
                found=0
                if x%d == 0:
                   found=1
            if found == 0:
                div.append(x)

    return div


def solution(A, B):
    res=0
    div_lists=[]
    for x in range(0, len(A)):
        #print("[{}:{}]".format(A[x], B[x]))
        d1=devisor_list(A[x])
        d2=devisor_list(B[x])

        rozdilna=0
        d1.sort()
        d2.sort()
        if len(d1)==len(d2) and len(d1) >0:
            for x in range(0, len(d1)):
                if d1[x] != d2[x]:
                    rozdilna=1
        else:
            rozdilna=1

        if rozdilna == 0:
            print("A- ", d1)
            print("B- ", d2)
            res+=1

    return res


A=[15,4,200]
B=[75,8,400]


#print(semi_primes(N))

print(solution(A,B))
#print(devisor_list(75))
########################################################################
==============================================================================
miko Fibonacci numbers
#!!! pro kazdou pozici hledam minimalni pocet fibo_skoku, jak se na ni dostanu !!!

def fib(n=25):
    # there are 26 numbers smaller than 1000
    f = [0] * (n)
    f[1] = 1
    for i in range(2, n):
        f[i] = f[i - 1] + f[i - 2]
    print("fib - {}",f)
    return f
## projedu si zadané pole pozic updatnu si to poctem skoku na kolik nejméne se tam dá dostat ?

def solution(a):
    a.insert(0, 1)
    a.append(1)
    print("extended a{}".format(a))
    n=len(a)
    steps = [0]+[n]*(n-1)
    print ("steps {}".format(steps))

    for p in range(1, len(steps)): # position
        s_min = n

        for jump in fib(): #pro každkou pozici hledám mimnimální pocet na kolik se tam dostanu
            prev_leaf = p - jump # ze kterého listu by se dalo ke skoku odrazit
            print("prev_leaf {} p {} jump {}".format(prev_leaf, p, jump ))
            if prev_leaf >= 0: # je-li prípadná odrazvá pozice kde muže být list vetší naž 0
                if a[prev_leaf] == 1 and steps[prev_leaf] + 1 < s_min: # (a[prev_leaf] == 1) je li tam  list
                #steps[prev_leaf] + 1 < s_min
                    print("s_min puv {} steps[prev_leaf] + 1 = {}".format(s_min, steps[prev_leaf] + 1 ))
                    s_min = steps[prev_leaf] + 1
            else:
                print("BREAK prev_leaf {} p {} jump {}".format(prev_leaf, p, jump ))
                break
        steps[p] = s_min
        print("steps in for ",steps)
# extended a[1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1]
# steps [0, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]
# fib - {} [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]
    return steps[-1] if steps[-1] != n else -1


#A=[0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0]
A= [0, 0, 0,  1, 1, 0, 1, 1, 0, 0, 0]
[0, 1, 1, 1, 13, 1, 2, 2, 1, 2, 2, 2, 3]
print(solution(A))
==============================================================================

MinMaxDivision
def get_max_sector(A, K):
    max_s = 0
    max_index=0
    for x in range(0,K):
        if sum(A[x])>max_s:
            max_s=sum(A[x])
            max_index=x
    return max_index


def solution(K,M,A):
    l=len(A)
    pocet_prvku = l
    s_init=l//K #init velikost sektoru
    sektory=[]
    pozice=0
    max_sector = 0
    sum_max = 0
    min_sum_in_sector= sorted(A)[-1]
    for x in range(0,K):
        if x != k1:
            sektory.append(A[pozice:pozice+s_init])
        else:
            sektory.append(A[pozice:])
        pozice +=s_init
        if sum(sektory[x]) > sum_max:
            sum_max = sum(sektory[x])
            max_sector = x
    #print("At the start ",sektory)
    # ma soused vic ? vezmi si jeho jeden
    stop_it=0
    while stop_it == 0:
        if max_sector == len(sektory)-1: #je posledni
            #move prvek back
            if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector]):
                sektory[max_sector-1].append(sektory[max_sector][0])
                sektory[max_sector] = sektory[max_sector][1:]
            else:
                #print("u posledniho to se nevyplati")
                stop_it = 1
            # reclaculate
            #print("in last",sektory)
        elif max_sector == 0: # je prvni
            if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]) :
                sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                #print("in firs",sektory)
            else:
                #print ("in the first to se nevyplati")
                stop_it = 1
        else: # je uvnitr
            if sum(sektory[max_sector+1]) > sum(sektory[max_sector -1]): #je -li sektor vpravo menší než ten vlevo
                if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector][1:]):
                    sektory[max_sector-1].append(sektory[max_sector][0])
                    sektory[max_sector] = sektory[max_sector][1:]
                else:
                    #print("in middle left < right to se nevyplati")
                    stop_it = 1
                # reclaculate
                #print("in middle move to left",sektory)
            elif sum(sektory[max_sector+1]) < sum(sektory[max_sector-1]):
                if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]):
                    sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                    sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                else:
                    #print ("in middle right > left to se nevyplati")
                    stop_it = 1
            else:
                if sektory[max_sector][0] > sektory[max_sector][-1]:
                    if sum(sektory[max_sector+1])+sektory[max_sector][-1] < sum(sektory[max_sector]):
                        sektory[max_sector+1].insert(0,sektory[max_sector][-1])
                        sektory[max_sector]= sektory[max_sector][:len(sektory[max_sector]) -1]
                    else:
                        #print ("in middle right = left move to right to se nevyplati")
                        stop_it = 1
                else:
                    if sum(sektory[max_sector-1])+ sektory[max_sector][0] <= sum(sektory[max_sector][1:]):
                        sektory[max_sector-1].append(sektory[max_sector][0])
                        sektory[max_sector] = sektory[max_sector][1:]
                    else:
                        #print ("in middle right = left move to left to se nevyplati")
                        stop_it = 1
                    # reclaculate


        max_sector = get_max_sector(sektory, K)
        #print("max_sector", max_sector)
        #print("at the end -", sektory)

    return sum(sektory[get_max_sector(sektory, K)])
########################################################################
CountTriangles

def solution(a):
    n=len(a)
    a.sort()
    print(a)
    c=0
    for p in range(0, n-2):
        q=p+1
        r=p+2
        while r<n:
            print("{}, {}, {}|c={}".format(a[p], a[q], a[r], c))
            if a[p]+a[q]>a[r]:
                c+=r-q
                r+=1
            elif q<r-1:
                q+=1
            else:
                r+=1
                q+=1
    return c

def solution2(B):
    A = sorted(B,reverse=True)
    res=0
    for x in range(0, len(A)):
        for y in range(x+1, len(A)):
            for z in range(y+1, len(A)):
                if A[x] < A[y] + A[z]:
                    #print("({},{},{})=({},{},{})".format(x, y, z, A[x], A[y], A[z]))
                    res +=1
    return res

B=[10, 2, 5, 1 , 8, 12]
print(solution(B))

########################################################################
==============================================================================
MinAbsSumOfTwo


from collections import defaultdict
# (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)
# extreme_double
# sequences of 2 elements?WRONG ANSWER
# got 200000 expected
#     1999999998
# 1.0.036 sOK
# 2.0.036 sWRONG ANSWER, got 200000 expected 1999999998
# 3.0.036 sOK


def solution2(A):
    min_asp=200000
    for x in range(0,len(A)):
        for y in range (x, len(A)):
            #print("{} {}".format(A[x], A[y]))
            #print(abs(A[x] + A[y])
            if min_asp > abs(A[x] + A[y]):
                min_asp = abs(A[x] + A[y])
    return min_asp


def solution2(A):
    B = sorted(A)
    abs_min=2000000
    n=len(B)
    #print(B)
#y=x+1 0:1, 1:2, 2:3, 3:4
#y=x+2      1:3, 2:4
#           1:4,
#
    p=1
    q=0

    while q<n:
        for p in range(q, n):
            if p !=q:
                #print("[{}, {}] ({},{})".format(q, p, B[p], B[q]))
                if abs_min > abs(B[p] + B[q]):
                    abs_min = abs(B[p] + B[q])
        q+=1
    return abs_min

def solution3(a):
    n=len(a)

    if n==1:
        return abs(a[0]+a[0])

    a.sort()
    #print(a)

    l=0 # first
    r=n-1 # last
    m = 2000000000
    print(a)
    while l<=r:
        dif= a[l]+a[r]
        #print('dif:', dif, 'a[l]:', a[l], 'a[r]:', a[r],'l:', l, 'r:', r)
        print("{} a[{}]: {} a[{}]".format( a[l], l, a[r], r))
        if dif==0:
            return 0
        m = min(m,abs(dif))
        if dif>0:
            r=r-1
        else:
            l=l+1

    return m

def solution(a):
        #0:4 1:4, 2:4,
        #2:3,
        #2:2
    n=len(a)
    if n==1:
        return abs(a[0]+a[0])

    a.sort()
    l=0 # first
    r=n-1 # last
    m=20000000
    print(a)
    while l<=r:
        print("[{} {}]".format(l, r))
        dif= a[l]+a[r]
        #print('dif:', dif, 'a[l]:', a[l], 'a[r]:', a[r],'l:', l, 'r:', r)
        print("{} a[{}]: {} a[{}]".format( a[l], l, a[r], r))
        if dif==0:
            return 0
        m = min(m,abs(dif))
        if dif>0:
            r=r-1
        else:
            l=l+1

    return m



A=[-10, -8, 3, 4, 5]

A=[1, 4, -3]
A=[-8, 4, 5, -10, 3]
A=[-1,-2,3,4,5,6]
print(solution(A))
==============================================================================
MaxNonoverlappingSegments

def solution(a,b):
    n=len(a)
    if n==0:
        return 0

    cnt=1
    e = b[0] #naberu si konec prvniho segmentu

    for i in range(1, n):
        #print("start[{}]={} end[{}]={}".format(i, a[i], i-1, e))
        if a[i] > e:
            cnt += 1
            e = b[i]

    return cnt


A=[1, 3, 7, 9, 9]
B=[5, 6, 8, 9, 10]

A=[1, 3, 7, 10, 13, 6]
B=[5, 6, 8, 11, 13, 14]

print(solution(A, B))





==============================================================================
tieropes
from collections import defaultdict
# svazat lana tak zby vznikolo co nejvice lan delky vetsi nebo rovno K {4}
# vyradim a zapoctu všechny lana vetší a rovno K
def solution(k,a):
    an = [e if e<k else 0 for e in a]
    print("an ", an)
    gek = 0
    for e in an:
        if e==0:
            gek+=1

    ts=0
    for e in an:
        if e==0:
            ts=0
        else:
            ts+=e
            print("{} {}".format(ts, e))
            if ts>=k:
                gek+=1
                ts=0
    return gek



A=[1, 1, 1, 1, 2, 3, 4, 3, 3, 3, 3, 1, 1, 3]
K=4
print(solution(K,A))

==============================================================================
MinAbsSum

def solution(A):
    n=len(A)
    soucet=0
    for x in range(0, n):
        print(A[x])
        if soucet > 0:
            s = -1
        else:
            s = 1

        if A[x] < 0:
            s = -s
        soucet += A[x] * s
    return abs(soucet)

==============================================================================
miko automaticke testovani v pythonu
miko test

assert a pytest

https://www.root.cz/clanky/testovani-webovych-aplikaci-s-rest-api-z-pythonu-2/



python -m unittest test_volume_cuboid.py

python -m unittest

==============================================================================

>>>>>>> 4ff42ecb21e51871b61e1fa19bda1db835315f01
==============================================================================
python tricks

condition = True
x = 1 if condition else 0
print (x)

to format large numbers you can use
num1=20000000000
which can also be codded as
num1=20_000_000_000
==============================================================================
with open('test.txt', 'r') as f:
    file_contens = f.read()

words = file_contents.split(' ')
word_count = len (words)
print(word_count)
==============================================================================
def myfunction(a, b):
    return a + b

funcs = [myfunction]
funcs[o](2,3)
==============================================================================
# How to merge two dictionaries
# in Python 3.5+:

>>> x = {'a': 1, 'b': 2}
>>> y = {'b': 3, 'c': 4}
>>> z = {**x, **y}
>>> z
{'c': 4, 'a': 1, 'b': 3}

# In Python 2.x you could use this:

>>> z = dict(x, **y)
>>> z
{'a': 1, 'c': 4, 'b': 3}
# Why Python Is Great:
# Function argument unpacking

def myfunc(x, y, z):
    print(x, y, z)

tuple_vec = (1, 0, 1)
dict_vec = {'x': 1, 'y': 0, 'z': 1}

>>> myfunc(*tuple_vec)
1, 0, 1

>>> myfunc(**dict_vec)
1, 0, 1
# The lambda keyword in Python provides a
# shortcut for declaring small and
# anonymous functions:

>>> add = lambda x, y: x + y
>>> add(5, 3)
8

# You could declare the same add()
# function with the def keyword:

>>> def add(x, y):
...     return x + y
>>> add(5, 3)
8

# So what's the big fuss about?
# Lambdas are *function expressions*:
>>> (lambda x, y: x + y)(5, 3)
8

# ? Lambda functions are single-expression
# functions that are not necessarily bound
# to a name (they can be anonymous).

# ? Lambda functions can't use regular
# Python statements and always include an
# implicit `return` statement.
==============================================================================

def trenslate_heroes():
   names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Waine']
   heroes = ['Spiderman','Superman','Deadpool','Batman']
   her_nums = ['1','2','3','4']
   for name, hero, her_num in zip (names, heroes, her_nums):
       print(f'{name} is actually {hero} cislo {her_num}')

def secti_to(a, b):
   return  a + b

funcs = [trenslate_heroes, secti_to]
funcs[0]()
print(funcs[1](2, 3))

==============================================================================


a,b=(4,5)
print(f'{a} {b}')
==============================================================================
a, b, *c = (1, 2, 3, 4, 5, 6, 7)
print(f'{a} {b} {c}')

a, b, *_ = (1, 2, 3, 4, 5, 6, 7)
print(f'{a} {b}')



a, b, *_, d = (1, 2, 3, 4, 5, 6, 7)
print(f'{a} {b} {d}')
1 2 7


==============================================================================
class Person():
    pass


person = Person()
person_info = {'first': 'Corey', 'last': 'Schafer'}
for key, value in person_info.items():
    setattr( person, key, value)
print(person.first, person.last)

for key in person_info.keys():
   print(getattr(person, key))
==============================================================================
get help for module
import smtpd
help(smtpd)

==============================================================================
continue here
https://www.youtube.com/watch?v=Vi9Y9AL13Rc

python modules
1) web developement
    request module
2) django
    webframe
3)  flask
    much easer django
4)  twiseted
    online game development
    client server communication including socket servers
5)  BeautifulSoup
    grep/get data from html pages.
6)  selenium
    web automations, hooking web sites.
Data siences
7)  numpy
    matematika
    multi matice
8)  pandas
    pro praci s daty, formaty excel csv atd.
    asi super for me.
9)  matplotlib
    data visualization, grafy a tabulky z dat.
    visualizace machine learningu
10) nltk
    zpracovani textu national language tool kit
11) openCV, video objects recognition, machine learning.
    pro vsechno s obrazkovimi nebo video daty
12) TensorFlow
    machine learning by google
13) Keras,
    easer interface to TensorFlow for biginers.
14  pytorch
    leading modul for machine learing in Python.
15  sikit learn

16  Kivy, okenni framework, dela GUI platformne nezavisle a jednoduche.
    https://kivy.org/#home


17  PyQt5
    the best GUI framework.
18  Tkinter
    GUI easer and oleder then PyQt5
19  Pygame


==============================================================================
File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.7_3.7.2544.0_x64__qbz5n2kfra8p0\lib\encodings\cp1252.py", line 23, in decode
==============================================================================
[INFO   ] [Image       ] Providers: img_tex, img_dds, img_gif (img_sdl2, img_pil, img_ffpyplayer ignored)
[CRITICAL] [Window      ] Unable to find any valuable Window provider. Please enable debug logging (e.g. add -d if running from the command line, or change the log level in the config) and re-run your app to identify potential causes
sdl2 - ImportError: DLL load failed: The specified module could not be found.
  File "C:\Users\micha\kivy_venv\lib\site-packages\kivy\core\__init__.py", line 63, in core_select_lib
    fromlist=[modulename], level=0)
  File "C:\Users\micha\kivy_venv\lib\site-packages\kivy\core\window\window_sdl2.py", line 27, in <module>
    from kivy.core.window._window_sdl2 import _WindowSDL2Storage

[CRITICAL] [App         ] Unable to get a Window, abort.

(kivy_venv) C:\Users\micha>env
'env' is not recognized as an internal or external command,
operable program or batch file.
The issue was caused by Python version
the version for kivy i 3.7, installation does not work with version 3.8 +

==============================================================================
miko kivy install



pip upgrade

python -m pip install --upgrade pip wheel setuptools virtualenv

python -m virtualenv kivy_env
kivy_env\Scripts\activate

python -m pip install docutils pygments pypiwin32 kivy_deps.sdl2==0.1.* kivy_deps.glew==0.1.*
python -m pip install kivy_deps.gstreamer==0.1.*
python -m pip install kivy==1.11.1

test
python kivy_venv\share\kivy-examples\demo\showcase\main.py

==============================================================================
miko kivy

https://www.pythonprogramming.net/introductionkivy-application-python-tutorial/
https://www.pythonprogramming.net/scheduling-clockkivy-application-python-tutorial/

==============================================================================
virtualenv install
home/michal-kocanrdle/ $ virtualenv
Command 'virtualenv' not found, but can be installed with:
sudo apt install python3-virtualenv
/home/michal-kocanrdle/ $ sudo apt install python3-virtualenv
[sudo] password for michal-kocanrdle:
==============================================================================
miko django install
miko virtual env
miko venv
cd


python -m virtualenv django_env
django_env\Scripts\activate

C:\Users\micha>django_env\Scripts\activate

(django_env) C:\Users\micha>pip install django
Collecting django
  Downloading Django-3.1.3-py3-none-any.whl (7.8 MB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 7.8 MB 6.4 MB/s
Collecting pytz
  Downloading pytz-2020.4-py2.py3-none-any.whl (509 kB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 509 kB 6.8 MB/s
Collecting asgiref<4,>=3.2.10
  Downloading asgiref-3.3.0-py3-none-any.whl (19 kB)
Collecting sqlparse>=0.2.2
  Downloading sqlparse-0.4.1-py3-none-any.whl (42 kB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 42 kB 420 kB/s
Installing collected packages: pytz, asgiref, sqlparse, django
Successfully installed asgiref-3.3.0 django-3.1.3 pytz-2020.4 sqlparse-0.4.1

(django_env) C:\Users\micha>python -m django --version
3.1.3

C:\Users\micha\django_env\Scripts>activate

(django_env) C:\Users\micha\django_env\Scripts>piplist
'piplist' is not recognized as an internal or external command,
operable program or batch file.

(django_env) C:\Users\micha\django_env\Scripts>pip list
Package    Version
---------- -------
asgiref    3.3.0
Django     2.0.4
pip        20.2.4
pytz       2020.4
setuptools 50.3.2
sqlparse   0.4.1
wheel      0.35.1
WARNING: You are using pip version 20.2.4; however, version 20.3 is available.
You should consider upgrading via the 'C:\Users\micha\django_env\Scripts\python.exe -m pip install --upgrade pip' command.
(django_env) C:\Users\micha\django_env\Scripts>C:\Users\micha\django_env\Scripts\python.exe -m pip install --upgrade pip
Collecting pip
  Downloading pip-20.3-py2.py3-none-any.whl (1.5 MB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 1.5 MB 1.1 MB/s
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 20.2.4
    Uninstalling pip-20.2.4:
      Successfully uninstalled pip-20.2.4
Successfully installed pip-20.3

(django_env) C:\Users\micha\django_env\Scripts>pip list
Package    Version
---------- -------
asgiref    3.3.0
Django     2.0.4
pip        20.3
pytz       2020.4
setuptools 50.3.2
sqlparse   0.4.1
wheel      0.35.1

(django_env) C:\Users\micha\django_env\Scripts>

(django_env) C:\Users\micha\django_env\Scripts>pip freeze
asgiref==3.3.0
Django==2.0.4
pytz==2020.4
sqlparse==0.4.1

pip freeze output can be used for requrement.txt file.

deactivate
will unset env

how env directory in windows
rmdir project_env /s
==============================================================================
miko venv
miko pip


pip uninstall fastrpc


mkdir my_project
python3  -m venv my_project\venv
my_project\venv\scripts\activate.bat
from stored requirement.txt file resore env using
asgiref==3.3.0
Django==2.0.4
pytz==2020.4
sqlparse==0.4.1

(django_env) C:\Users\micha\django_env\Scripts>pip freeze
pip install -r requirement.txt
==============================================================================
install system with all packages installed in global python installation
https://www.python.org/downloads/windows/

python -m venv venv --system-site-packages



==============================================================================
list of packages only installed in django_env

(django_env) C:\Users\micha\django_env\Scripts>pip list --local
Package         Version
--------------- -------
asgiref         3.3.0
Django          2.0.4
mpmath          1.1.0
numpy           1.19.4
nupy            0.1.1
pandas          1.1.4
pip             20.3
python-dateutil 2.8.1
pytz            2020.4
setuptools      50.3.2
six             1.15.0
SQLAlchemy      1.3.20
sqlparse        0.4.1
sympy           1.7
wheel           0.35.1
==============================================================================

Path=C:\Program Files\Common Files\Siemens\Automation\Simatic OAM\bin
;C:\Program Files (x86)\VMware\VMware Player\bin\
;C:\Windows\system32
;C:\Windows
;C:\Windows\System32\Wbem
;C:\Windows\System32\WindowsPowerShell\v1.0\
;C:\Windows\System32\OpenSSH\
        ;C:\Program Files\dotnet\
        ;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\
        ;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\
        ;C:\Program Files\Git\cmd
        ;C:\Program Files\Docker\Docker\resources\bin
        ;C:\ProgramData\DockerDesktop\version-bin
        ;C:\Users\micha\AppData\Local\Programs\Python\Python37\Scripts\
                ;C:\Users\micha\AppData\Local\Programs\Python\Python37\
                ;C:\Users\micha\AppData\Local\Microsoft\WindowsApps
                ;C:\Program Files\JetBrains\PyCharm 2020.2.2.1\bin
                ;;C:\Program Files\JetBrains\CLion 2020.2.4\bin
                ;;C:\Users\micha\.dotnet\tools
                ;C:\Users\micha\AppData\Local\GitHubDesktop\bin
                ;C:\Program Files\JetBrains\PyCharm Community Edition 203.5600.33\bin;


==============================================================================
D:\Python\mysite

py -m virtualenv mysite
mysite\Scripts\activate


D:\Python\mysite> py manage.py runserver


mkvirtualenv


--python=C:\Users\micha\AppData\Local\Programs\Python\Python38-32\Scripts mysite-virtualenv




C:\Users\micha>django_env\Scripts\activate

(django_env) C:\Users\micha>pip install django



==============================================================================
pip install pandas
C:\Users\micha>pip install pandas
Collecting pandas
  Downloading pandas-1.1.4-cp37-cp37m-win_amd64.whl (8.7 MB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 8.7 MB 47 kB/s
Collecting python-dateutil>=2.7.3
  Downloading python_dateutil-2.8.1-py2.py3-none-any.whl (227 kB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 227 kB 6.8 MB/s
Collecting pytz>=2017.2
  Using cached pytz-2020.4-py2.py3-none-any.whl (509 kB)
Collecting numpy>=1.15.4
  Downloading numpy-1.19.4-cp37-cp37m-win_amd64.whl (12.9 MB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 12.9 MB 6.8 MB/s
Requirement already satisfied: six>=1.5 in c:\users\micha\appdata\local\programs\python\python37\lib\site-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)
Installing collected packages: python-dateutil, pytz, numpy, pandas
Successfully installed numpy-1.19.4 pandas-1.1.4 python-dateutil-2.8.1 pytz-2020.4

C:\Users\micha>



==============================================================================
Doporucene projekty

1) login page and user managerment
2) card game
3) python-excel
4)
5) piskvorky    https://www.youtube.com/watch?v=GTWrWM1UsnA
==============================================================================



C:\Users\micha\mysite\Scripts\python.exe C:/Users/micha/mysite/moviebook/views.py
Traceback (most recent call last):
  File "C:/Users/micha/mysite/moviebook/views.py", line 24, in <module>
    from moviebook.models import Zanr, Film, Uzivatel, Clen
  File "C:\Users\micha\mysite\moviebook\models.py", line 23, in <module>
    from django.contrib.auth.models import AbstractBaseUser, BaseUserManager
  File "C:\Users\micha\mysite\lib\site-packages\django\contrib\auth\models.py", line 2, in <module>
    from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
  File "C:\Users\micha\mysite\lib\site-packages\django\contrib\auth\base_user.py", line 48, in <module>
    class AbstractBaseUser(models.Model):
  File "C:\Users\micha\mysite\lib\site-packages\django\db\models\base.py", line 108, in __new__
    app_config = apps.get_containing_app_config(module)
  File "C:\Users\micha\mysite\lib\site-packages\django\apps\registry.py", line 253, in get_containing_app_config
    self.check_apps_ready()
  File "C:\Users\micha\mysite\lib\site-packages\django\apps\registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "C:\Users\micha\mysite\lib\site-packages\django\conf\__init__.py", line 83, in __getattr__
    self._setup(name)
  File "C:\Users\micha\mysite\lib\site-packages\django\conf\__init__.py", line 68, in _setup
    % (desc, ENVIRONMENT_VARIABLE))
django.core.exceptions.ImproperlyConfigured:
    Requested setting INSTALLED_APPS, but settings are not configured.
    You must either define the environment variable DJANGO_SETTINGS_MODULE
    or call settings.configure() before accessing settings.

Process finished with exit code 1

==============================================================================
C:\Users\micha\mysite\Scripts\python.exe C:/Users/micha/mysite/manage.py

Type 'manage.py help <subcommand>' for help on a specific subcommand.

Available subcommands:

[auth]
    changepassword
    createsuperuser

[contenttypes]
    remove_stale_contenttypes

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

[sessions]
    clearsessions

[staticfiles]
    collectstatic
    findstatic
    runserver

Process finished with exit code 0
==============================================================================
miko zalozeni projektu
miko start project
miko start app
miko startproject

postup vytvoreni Django projektu
1) vytvoreni hlavniho projektu !!!(-m django)
    py -m django startproject uhli
2) vytvoreni podprojektu calculator
    prepnout do uhli C:\Users\micha\PycharmProjects\uhli\
    C:\Users\micha\PycharmProjects\uhli>py manage.py startapp calculator
3) pridat projekt clclulator do settings.py
 C:\Users\micha\PycharmProjects\uhli\uhli
 INSTALLED_APPS = [
    'calculator',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
4) Routy projektu C:\Users\micha\PycharmProjects\uhli\uhli
    urls.py
==============================================================================
python -m virtualenv Django-Website-master
Django-Website-master\Scripts\activate
C:\Users\micha>django_env\Scripts\activate
Scripts\activate
(django_env) C:\Users\micha>pip install django

==============================================================================
copy jpg file
miko copy
miko jpg


import os
import io

chunk_size=2024

with open('blbec.jpg', 'rb') as sf:
    act_chunk = sf.read(chunk_size)
    with open('druhej_blbec', 'wb') as df:
        while len(act_chunk) > 0:
            df.write(act_chunk)
            act_chunk = sf.read(chunk_size)

        sf.close()
        df.close()
==============================================================================
import os
['DirEntry', 'F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXCL', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL',
        'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', 'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'PathLike',
        'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_AddedDllDirectory', '_Environ',
        '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_check_methods', '_execvpe',
        '_exists', '_exit', '_fspath', '_get_exports_list', '_putenv', '_unsetenv', '_wrap_close', 'abc', 'abort', 'access', 'add_dll_directory', 'altsep',
        'chdir', 'chmod', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'error', 'execl',
        'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fdopen', 'fsdecode', 'fsencode', 'fspath', 'fstat', 'fsync', 'ftruncate',
        'get_exec_path', 'get_handle_inheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getenv', 'getlogin', 'getpid', 'getppid', 'isatty',
        'kill', 'linesep', 'link', 'listdir', 'lseek', 'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep', 'pipe', 'popen', 'putenv', 'read',
        'readlink', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 'set_handle_inheritable', 'set_inheritable', 'spawnl', 'spawnle',
        'spawnv', 'spawnve', 'st', 'startfile', 'stat', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids',
        'supports_fd', 'supports_follow_symlinks', 'symlink', 'sys', 'system', 'terminal_size', 'times', 'times_result', 'truncate', 'umask', 'uname_result', 'unlink', 'urandom',
        'utime', 'waitpid', 'walk', 'write']

==============================================================================
--select * from Pohyby_20201106 where Protiúcet='51-1683520287';

--select jmeno, prijmeni, celkem,
--select count(*) from
--(
select pohyby.datum_transakce, clen.jmeno, clen.prijmeni,clen.narozen, clen.ucet_protiucet, Pohyby.objem, strftime('%Y', Pohyby.Datum) from moviebook_clen clen, Pohyby_20201106 Pohyby where
(clen.ucet_protiucet=Pohyby.Protiúcet or clen.ucet_protiucet2=Pohyby.Protiúcet)
and strftime('%Y', Pohyby.Datum)='2020'
and not Clen.narozen = 'None'
and Clen.narozen > 2002
and objem > 0
order by prijmeni, jmeno;
--);

--and clen.prijmeni like '%Heinz%';

--and strftime('%Y', Pohyby.Datum)='2019'.

--ucet_protiucet = '51-1683520287' or ucet_protiucet2= '51-1683520287';


--select * from moviebook_clen clen, Pohyby_20201106 ucet where clen.ucet_protiucet = "Pohyby_20201106.Protiúcet"
-- or clen.ucet_protiucet2 = "Pohyby_20201106.Protiúcet")
 -- and  Objem > 0 and strftime('%Y', Datum)='2020'

 ==============================================================================

import pandas as pd

excel_file = 'M_Index.xlsx'
df = pd.read_excel(excel_file)
print(df)

df1 = df.set_index(['Stock','Month'])
print(df1)

print(df1.loc["WM"])
print(df1.loc[("MSFT","Jan")])

print(df1.loc[pd.IndexSlice[:,"Jan"],:]) #display only data for Jan

==============================================================================
import pandas as pd

excel_file_path = 'office_info.xlsx'
df = pd.read_excel(excel_file_path)

print(df.head(2))


for column in df.columns:
    df[column] = df[column].str.replace(r'\W',"")

df.to_excel("removed_characters.xlsx")
==============================================================================
miko find
propusteni=[]
prezivsi=[]
found=0
for line in data_init:
	found = 0
	for new_line in data:
		if line[3]  == new_line[3]:
			found=1
			break
	if found:
		prezivsi.append(line)
	else:
		propusteni.append(line)


==============================================================================
miko jupyter
https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html
http://localhost:8888/lab

miko jupyter start

(venv) C:\Users\micha\Projects\uhli>cd ..

(venv) C:\Users\micha\Projects>jupyter lab
[I 09:30:22.751 LabApp] JupyterLab extension loaded from c:\users\micha\projects\uhli\venv\lib\site-packages\jupyterlab
[I 09:30:22.752 LabApp] JupyterLab application directory is c:\users\micha\projects\uhli\venv\share\jupyter\lab
[I 09:30:22.759 LabApp] Serving notebooks from local directory: C:\Users\micha\Projects
[I 09:30:22.759 LabApp] Jupyter Notebook 6.1.5 is running at:
[I 09:30:22.760 LabApp] http://localhost:8888/?token=238c5f246d918553671661ca30915ca5d1c123f2024b2691
[I 09:30:22.761 LabApp]  or http://127.0.0.1:8888/?token=238c5f246d918553671661ca30915ca5d1c123f2024b2691
[I 09:30:22.762 LabApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 09:30:22.850 LabApp]

    To access the notebook, open this file in a browser:
        file:///C:/Users/micha/AppData/Roaming/jupyter/runtime/nbserver-9768-open.html


==============================================================================
# YouTube Link:

# Ensure that you have both beautifulsoup and requests installed:
#   pip install beautifulsoup4
#   pip install requests

import requests
from bs4 import BeautifulSoup
#import numpy as np
import pandas as pd
import xlsxwriter


# Using the requests module, we use the "get" function
# provided to access the webpage provided as an
# argument to this function:

#result = requests.get("https://www.praha5.cz/telefonni-seznam/")
#wget "https://www.praha5.cz/telefonni-seznam" -outfile "C:\HTTP_IMAGES\SAVE\$(get-date -f yyyy-MM-dd)_seznam.htm3

data = requests.get('https://www.praha5.cz/telefonni-seznam/')
file = open("C:/Users/micha/PycharmProjects/2020-05-18_seznam.html", encoding="utf8")

# load data into bs4
# print (data_init.text)
# soup_init = BeautifulSoup(data_init.text, 'html.parser')
soup = BeautifulSoup(data.text, 'html.parser')
soup_init = BeautifulSoup(file, "html.parser")



# get data simply by looking for each tr
# data = []
# for tr in soup.find_all('tr'):
# 	values = [td.text for td in tr.find_all('td')]
# 	data.append(values)

# get data only where rows are marked as special
data_init = []
for tr in soup_init.find_all('tr', { 'class': 'empl-row' }):
	values = [td.text for td in tr.find_all('td')]
	data_init.append(values)


data = []
for tr in soup.find_all('tr', { 'class': 'empl-row' }):
	values = [td.text for td in tr.find_all('td')]
	data.append(values)


propusteni=[]
prezivsi=[]
found=0
for line in data_init:
	found = 0
	for new_line in data:
		if line[3]  == new_line[3]:
			found=1
			break
	if found:
		prezivsi.append(line)
	else:
		propusteni.append(line)

#print(prezivsi)
#
workbook = xlsxwriter.Workbook('prezivsi.xlsx')
worksheet = workbook.add_worksheet()

for row_num, row in enumerate(prezivsi):
	for col_num, col in enumerate(row):
		print(f'row = {row_num}, col = {col_num}, val = {col}')
		worksheet.write(row_num, col_num, str(col))
			# write_column(row_num, col_num, str(col))
workbook.close()

workbook = xlsxwriter.Workbook('propusteni.xlsx')
worksheet = workbook.add_worksheet()

for row_num, row in enumerate(propusteni):
	for col_num, col in enumerate(row):
		print(f'row = {row_num}, col = {col_num}, val = {col}')
		worksheet.write(row_num, col_num, str(col))
			# write_column(row_num, col_num, str(col))
workbook.close()

==============================================================================
youtube stats application on python/django

<<<<<<< Updated upstream
=======
==============================================================================
C:\Users\micha\AppData\Local\Programs\Python\Python38-32\python.exe

==============================================================================

Cntrl + S nebo uložit jako
"C: \ Users [uživatelské jméno] \ AppData \ Roaming \ Sublime Text 3 \ Packages \ User \ SublimeREPL-python.sublime-build"
podle potreby aktualizovat uživatelské jméno nebo cestu.
To by melo být všude tam, kde vaše nastavení a sestavení ukládá Sublime Text.

==============================================================================

anacondaST3: ERROR - <Anaconda.anaconda_lib.workers.local_process.LocalProcess object at 0x0000021BFF3A83C8> process can not start a new anaconda JsonServer
in the operating system because:

Anaconda can not spawn a new process with your current configured python interpreter (/ usr / local / bin / python3)

Make sure your interpreter is a valid binary and is in your PATH or use an absolute path to it, for example:
    C:\\Python27\\python.exe
ERROR:root:Your operating system denied the spawn of
/ usr / local / bin / python3 process.
Make sure your configured interpreter is a valid python binary executable and is in the PATH
The OS did return [WinError 2] The system cannot find the file specified
==============================================================================


"C:\Program Files\JetBrains\PyCharm 2020.2.2.1\bin\runnerw64.exe"
C:\Users\micha\AppData\Local\Programs\Python\Python38-32\python.exe C:/Users/micha/Projects/uhli/manage.py runserver 8000

Performing system checks...

System check identified no issues (0 silenced).
November 18, 2020 - 23:47:51
Django version 2.0.4, using settings 'uhli.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.
==============================================================================
C:\Users\micha\PycharmProjects\uhli>python -m virtualenv uhli_env
created virtual environment CPython3.7.9.final.0-64 in 1945ms
  creator CPython3Windows(dest=C:\Users\micha\PycharmProjects\uhli\uhli_env, clear=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\Users\micha\AppData\Local\pypa\virtualenv)
    added seed packages: pip==20.2.4, setuptools==50.3.2, wheel==0.35.1
  activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator

C:\Users\micha\PycharmProjects\uhli>
==============================================================================
Was able to run uhli from


PS C:\Users\micha\PycharmProjects\uhli>
C:\Users\micha\AppData\Local\Programs\Python\Python38-32\python.exe C:/Users/micha/PycharmProjects/uhli/manage.py runserver
==============================================================================
miko sublime
user build env configuration
C:\Users\micha\AppData\Roaming\Sublime Text 3\Packages\User


==============================================================================
http://testovanisoftwaru.cz/automatizovane-testovani/


==============================================================================
it tutorials good
https://www.kutac.cz/pocitace-a-internety/jakna-git-dil-4

https://www.atlassian.com/git/tutorials/saving-changes/git-stash#re-applying-your-stashed-changes



==============================================================================


 git clone https://github.com/nicolaigram/docker_python_flask.git
micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects
$ python -m virtualenv docker_python_flask
created virtual environment CPython3.7.9.final.0-64 in 812ms
  creator CPython3Windows(dest=C:\Users\micha\Projects\docker_python_flask, clear=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\Users\micha\AppData\Local\pypa\virtualenv)
    added seed packages: pip==20.2.4, setuptools==50.3.2, wheel==0.35.1
  activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator


micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects
$ source  docker_python_flask/Scripts/activate
(docker_python_flask)


micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects





$ cat index.py
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
        return 'Hello, Wourld !!'

# app.run(host='0.0.0.0', port=5000)
app.run()(simple_docker)




$ python index.py
 * Serving Flask app "index" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)


install docker on window
https://www.docker.com/get-started

install reqiuired component for WLS2 ???


micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects
$ pip install docker
Collecting docker
  Downloading docker-4.3.1-py2.py3-none-any.whl (145 kB)
Collecting websocket-client>=0.32.0
  Downloading websocket_client-0.57.0-py2.py3-none-any.whl (200 kB)
Collecting requests!=2.18.0,>=2.14.2
  Using cached requests-2.25.0-py2.py3-none-any.whl (61 kB)
Collecting pywin32==227; sys_platform == "win32"
  Downloading pywin32-227-cp37-cp37m-win_amd64.whl (9.1 MB)
Collecting six>=1.4.0
  Using cached six-1.15.0-py2.py3-none-any.whl (10 kB)
Collecting certifi>=2017.4.17
  Using cached certifi-2020.11.8-py2.py3-none-any.whl (155 kB)
Collecting idna<3,>=2.5
  Using cached idna-2.10-py2.py3-none-any.whl (58 kB)
Collecting chardet<4,>=3.0.2
  Using cached chardet-3.0.4-py2.py3-none-any.whl (133 kB)
Collecting urllib3<1.27,>=1.21.1
  Using cached urllib3-1.26.2-py2.py3-none-any.whl (136 kB)
Installing collected packages: six, websocket-client, certifi, idna, chardet, urllib3, requests, pywin32, docker
Successfully installed certifi-2020.11.8 chardet-3.0.4 docker-4.3.1 idna-2.10 pywin32-227 requests-2.25.0 six-1.15.0 urllib3-1.26.2 websocket-client-0.57.0


WSL 2 installation is incompleted.
The wsl 2 Linux kernel is now installed using a separate MSI update package.
Please click th link and follow the instaruction to install the kernel update:
    https://docs.microsoft.com/cs-cz/windows/wsl/wsl2kernel
resolved with

https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi

docker demo installatino
C:\Users\micha\getting-started
image downloaded from github
docker build -t docker101tutorial

docker run -d -p 80:80 \
        --name docker-tutorial docker101tutorial


docker tag docker101tutorial miko73/docker101tutorial
docker push miko73/docker101tutorial


$ export FLASK_APP=index.py
(docker_python_flask)
micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects/docker_python_flask (main)
$ export FLASK_ENV=development
(docker_python_flask)
micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects/docker_python_flask (main)
$ flask run
 * Serving Flask app "index.py" (lazy loading)
 * Environment: development
 * Debug mode: on
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 286-398-545
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)


in /c/Users/micha/Projects/docker_python_flask
docker build  -t dockerpython .
#2 [internal] load build definition from Dockerfile
#2 transferring dockerfile: 305B 0.1s done
#2 DONE 0.2s
..................
..................
#10 naming to docker.io/library/dockerpython 0.0s done
#10 DONE 0.8s




dockers with nginx

https://www.youtube.com/watch?v=dVEjSmKFUVI
==============================================================================
https://kubernetes.io/blog/2019/07/23/get-started-withkubernetes-using-python/

==============================================================================

https://www.youtube.com/watch?v=KvNhmCmxP08&list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi&index=37&pbjreload=101

miko django widgets
https://www.youtube.com/watch?v=6-XXvUENY_8
==============================================================================
https://www.itnetwork.cz/python/django/databaze-filmu-v-django-uzivatelske-ucty



miko django for study

in google "django forms database"
https://www.google.com/search?newwindow=1&safe=active&sxsrf=ALeKk00OV5hhqvsTdxdBiEQX5Q7ThmiJ1g%3A1607029197432&ei=zVHJX8DKGYfEUpyuiNAM&q=django+forms+database&oq=django+forms+datab&gs_lcp=CgZwc3ktYWIQAxgAMgYIABAWEB4yBggAEBYQHjIGCAAQFhAeMgYIABAWEB4yBggAEBYQHjoECCMQJzoGCCMQJxATOggIABCxAxCDAToFCAAQsQM6BwgAELEDEEM6BQguELEDOgIILjoCCAA6BQgAEMsBOgUILhCTAjoECAAQClDUEFjAZ2CBhAFoAHABeACAAWmIAbUKkgEEMTcuMZgBAKABAaoBB2d3cy13aXrAAQE&sclient=psy-ab



==============================================================================


C:\installation\WEB_DES\bootstrap-4.0.0\bootstrap-4.0.0

==============================================================================
django dynamic filtering.
https://www.youtube.com/results?search_query=build+a+dynamic+filtering+form+with+django+%2F%2F+1


==============================================================================
API in Django
https://www.youtube.com/watch?v=RPsDhoWY_kc
==============================================================================
how to generate test data in project
in https://github.com/justdjango/djfilter.git
$ git checkout 9513363ae33c80d8181c08ad11cb1056cac1bd55 -f
Previous HEAD position was 486710c Made bootstrap form
HEAD is now at 9513363 Created command for importing dummy data
(env)

C:\Users\micha\Projects\djfilter\src\core\management\commands\create_data.py

running individual program in command line

python manage.py create_data titles

C:\Users\micha\Projects\djfilter\src>python manage.py create_data titles
Data imported successfully

==============================================================================
google in python
https://www.youtube.com/watch?v=NG48CLLsb1A


django-allauth

==============================================================================
HTML Seznam tagu
https://www.itnetwork.cz/html-css/html5/html-manual/html-5-abecedni-rejstriktagu

==============================================================================
miko todo project


cd C:\Users\micha\Projects
micha@DESKTOP-O9QT0O1 MINGW64 ~/Projects
$ git clone https://github.com/joblackpoc/todo.git

start commnad here
in
cd C:\Users\micha\Projects\todo
virtualenv env

$ pip install django



(env) C:\Users\micha\Projects\todo>
$ pip install django-crispy-forms

Collecting django-crispy-forms
  Downloading django_crispy_forms-1.10.0-py3-none-any.whl (107 kB)
     |¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦| 107 kB 1.6 MB/s
Installing collected packages: django-crispy-forms
Successfully installed django-crispy-forms-1.10.0


py manage.py makemigrations
py manage.py migrate



(env) C:\Users\micha\Projects\todo> python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...
==============================================================================
miko html
https://www.jakpsatweb.cz/html/

https://www.w3schools.com/tags/ref_attributes.asp

==============================================================================
miko elastic search.

https://www.elastic.co/site-search/service?ultron=NB-Trials-SSS-EMEA-C-SearchBox-Exact&gambit=SearchBar-Website&blade=adwords-s&hulk=cpc&Device=c&thor=html%20search%20bar&gclid=Cj0KCQiA2uH-BRCCARIsAEeef3m3cuEXm_3y9tTjW1FwNL_bfbgEi-ushoXz1EeLIijmdZuT706K7EQaAuUoEALw_wcB




==============================================================================
page grid layout
https://www.itnetwork.cz/html-css/bootstrap/kurz/bootstrap-uvod-do-grid-systemu

<div class="container-fluid bg-light">
    <div class="row">
        <div class="col-3 border bg-success text-white">
            Ctvrtina
        </div>
        <div class="col-3 border bg-success text-white">
            Ctvrtina
        </div>
        <div class="col-6 border bg-warning">
            Polovina
        </div>
    </div>
</div>



==============================================================================
n = int(input())
arr = list(map(int, input().split()))
count = 0

i = 0
while i < len(arr):
    if arr[i] != i + 1:
        arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]
        count += 1
    else:
        i += 1

print(count)

==============================================================================
array swap element

def sort_it(arr):
	i=0
	count=0
	while i < len(arr):
		if arr[i] != i+1:
			# print (f'arr[i] - 1 {arr[i] - 1} - arr[i] {arr[i]}')
			arr[ arr[i] - 1 ] , arr[i] = arr[i], arr[ arr[i] - 1 ]
			count += 1
		else:
			i += 1
		# print ("{0} {1}".format(i, arr[i]))
		print (arr)
	return count


arr = [7, 1, 3, 2, 4, 5, 6]
print ("num of swaps - ",sort_it(arr))
==============================================================================
miko parse strings
miko split
miko Counter

from collections import Counter

def go_through(magazine, note) :
	print (f'word {Counter(note.split())}')
	print (f'word {Counter(magazine.split())}')
	if Counter(note.split()) - Counter(magazine.split()) == {}:
		return 'Yes'
	else:
		print (Counter(note.split()) - Counter(magazine.split()))
		return 'No'





magazine = "give me one grand today night"
note = "give one grand today kokot"
print (go_through(magazine, note))

==============================================================================
miko set

from collections import Counter


def shard_str(s1, s2):
	print (Counter(s1))
	print (Counter(s2))
	print (Counter(s2) & Counter(s1))
	print (Counter(""))
	print (set(s1))
	print (set(s2))
	print (set(s1) & set(s2))
	print (set())
	if (set(s1) & set(s2)) != set():
		return 'Yes'
	else:
		return 'No'

s1="Hello"
s2="Wrold"
print(shard_str(s1, s2))
==============================================================================
swap two elements in query


def sort_it(arr):
	i=0
	count=0
	while i < len(arr):
		if arr[i] != i+1:
			# print (f'arr[i] - 1 {arr[i] - 1} - arr[i] {arr[i]}')
                        #move element to the posision where the value is equal to index
                        arr[ arr[i] - 1 ] , arr[i] = arr[i], arr[ arr[i] - 1 ]
			count += 1
		else:
			i += 1
		# print ("{0} {1}".format(i, arr[i]))
		print (arr)
	return count


arr = [7, 1, 3, 2, 4, 5, 6]
print ("num of swaps - ",sort_it(arr))
==============================================================================

==============================================================================
def max_subset_sum(arr):
	dp = list()
	dp.append(arr[0])
	dp.append(max(arr[:2]))
	# print (arr[:2])
	print(dp)
	ans = dp[-1] # max(arr[:2])
	for i in arr[2:]:
		dp.append(max(i, dp[-2] + i, ans))
		ans = max(ans, dp[-1])
		print(dp)
	return ans


# n = int(input())
# arr = list(map(int, input().split()))
n =5
arr=[-2, 1, 3, -4, 5]
==============================================================================
print(max_subset_sum(arr))
[-2, 1]
[-2, 1, 3]
[-2, 1, 3, 3]
[-2, 1, 3, 3, 8]
8
[Finished in 0.5s]
==============================================================================
Introduction:
Data Structure is a collection of data types and set of rules with a format of organizing, managing and storage which can be used for efficient accessing and modification. Data structures are used in every field for storing and organizing data in the computer.

This Python Data Structure cheat sheet will help you understand what Data Structure is and the basic concepts and commands you must know to get started with it.
Certain operations can be performed on a string:

We can use * to repeat the string for a specific number of times
Example: x*2

String can be sliced, that is to select parts of the string
Example: Coke

z1 = x[2:]
print(z1)
# Slicing
z2 = y[0] + y[1]
print(z2)


Output: ke
Co

To capitalize the strings

Example:

    str.capitalize('cookie')


To retrieve the length of the strings
Example:

    str1 = "Cake 4 U"
    str2 = "404"
    len(str1)

miko To replace parts of a string with another string
Example:

    str1.replace('4 U', str2)
    str1.replace('\n', '<br>')

Boolean: It is a built-in data type that can take the values TRUE or FALSE
Non- Primitive Data Structures:

miko Array:
    It is a compact way of collecting data types where all entries must be of the same data type.

Syntax of writing an array in python:
    import array as arr
    a = arr.array("I",[3,6,9])
    type(a)

miko Linked list:
    List in Python is used to store collection of heterogeneous items. It is described using the square brackets [] and hold elements separated by comma

Example:
    x = [] # Empty list
    type(x)

The list can be classified into linear and non-linear data structures
Linear data structures contain Stacks and queues
Non-linear data structures contain Graphs and Trees

==========================
miko Stack: It is a container of objects that can be inserted or removed according to LIFO (Last in First Out) pop() method is used during disposal in Python
Example:

    stack.pop() # Bottom -> 1 -> 2 -> 3 -> 4 -> 5 (Top)
    stack.pop() # Bottom -> 1 -> 2 -> 3 -> 4 (Top)
    print(stack)



Queue:
    It is a container of objects that can be inserted or removed according to FIFO (First in First Out)

Graph:
    It is a data structure that consists of a finite set of vertices called nodes,
    and a finite set of ordered pair (u,v) called edges. It can be classified as direction and weight

Binary Tree:
    Tree is a hierarchical data structure. Here each node has at most two children

Binary Search Tree:
    It provides moderate access/ search and moderate insertion/ deletion

Heap:
    It is a complete tree and is suitable to be stored in an array, it is either MIN or Max

Hashing:
    Collection of items that are stored in a way that it becomes easy to find them is hashing

==============================================================================

miko Lists and tuples (In Python):
miko tuples

Ordered sequence of values indexed by integer numbers. Tuples are immutable


miko To initialize empty list /tuple:
Syntax:
    Lists: myList = []

Tuples: myTuple = ()
To specify size of tuple/list:
Syntax:

 len(myListorTuple)

miko To get an element in position x in list/tuple:
Syntax:

 "x" in myListOrTuple
Index of element ‘X’ of list/tuple
Syntax:

myListOrTuple.index("x") -- If not found, throws a ValueError exception
Number of occurrences of X in list/tuple:
Syntax:

myListOrTuple.count("x")
Update an item of List/tuple:
Syntax:

Lists: myList[x] = "x"

Tuples: tuples are immutable!
Remove element in position X of list/tuple:
Syntax:

Lists: del myList[x]

Tuples: tuples are immutable!
Concatenate two lists/tuples:
Lists: myList1 + myList2

Tuples: myTuple1 + myTuple2
Concatenating a List and a Tuple will produce a TypeError exception
Insert element in position x of a list/tuple
Syntax:

Lists: myList.insert(x, "value")

Tuples: tuples are immutable!
Append "x" to a list/tuple:
Syntax: Lists:
        myList.append("x")

Tuples: tuples are immutable!
Convert a list/tuple to tuple/list:
Syntax: List to Tuple:
        tuple(myList)

Tuple to List: list(myTuple)
==============================================================================
miko Sets:
It is an unordered collection with no duplicate elements. It supports mathematical operations like union, intersection, difference and symmetric difference.

To initialize an empty set:
    Syntax: mySet = set()

Initialize a non-empty set
    Syntax: mySet = set(element1, element2...)

To add element X to the set
    Syntax: mySet.add("x")

Remove element "x" from a set:
    Syntax:
        Method 1: mySet.remove("x") -- If "x" is not present, raises a KeyErorr
        Method 2: mySet.discard("x") -- Removes the element, if present
Remove every element from the set
Syntax: mySet.clear()

Check if "x" is in the set
Syntax: "x" in mySet

Union of two sets
Syntax:
Method 1: mySet1.union(mySet2)
Method 2: mySet1 | mySet2
Intersection of two sets

Syntax:

Method 1: mySet1.intersect(mySet2)
Method 2: mySet1 & mySet2
Difference of two sets
Syntax:

Method 1: mySet1.difference(mySet2)
Method 2: mySet1 - mySet2
Symmetric difference of two sets
Syntax:

Method 1: mySet1.symmetric_difference(mySet2)
Method 2: mySet1 ^ mySet2
Size of the sets:
Syntax:

len(mySet)




==============================================================================
miko array rotate
array reverse



def reverseArray(arr):
    result = arr[::-1]
    return result

arr = [9,7,8,6,5,4,3,2,1]

print(reverseArray(arr))


==============================================================================
OAuth2.0-Implementation
This repo contains source code for implementing OAuth2.0 flow to an restaurant web application. It uses Google+ as third party authentication service.

About
No description, website, or topics provided.
Resources
 Readme
Releases
No releases published
Packages
No packages published
Languages
Python
59.9%

HTML
34.9%

CSS
4.6%

Shell
0.6%

https://github.com/Yuehaaaan/OAuth2.0-Implementation
==============================================================================
https://leetcode.com/discuss/interview-question/834142/pure-storage-interview-test-2020
==============================================================================

@@ -1,10 +1,10 @@
# pure-storage-interview
==============================================================================

Draw a circle
O(1) set
Reverse file
skiplist
Collatz Conjecture
number of squares
virtual function
call api

Memory copy and memory move
1 Draw a circle
2 O(1) set
3 Reverse file
4 Skiplist
5 Collatz Conjecture
6 Number of squares
7 Virtual function
8 Call api
9 Memory copy and memory move
==============================================================================

==============================================================================

miko https://www.w3schools.com/python/numpy_intro.asp
==============================================================================
https://www.martinkysel.com/hackerrank-solutions/
==============================================================================
from collections import Counter
from collections import defaultdict



def get_points (poss):
	win_points = [10, 6, 4, 3, 2, 1, 0]
	if poss > 6:
		return 0
	else:
		return win_points[poss - 1]

def race_res(arr, *lossers):
 	arr = sorted(arr)
 	racer=[]# racer_id, racer_points
 	racers = defaultdict(lambda: 0) #list of racer

 	for ar in arr:
 		racers[ar[1]] += get_points (ar[2])
 	winner=''
 	points=0
 	lossers=[]
 	for racer in racers:
 		if racers[racer] > points:
 			winner = racer
 		if racers[racer] == 0:
 			lossers.append(racer)

 	return f'{winner} {racers[winner]} \n{lossers}'


arr=[
(2001, 1001, 3),
(2001, 1002, 2),
(2002, 1003, 1),
(2002, 1001, 2),
(2002, 1002, 3),
(2002, 1004, 4),
(2002, 1010, 5),
(2002, 1006, 6),
(2002, 1007, 7),
(2002, 1008, 8),
(2002, 1009, 9),
(2002, 1005, 10),
(2001, 1003, 1)
]
print (race_res(arr))
==============================================================================

import math

def get_num(a, b):
	res = 0
	for x in range (a, b+1):
		if int(math.sqrt(x)) * int(math.sqrt(x)) == x:
			res += 1
			print (x, math.sqrt(x))
	return res

a=3
b=100
print("Num of sq_nums is ", get_num(a, b))

==============================================================================
rashbery in python.

https://github.com/binaryshrey/Fb-Developer-Circle-Hackathon.git


==============================================================================
https://www.w3schools.com/python/numpy_intro.asp
==============================================================================

class Person:
	name = None
	age = None

	# Konstruktor
	def __init__(self, name, age):
		self.name = name
		self.age = age


	def __str__(self):
		return "Jméno {0} vek {1} ".format(self.name, self.age)

	def putdata():
		pass


class Professor(Person):
	publication = None
	def __init__(self, name, age, publication):
		super(Professor, self).__init__(name, age)

		self.publication = publication

	def __str__(self):
		return "Name {0} age {1} publication {2} ".format(self.name, self.age, self.publication)


class Student(Person):
	marks = []
	def __init__(self, name, age, marks ):
		super(Student, self).__init__(name, age)
		self.marks=marks.split()		# for mark in marks:
			# self.marks.append(mark)

	def __str__(self):
		return "Name {0} age {1} marks {2} diameter {3}".format(self.name, self.age, self.marks, self.getdiameter())

	def getdiameter(self):
		sum = 0
		num = 0
		for m in self.marks:
			sum += int(m)
			num += 1
		return sum/num



karel = Professor("Karel Novy", 45, 22)
print(karel)

jarda = Student("Jarda Komestik", 12, "3 4 5 2 5")
print(jarda)
==============================================================================
miko sta static

@staticmethod
def zvaliduj_heslo(heslo):
    if len(heslo) >= Uzivatel.minimalni_delka_hesla:
        return True
    else:
        return False

==============================================================================
miko datetime
https://www.itnetwork.cz/python/oop/knihovna-datetime-pro-python


import time
#!/usr/bin/env python3

import time
print(time.time())


import time

startTime = time.time()
while (time.time()-startTime) <= 3:
    # vlastní kód, který bude probíhat 3 vteriny

import time
print(time.localtime())

#!/usr/bin/env python3

import time

local = time.localtime()
print("Datum a cas: {} ".format(time.asctime(local)))

#!/usr/bin/env python3

import time

print("Start")
time.sleep(3) #program se na 3 vteriny zastaví ("uspí")
print("Konec")

#!/usr/bin/env python3

import calendar

#Seznam dnu v týdnu s indexy
dny_v_tydnu={0:"pondelí", 1:"úterý", 2:"streda", 3:"ctvrtek", 4:"pátek", 5:"sobota", 6:"nedele"}

den5 = calendar.weekday(2019, 11, 5)
print("5. listopadu bylo " + dny_v_tydnu[den5])


#!/usr/bin/env python3

import calendar

leap1 = calendar.isleap(2019)
print("2019 prestupný? {}".format(leap1))

leap2 = calendar.isleap(2020)
print("2020 prestupný? {}".format(leap2))


import datetime

# datetime.datetime(rok, mesíc, den, hodina, minuta, sekunda, mikrosekunda)
d1 = datetime.datetime(2019, 11, 24)
print(d1)


from datetime import datetime

d1 = datetime(2019,11,24)
print(d1)
==============================================================================
    def adapt_date(val):
        return val.isoformat()
    def adapt_datetime(val):
        return val.isoformat(" ")
    def convert_date(val):
        return datetime.date(*map(int, val.split(b"-"))) …
    def convert_timestamp(val):
        datepart, timepart = val.split(b" ")
        year, month, day = map(int, datepart.split(b"-"))
        timepart_full = timepart.split(b".")
        hours, minutes, seconds = map(int, timepart_full[0].split(b":"))



==============================================================================
class Point:

    def __new__(cls, x, y):
        self = super().__new__(cls)
        self.x = x
        self.y = y
        return self


point = Point(10, 5)
print(point.x, point.y)
==============================================================================

miko math
https://www.itnetwork.cz/python/oop/magicke-metody-pythonu-matematicke

==============================================================================

in google "python plc programming"

PLC sbernice v pythonu

https://www.youtube.com/watch?v=EMkWRlbpJsk

python libraries for PLC
pymodbus
Ethernet/IP, Ethernet + TCP/IP, pycomm
s7 siemens, Ethernet + TCP/IP, python_snap7
ADS, Ethernet + TCP/IP,  chwied.pyads bfabio.pyads, adshli, pyads
DirectNet Koyo RS-232/485 clickplc
DF1 RS-232/485  df1
PCOM,   Ethernet + TCP/IP, pcom
"" , fatek,  Ethernet + TCP/IP
==============================================================================

Modbus TCP, pymodbus, pyModbusTCP, cpppo
Thernet/IP(TCP) pycomm, cpppo
Profinet    devkid/profinet
OPC-UA opcua, asyncua, opcua-clientGUI, opcua-webclient

https://gitug.com/FreeOpcUa/opcua-client-gui/blob/c103bf/README.md

S7-PLCSIM
https://support.industry.siemens.com/cs/document/109772803/simatic-step-7-incl-safety-and-wincc-v16-trial-download?dti=0&lc=en-US

==============================================================================
process = subprocess.run(["echo", "This goes to stdout"], capture_output=True)
stdout_as_str = process.stdout.decode("utf-8")

print(stdout_as_str)
==============================================================================
Error message in
https://stackoverflow.com/questions/5419/python-unicode-and-the-windows-console

  "env": { "PYTHONIOENCODING":"UTF-8" },

dbcon = create_connection("../db.sqlite3")
cur = dbcon.cursor()
cur.execute("select jmeno, prijmeni, rc from moviebook_clen")
rows = cur.fetchall()
for row in rows:
    for field in row:
        print(field) # Here if Czech characters used, following error is returned.

Traceback (most recent call last):
  File "C:\Users\micha\PycharmProjects\uhli\moviebook\db_work.py", line 147, in <module>
    print(field)
  File "C:\Users\micha\AppData\Local\Programs\Python\Python38-32\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode character '\u0148' in position 2: character maps to <undefined>'
>>>

caused by missing or wrong value of
wrong value of sys.stdout.encoding
print (sys.stdout.encoding)
cp1252

value should be set
utf-8

fixed
by setting up env variable PYTHONIOENCODING=UTF-8
can be done on OS level or directly in sublime-build file as follows.

in "python_venv_3.8.sublime-build"

{
  "cmd": ["C:\Users\micha\AppData\Local\Programs\Python\Python38\python.exe", "-i", "-u", "$file"],
  "env": { "PYTHONPATH":"${project_path}" },
  "env": { "PYTHONIOENCODING":"UTF-8" },
  "file_regex": "^[ ]File \"(...?)\", line ([0-9]*)",
  "selector": "source.python"
}

now correct value is returned
print (sys.stdout.encoding)
utf-8

 "env": { "PYTHONPATH":"${project_path}" },


{
  "cmd": ["C:\\Users\\micha\\Projects\\uhli\\venv\\Scripts\\python.exe", "-i", "-u", "$file"],
  "env": { "PYTHONPATH":"${project_path}" },
  "env": { "PYTHONIOENCODING":"UTF-8" },
  "file_regex": "^[ ]File \"(...?)\", line ([0-9]*)",
  "selector": "source.python"



  	"variants":
	[
		{
			"name": "Syntax Check",
			"cmd": ["C:\\Users\\micha\\Projects\\uhli\\venv\\Scripts\\python.exe", "-m", "py_compile", "$file"],

		}
	]

}

==============================================================================
python mobile app tutorial on kivi
https://www.youtube.com/watch?v=qP9KYWrrORY

==============================================================================

==============================================================================
mapy in kivi
https://www.youtube.com/watch?v=qP9KYWrrORY


==============================================================================
sys.path.append('/usr/lib/python3/dist-packages/gi/__init__.py')
    sys.path.append('/usr/lib/python3/dist-packages/gi/')


sys.path.append('/usr/lib/python3/dist-packages/gi/__init__.py')
    sys.path.append('/usr/lib/python3/dist-packages/gi/')
==============================================================================
miko exception

https://docs.python.org/3/tutorial/errors.html

import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except OSError as err:
    print("OS error: {0}".format(err))
except ValueError:
    print("Could not convert data to an integer.")
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise

==============================================================================
or arg in sys.argv[1:]:
    try:
        f = open(arg, 'r')
    except OSError:
        print('cannot open', arg)
    else:
        print(arg, 'has', len(f.readlines()), 'lines')
        f.close()
==============================================================================

try:
...     raise Exception('spam', 'eggs')
... except Exception as inst:
...     print(type(inst))    # the exception instance
...     print(inst.args)     # arguments stored in .args
...     print(inst)          # __str__ allows args to be printed directly,
...                          # but may be overridden in exception subclasses
...     x, y = inst.args     # unpack args
...     print('x =', x)
...     print('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
==============================================================================
miko jupyterlab

pip install jupyterlab

  Stored in directory: c:\users\micha\appdata\local\pip\cache\wheels\3d\22\08\7042eb6309c650c7b53615d5df5cc61f1ea9680e7edd3a08d2
Successfully built pandocfilters pyrsistent

Installing collected packages:
    ipython-genutils, traitlets, pywin32, pyrsistent, wcwidth, tornado, pyzmq, parso, jupyter-core, jsonschema, webencodings, pygments, pycparser, prompt-toolkit,
    pickleshare, nest-asyncio, nbformat, MarkupSafe, jupyter-client, jedi, decorator, backcall, async-generator, testpath, pywinpty, pandocfilters, nbclient, mistune,
    jupyterlab-pygments, jinja2, ipython, entrypoints, defusedxml, cffi, bleach, urllib3, terminado, Send2Trash, prometheus-client, nbconvert, ipykernel, idna, chardet,
    certifi, argon2-cffi, requests, notebook, json5, jupyterlab-server, jupyterlab

Successfully installed MarkupSafe-1.1.1 Send2Trash-1.5.0 argon2-cffi-20.1.0 async-generator-1.10 backcall-0.2.0 bleach-3.2.1 certifi-2020.12.5 cffi-1.14.4 chardet-3.0.4
decorator-4.4.2 defusedxml-0.6.0 entrypoints-0.3 idna-2.10 ipykernel-5.3.4 ipython-7.19.0 ipython-genutils-0.2.0 jedi-0.17.2 jinja2-2.11.2 json5-0.9.5 jsonschema-3.2.0
jupyter-client-6.1.7 jupyter-core-4.7.0 jupyterlab-2.2.9 jupyterlab-pygments-0.1.2 jupyterlab-server-1.2.0 mistune-0.8.4 nbclient-0.5.1 nbconvert-6.0.7 nbformat-5.0.8
nest-asyncio-1.4.3 notebook-6.1.5 pandocfilters-1.4.3 parso-0.7.1 pickleshare-0.7.5 prometheus-client-0.9.0 prompt-toolkit-3.0.8 pycparser-2.20 pygments-2.7.2 pyrsistent-0.17.3
pywin32-300 pywinpty-0.5.7 pyzmq-20.0.0 requests-2.25.0 terminado-0.9.1 testpath-0.4.4 tornado-6.1 traitlets-5.0.5 urllib3-1.26.2 wcwidth-0.2.5 webencodings-0.5.1

jupyter-lab

==============================================================================
miko test



https://naucse.python.cz/course/mi-pyt/beginners/testing/
https://naucse.python.cz/course/mi-pyt/intro/testing/

test driven development

https://github.com/david-jarchovsky/apify-test-scraper


==============================================================================
miko heureka


pytest
selenium
end to end testy
objectives Objectives and key results (OKR)



==============================================================================
miko data science

https://towardsdatascience.com/



==============================================================================

miko python data analysis


https://jupyterlab.readthedocs.io/en/latest/


https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html

Derrick Sherrill
excel, pandas, atd.
https://www.youtube.com/channel/UCJHs6RO1CSM85e8jIMmCySw


https://www.youtube.com/watch?v=2BusGJyn77E&list=PLc_Ps3DdrcTvkgtRzKTrI5TzReXEio39f


https://jakevdp.github.io/PythonDataScienceHandbook/03.04-missing-values.html



opent jupyter in uhli/moviebook

file:///C:/Users/micha/AppData/Roaming/jupyter/runtime/nbserver-15668-open.html


==============================================================================
data analysis

WOWP (A WOrkfloW Framework in Python) is a modern, light-weight framework for integrated simulations in science.
https://github.com/coobas/wowp


fill in empty values with df1['weight'].mean() wweight value.


df1 = surveys_df.copy()
# Fill all NaN values with 0
df1['weight'] = df1['weight'].fillna(0)
However NaN and 0 yield different analysis results. The mean value when NaN values are replaced with 0 is different from when NaN values are simply thrown out or ignored.

df1['weight'].mean()
38.751976145601844
We can fill NaN values with any value that we chose. The code below fills all NaN values with a mean for all weight values.

df1['weight'] = surveys_df['weight'].fillna(surveys_df['weight'].mean())

==============================================================================
miko pointer and copy object
# Using the 'copy() method'
true_copy_surveys_df = surveys_df.copy()

# Using the '=' operator
ref_surveys_df = surveys_df


==============================================================================
miko pandas
https://pandas.pydata.org/pandas-docs/stable/reference/series.html

==============================================================================
miko pandas
https://datatofish.com/python-tutorials/
https://datatofish.com/substring-pandas-dataframe/




12 Useful Pandas Techniques in Python for Data Manipulation
https://www.analyticsvidhya.com/blog/2016/01/12-pandas-techniques-python-data-manipulation/?utm_source=blog&utm_medium=joins-in-pandas-master-the-different-types-of-joins-in-python

pandas join
Joins in Pandas: Master the Different Types of Joins in Python
https://www.analyticsvidhya.com/blog/2020/02/joins-in-pandas-master-the-different-types-of-joins-in-python/




pretypvani
    imdb_titles_raw
    .assign(
        titleType=imdb_titles_raw["titleType"].astype("category"),
        startYear=imdb_titles_raw["startYear"].astype("Int64"),
        endYear=imdb_titles_raw["endYear"].astype("Int64"),
        isAdult=imdb_titles_raw["isAdult"].astype(bool),
        runtimeMinutes=imdb_titles_raw["runtimeMinutes"].astype("Int64")
    )
).dtypes

==============================================================================
pandas writer


movies.to_excel('output.xlsx', index=False)
We need to be able to make our output files look nice before we can send it out to our co-workers. We can use pandas ExcelWriter class along with the XlsxWriter Python module to apply the formatting.

We can do use these advanced output options by creating a ExcelWriter object and use this object to write to the EXcel file.

writer = pd.ExcelWriter('output.xlsx', engine='xlsxwriter')
movies.to_excel(writer, index=False, sheet_name='report')
workbook = writer.bookworksheet = writer.sheets['report']
We can apply customizations by calling add_format on the workbook we are writing to. Here we are setting header format as bold.

header_fmt = workbook.add_format({'bold': True})
worksheet.set_row(0, None, header_fmt)
Finally, we save the output file by calling the method save on the writer object.

writer.save()

==============================================================================
Using the ExcelFile class to read multiple sheets
We can also use the ExcelFile class to work with multiple sheets from the same Excel file.
We first wrap the Excel file using ExcelFile and then pass it to read_excel method.


xlsx = pd.ExcelFile(excel_file)
movies_sheets = []
for sheet in xlsx.sheet_names:
   movies_sheets.append(xlsx.parse(sheet))
movies = pd.concat(movies_sheets)

==============================================================================
miko tutorials
https://pythonbasics.org/

miko pandas web scraping

https://pythonbasics.org/pandas-web-scraping/

==============================================================================
stazeni souboru z githubu


import os
from urllib.request import urlretrieve

# Seznam souboru (viz níže)
zdroje = [
    "https://github.com/coobas/pycon-cz-2019-workshop/raw/master/data/title.basics.tsv.gz",
    "https://github.com/coobas/pycon-cz-2019-workshop/raw/master/data/title.ratings.tsv.gz",
    "https://github.com/coobas/pycon-cz-2019-workshop/raw/master/data/rotten_tomatoes_top_movies_2019-01-15.csv",
    "https://github.com/coobas/pycon-cz-2019-workshop/raw/master/data/boxoffice_march_2019.csv.gz"
]

for url in zdroje:
    # Pouze poslední cást cesty adresy datového zdroje je jeho jméno
    jmeno = url.rsplit("/")[-1]

    if not os.path.exists(jmeno):
        print(f"Soubor {jmeno} ješte není stažen, jdeme na to...")
        urlretrieve(url=url, filename=jmeno)
        print(f"Soubor {jmeno} úspešne stažen.")
    else:
        print(f"Soubor {jmeno} už byl stažen, použijeme místní kopii.")
print("Všechny soubory jsou staženy.")
==============================================================================
OKR heureka

https://en.wikipedia.org/wiki/OKR

==============================================================================
# Create a list of columns in the dataframe
columns = excelFile.columns.tolist()

# Loop through indices and rows in the dataframe using iterrows
for index, row in excelFile.iterrows():
    # Loop through columns
    for col in columns:
        cell = row[col]
        # If we find it, print it out
        if re.match(".*TOM.*", cell):
            print(f'Found at Index: {index} Column: {col}')
==============================================================================
if o2 will kick me.
https://csas.jobs.cz/detail/?id=G2-1520311446-aden_brand0&rps=233
https://www.jobs.cz/rpd/1535170845/?searchId=bb9f14f6-58d4-44e6-b51e-f525e15bea8a&rps=233

Aplikacní administrátor do bankovnictví (60 - 80.000 Kc)
https://www.jobs.cz/rpd/1535170845/?searchId=3ae443ab-dfc5-482a-9a7c-bfa15c663ec4&rps=233

==============================================================================
https://github.com/hadley/r4ds


bottle==0.12.13
requests==2.21.0

==============================================================================
restapi rest-api
https://bottlepy.org/docs/dev/tutorial.html


==============================================================================
CREATE TABLE "el_palants"
("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
"utc_timestamp" datetime NOT NULL,
"temelin_actual" integer NOT NULL,
"temelin_installed" integer NOT NULL,
"dukovany_actual" integer NOT NULL,
"dukovany_installed" integer NOT NULL,
"pocerady_actual" integer NOT NULL,
"pocerady_installed" integer NOT NULL);

==============================================================================
http:\\localhost:8080\\content\\upload


localhost:8080/content/upload

C:\Users\micha\Projects\python-chunked-upload-example\venv\lib\site-packages\bottle.py:3468:
DeprecationWarning: Flags not at the start of the expression "((?m)[urbURB]?(?:''(" (truncated)

  patterns = [re.compile(p%pattern_vars) for p in patterns]
C:\Users\micha\Projects\python-chunked-upload-example\venv\lib\site-packages\bottle.py:3468:
DeprecationWarning: Flags not at the start of the expression '\\{\\{((?:((?m)[urbURB' (truncated)
  patterns = [re.compile(p%pattern_vars) for p in patterns]
127.0.0.1 - - [16/Dec/2020 12:46:48] "GET /content/upload HTTP/1.1" 405 747
==============================================================================
#!/usr/bin/python3
# vim: set fileencoding=utf-8

# Original (slightly buggy) code:
# see https://gist.github.com/bradmontgomery/2219997


import socket
from http.server import BaseHTTPRequestHandler, HTTPServer

hostName = ""
hostPort = 8000


class SimpleServer(BaseHTTPRequestHandler):

    def print_uri(self):
        print("URI: {uri}".format(uri=self.path))

    def send_headers(self):
        # priprava hlavicky odpovedi
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()

    def print_request_content(self):
        # precteni tela HTTP pozadavku
        print(self.headers)
        if "Content-Length" in self.headers:
            content_length = int(self.headers['Content-Length'])
            print("content length: {len}".format(len=content_length))

            content = self.rfile.read(content_length)
            print("content value:  {content}".format(content=content))

    def do_GET(self):
        self.print_uri()
        self.print_request_content()

        # odpoved serveru klientovi
        self.send_headers()
        self.wfile.write("*** get ***".encode("utf-8"))

    def do_POST(self):
        self.print_uri()
        self.print_request_content()

        # odpoved serveru klientovi
        self.send_headers()
        self.wfile.write("*** post ***".encode("utf-8"))


simpleServer = HTTPServer((hostName, hostPort), SimpleServer)

try:
    simpleServer.serve_forever()
except KeyboardInterrupt:
    pass

simpleServer.server_close()
==============================================================================
miko  have to do
https://www.itnetwork.cz/navrh/navrhove-vzory/gof/state
==============================================================================


==============================================================================
django project
C:\Users\micha\Projects\simple-file-upload

dostanu novy soubor
pokusim se naloudovat do tmp tabulky
zkontroluji data na duplicitu
nastavím na úrovni DB unikátní fieldy.
on by one nahrávám záznamy pri duplicite loguji, avytvarim err file davky.


insertuji do tabulky
==============================================================================
https://www.zdrojak.cz/clanky/python-profesionalne-pokrocile-tipy/



==============================================================================

select * from el_plants where utc_timestamp BETWEEN '2020-05-01 20:00:00' and '2020-05-01 21:00:00';
==============================================================================
miko facebook scraper

https://dev.to/hhsm95/python-facebook-posts-scraper-with-requests-and-beautifulsoup4-273a


==============================================================================
request structure full
ALLUSERSPROFILEAPPDATAAUTINSTLOGCLIONCOMMONPROGRAMFILESCOMMONPROGRAMFILES(X86)COMMONPROGRAMW6432COMPUTERNAMECOMSPECDRIVERDATAENV_PROMPTHOMEDRIVEHOMEPATHLOCALAPPDATALOGONSERVERNUMBER_OF_PROCESSORSONEDRIVEONEDRIVECONSUMEROSPATHPATHEXTPROCESSOR_ARCHITECTUREPROCESSOR_IDENTIFIERPROCESSOR_LEVELPROCESSOR_REVISIONPROGRAMDATAPROGRAMFILESPROGRAMFILES(X86)PROGRAMW6432PROMPTPSMODULEPATHPUBLICPYCHARMPYCHARM COMMUNITY EDITIONPYTHONPATHSESSIONNAMESIMATIC_OAMSIMATIC_OAM_DATASYSTEMDRIVESYSTEMROOTTEMPTMPTZUSERDOMAINUSERDOMAIN_ROAMINGPROFILEUSERNAMEUSERPROFILEVIRTUAL_ENVWINDIR_OLD_VIRTUAL_PATH_OLD_VIRTUAL_PROMPTSERVER_NAMEGATEWAY_INTERFACESERVER_PORTREMOTE_HOSTCONTENT_LENGTHSCRIPT_NAMESERVER_PROTOCOLSERVER_SOFTWAREREQUEST_METHODPATH_INFOQUERY_STRINGREMOTE_ADDRCONTENT_TYPEHTTP_HOSTHTTP_CONNECTIONHTTP_CACHE_CONTROLHTTP_SEC_CH_UAHTTP_SEC_CH_UA_MOBILEHTTP_UPGRADE_INSECURE_REQUESTSHTTP_USER_AGENTHTTP_ORIGINHTTP_ACCEPTHTTP_SEC_FETCH_SITEHTTP_SEC_FETCH_MODEHTTP_SEC_FETCH_USERHTTP_SEC_FETCH_DESTHTTP_REFERERHTTP_ACCEPT_ENCODINGHTTP_ACCEPT_LANGUAGEHTTP_COOKIE
wsgi.inputwsgi.errorswsgi.versionwsgi.run_oncewsgi.url_schemewsgi.multithreadwsgi.multiprocesswsgi.file_wrapperbottle.raw_pathbottle.appbottle.requestroute.handlebottle.routeroute.url_argsbottle.request.body_cgi.FieldStoragebottle.request.post
==============================================================================
from datetime import datetime

def split_it(list):
	ws = list.replace(" ", "").split(",")
	for w in ws:
		print (w)



list ='2020-05-01 20:00:00 - 2020-05-01 21:00:00'
list = 'temelin, dukovany'
# split_it(list)
filename1 = datetime.now().strftime("%Y%m%d-%H%M%S")
print(filename1)

==============================================================================
https://www.example-code.com/python/httprequest_multipart_form_data.asp

import chilkat

#  This example demonstrates building a multipart/form-data request.

req = chilkat.CkHttpRequest()

#  The ContentType, HttpVerb, and Path properties should
#  always be explicitly set.
req.put_HttpVerb("POST")
req.put_Path("/something")
req.put_ContentType("multipart/form-data")

#  The contents and name of each file to be uploaded is provided
#  by calling any of the following methods:
#  AddBytesForUpload
#  AddBytesForUpload2
#  AddFileForUpload
#  AddFileForUpload2
#  AddStringForUpload
#  AddStringForUpload2

#  For this example, we'll provide the contents of the files to be uploaded
#  directly as in-memory strings.
req.AddStringForUpload("fileA","fileA.txt","This is the contents of file A","utf-8")
req.AddStringForUpload("fileB","fileB.txt","This is the contents of file B","utf-8")
req.AddStringForUpload("fileC","fileC.txt","This is the contents of file C","utf-8")

#  View the request that would be sent if SynchronousRequest was called:
requestMime = req.generateRequestText()
print(requestMime)

#  A few important comments about the HTTP request that is generated:
#
#  1) Chilkat automatically generates a random boundary string.   In 99.999% of cases, this should
#     be sufficient.
#  2) The Content-Length header is automatically generated based on the actual length of the MIME message
#     that follows the intial (topmost) MIME header.
#  3) The HOST header will automatically get filled in with the actual domain when SynchronousRequest
#     is called.
==============================================================================

C:\Users\micha\Projects\python-chunked-upload-example\tests\data\20201221-205304.csv


==============================================================================
https://docs.python.org/3/library/multiprocessing.html

==============================================================================
source dir

test data are generated in
C:\Users\micha\Projects\rest-api-evo1\tests\data\20201221-212549.csv

through the REST-API are stored in
CSV_DIR
C:\Users\micha\Projects\rest-api-evo1\csvs\
and loaded in DB

output dir for reports
display function is generating data in
OUT_DIR
C:\Users\micha\Projects\rest-api-evo1\out
file is returned to client



http://localhost:8080/x?file_name=batch1.txt

http://localhost:8080/in_line?file_name=C:\Users\micha\Projects\python-chunked-upload-example\tests\data\20201221-212549.csv

curl http://localhost:8080/in_line?file_name=C:\Users\micha\Projects\python-chunked-upload-example\tests\data\20201221-212549.csv


http://localhost:8080/test_a?file_name=C:\Users\micha\Projects\python-chunked-upload-example\tests\data\20201221-212549.csv

http://localhost:8080/x?time_slot='2020-05-01 20:00:00 - 2020-05-01 21:00:00'@plant_list='dukovany,pocerady'

two records
curl http://localhost:8082/display?time_slot='2020-05-01 20:00:00 - 2020-05-01 21:00:00'&plant_list='pocerady,temelin,dukovany'



empty
http://localhost:8082/display?time_slot='2021-05-01 20:00:00 - 2020-05-01 21:00:00'&plant_list='pocerady,temelin,dukovany'


http://localhost:8082/display?time_slot='2020-02-13 20:00:00 - 2020-09-29 13:00:00'&plant_list='temelin,dukovany'&koko='koko'


http://localhost:8082/x?time_slot='2020-05-01 20:00:00 - 2020-05-01 21:00:00'&plant_list='dukovany,pocerady'


http://miko73.pythonanywhere.com//display?time_slot='2020-05-01 20:00:00 - 2020-05-01 21:00:00'&plant_list='dukovany,pocerady'

http://localhost:8082/display?time_slot='2020-02-13 20:00:00 - 2020-09-29 13:00:00'&plant_list='temelin,dukovany'&koko='koko'


http://127.0.0.1:8082/posting_data?name=michal&surname=Kocandrle

http://www.domain.com/index.html*?name1=value1&name2=value2


http://localhost:8082/my_test_batch.csv

http://localhost:8082/upload_file


(venv) C:\Users\micha\Projects\python-chunked-upload-example>
python server.py

python uploader.py C:\Users\micha\Projects\python-chunked-upload-example\tests\data\simple.txt
python uploader.py C:\Users\micha\Projects\rest-api-evo1\tests\data\20201221-212549.csv

python uploader.py C:\Users\micha\Projects\python-chunked-upload-example\csvs\batch1.txt

==============================================================================
https://kennethreitz.org/
https://httpbin.org/



==============================================================================
from __future__ import unicode_literals
from bottle import Bottle, request, response
from mypkg import analyse_data


# http://www.reddit.com/r/learnpython/comments/1037g5/whats_the_best_lightweight_web_framework_for/
# http://bottlepy.org/docs/dev/tutorial.html
app = Bottle()


template = """<html>
<head><title>Home</title></head>
<body>
<h1>Upload a file</h1>
<form method="POST" enctype="multipart/form-data" action="/">
<label>Level:</label> <input type="text" name="level" value="42"><br>
<input type="file" name="uploadfile" /><br>
<input type="submit" value="Submit" />
</form>
</body>
</html>"""


@app.get('/')
def home():
    return template


@app.post('/')
def upload():
    # A file-like object open for reading.
    upload_file = request.POST['uploadfile']
    level = int(request.POST['level'])

    # Your analyse_data function takes a file-like object and returns a new
    # file-like object ready for reading.
    converted_file = analyse_data(data=upload_file.file, level=level)
    response.set_header('Content-Type', 'text/csv')
    response.set_header('Content-Disposition', 'attachment; filename=converted.csv')

    # Return a file-like object.
    return converted_file


if __name__ == "__main__":
    app.run(debug=True)




==============================================================================
admin.py
def download_backup(request):
    encoded_filename = request.matchdict['backup_id']

    headers = []

    try:
        filename = base64.b64decode(encoded_filename).decode('utf-8')
    except TypeError:
        return HTTPNotFound()

    backups_dir = get_backups_dir()
    all_backups = [x for x in os.listdir(backups_dir) if os.path.isfile(os.path.join(backups_dir, x))]
    if filename not in all_backups:
        return HTTPNotFound()

    full_path = os.path.join(backups_dir, filename)
    if not os.path.isfile(full_path):
        return HTTPNotFound()

    headers = []
    content_length = os.path.getsize(full_path)
    headers.append(('Content-Length', str(content_length)))
    headers.append(('Content-Disposition', str('attachment; filename={0}'.format(filename))))

    response = Response(content_type='application/octet-stream')
    try:
        response.app_iter = open(full_path, 'rb')
    except IOError:
        return HTTPNotFound()

    response.headerlist += headers

    return response

==============================================================================
views.py
def httpexception_view(exc, request):
    # This special case exists for the easter egg that appears on the 404
    # response page. We don't generally allow youtube embeds, but we make an
    # except for this one.
    if isinstance(exc, HTTPNotFound):
        request.find_service(name="csp").merge(
            {
                "frame-src": ["https://www.youtube-nocookie.com"],
                "script-src": ["https://www.youtube.com", "https://s.ytimg.com"],
            }
        )
    try:
        # Lightweight version of 404 page for `/simple/`
        if isinstance(exc, HTTPNotFound) and request.path.startswith("/simple/"):
            response = Response(body="404 Not Found", content_type="text/plain")
        else:
            response = render_to_response(
                "{}.html".format(exc.status_code), {}, request=request
            )
    except LookupError:
        # We don't have a customized template for this error, so we'll just let
        # the default happen instead.
        return exc

    # Copy over the important values from our HTTPException to our new response
    # object.
    response.status = exc.status
    response.headers.extend(
        (k, v) for k, v in exc.headers.items() if k not in response.headers
    )

    return response
==============================================================================
url = 'http://geocoding.geo.census.gov/geocoder/locations/addressbatch?form'
payload = {'name': 'addressFile', 'filename':'C:/ds/data/california/census_geocode/batch_0.csv'}
session = requests.session()
r = requests.post(url, data=payload)

==============================================================================
miko log
miko logging

https://docs.python.org/3/howto/logging-cookbook.html

==============================================================================
Human Centric Design nebo Lean Startup

==============================================================================
def __setitem__(self, key, value):
        """ Change an environ value and clear all caches that depend on it. """

        if self.environ.get('bottle.request.readonly'):
            raise KeyError('The environ dictionary is read-only.')

        self.environ[key] = value
        todelete = ()

        if key == 'wsgi.input':
            todelete = ('body', 'forms', 'files', 'params', 'post', 'json')
        elif key == 'QUERY_STRING':
            todelete = ('query', 'params')
        elif key.startswith('HTTP_'):
            todelete = ('headers', 'cookies')

        for key in todelete:
            self.environ.pop('bottle.request.'+key, None)

==============================================================================
 url_login = "https://m.facebook.com/login/device-based/regular/login/?refsrc=https%3A%2F%2Fm.facebook.com%2F&lwv=100&refid=8"
 requests.exceptions.MissingSchema: Invalid URL '/a/preferences.php?basic_site_devices=m_basic&sr_link=1&uri=https%3A%2F%2Fm.facebook.com%2Fhome.php&gfid=AQClUuEXqVv3ADThhdk':
No schema supplied. Perhaps you meant http:///a/preferences.php?basic_site_devices=m_basic&sr_link=1&uri=https%3A%2F%2Fm.facebook.com%2Fhome.php&gfid=AQClUuEXqVv3ADThhdk?

   email = 'aloisboban65@gmail.com'
    password = 'Bobane.22'

url https://m.facebook.com/preferences.php?basic_site_devices=m_basic&sr_link=1&uri=https%3A%2F%2Fm.facebook.com%2Fhome.php&gfid=AQClUuEXqVv3ADThZxw

(venv) C:\Users\micha\Projects\FacebookPostsScraper>python main.py
soup <?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.0//EN" "http://www.wapforum.org/DTD/xhtml-mobile10.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<title>Chyba</title>
<meta content="default" id="meta_referrer" name="referrer"/>
<style nonce="AIOq47wu" type="text/css">/*<![CDATA[*/.b .w{padding:4px;}.x{background-color:#ffebe8;color:#6d220d;}.y{padding:2px 3px;}.z{border-bottom:1px solid;}.x{border-color:#dd3c10;}.ba{font-size:small;}body,tr,input,textarea,.e{font-size:medium;}.bb{background-color:#fff;border-bottom:1px solid;border-color:#ebedf0;padding:5px 8px 23px 8px;text-align:center;}.bc{padding:20px;}.bd{text-align:center;}.bf{-webkit-appearance:none;background:none;display:inline-block;font-size:12px;height:28px;line-height:28px;margin:0;overflow:visible;padding:0 9px;text-align:center;vertical-align:top;white-space:nowrap;}.b .bf{border-radius:2px;}.bj,.bu,a.bj,a.bu,html .b a.bj,html .b a.bu{color:#fff;}.b .bu{background-color:#4080ff;border:1px solid #4476e8;}.b a.bu:hover,.b .bu:hover{background-color:#4580ef;}.b .bj{background-color:#4267b2;border:1px solid #365899;}.b a.bj:hover,.b .bj:hover{background-color:#465e91;}.bj[disabled]{color:#899bc1;}.bu[disabled]{color:#91b4fd;}.b .bj[disabled]:hover{background-color:#4267b2;}.b .bu[disabled]:hover{background-color:#4080ff;}.bf .bl{display:inline-block;}.b .bf .bl{display:inline-block;margin-top:0;vertical-align:middle;}.b a.bf::after{content:"";display:inline-block;height:100%;vertical-align:middle;}.bf .bl{line-height:20px;margin-top:4px;}.b .bf{padding:0 8px;}.b a.bf{height:26px;line-height:26px;}.bl{pointer-events:none;}.b a,.b a:visited{color:#3b5998;text-decoration:none;}.b .u,.b .u:visited{color:#fff;}.b a:focus,.b a:hover{background-color:#3b5998;color:#fff;}.b .u:focus,.b .u:hover{background-color:#fff;color:#3b5998;}.bk{font-weight:normal;}.bn{height:20px;}.bo{border-bottom:1px solid #ccd0d5;height:10px;text-align:center;width:100%;}.bp{color:#4b4f56;font-size:12px;line-height:20px;padding:0 10px;}.bq{background-color:#fff;}body{text-align:left;direction:ltr;}body,tr,input,textarea,button{font-family:sans-serif;}body,p,figure,h1,h2,h3,h4,h5,h6,ul,ol,li,dl,dd,dt{margin:0;padding:0;}h1,h2,h3,h4,h5,h6{font-size:1em;font-weight:bold;}ul,ol{list-style:none;}article,aside,figcaption,figure,footer,header,nav,section{display:block;}.d{background:#f5f6f7;}#page{position:relative;}.h{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;}.i{background-color:#3b5998;color:#fff;}.i .s{font-size:small;font-weight:normal;}.o{display:block;padding:5px;}.t{background:#6d84b4;display:inline-block;font-size:14px;font-weight:normal;margin:4px 0;padding:2px 8px;}.b .j{border:0;border-collapse:collapse;margin:0;padding:0;width:100%;}.b .j tbody{vertical-align:top;}.b .k>tr>td,.b .k>tbody>tr>td,.b .j td.k{vertical-align:middle;}.b .j td{padding:0;}.b .j td.w{padding:4px;}.b .r{width:100%;}.p,.p.q{display:block;}.m{display:block;}.n{height:20px;width:20px;}.q{border:0;display:inline-block;vertical-align:top;}i.q u{position:absolute;width:0;height:0;overflow:hidden;}/*]]>*/
</style>
<meta content="Pokud se chcete podívat, prihlaste se, nebo se zaregistrujte" property="og:title"/>
<meta content="Dívejte se na Facebooku na príspevky, fotky a spoustu dalšího." property="og:description"/>
<link crossorigin="use-credentials" href="/data/manifest/" rel="manifest"/></head><body class="b c d" tabindex="0">
<div class="e"><div id="viewport"><div class="f g" id="MChromeHeader"><a class="h"
href="/a/preferences.php?basic_site_devices=m_basic&amp;sr_link=1&amp;uri=https%3A%2F%2Fm.facebook.com%2Fhome.php&amp;gfid=AQClUuEXqVv3ADThrp0" tabindex="-1"> </a>
<div class="i" id="header"><table class="j k"><tbody><tr>
<td class="l"><a class="m n o" href="/home.php?ref_component=mbasic_home_logo&amp;ref_page=XLoginController">
<img alt="Facebook logo" class="p q" height="20" src="https://static.xx.fbcdn.net/rsrc.php/v3/yo/r/lu21Uv7wduK.png" width="20"/></a></td>
<td class="r"><span><h1 class="s"><a class="t u" href="/home.php">Prejít na hlavní stránku</a></h1></span></td></tr></tbody></table>
</div></div><div id="objects_container"><div class="d" id="root"><div class="v w x y z"><span class="ba">Váš požadavek nelze zpracovat</span>
<br/>Pri zpracovávání požadavku došlo k chybe. Snažíme se ji co nejrychleji odstranit.</div><div class="bb"><div class="bc">Zaregistrujte se na Facebook, nebo se prihlaste a mužete pokracovat.</div><div class="bd"><a class="be bf bg bh bi bj bk" href="/r.php?next=https%3A%2F%2Fm.facebook.com%2Flogin%2Fdevice-based%2Fregular%2Flogin%2F%3Frefsrc%3Dhttps%253A%252F%252Fm.facebook.com%252F%26lwv%3D100%26refid%3D8&amp;cid=104"><span class="bl">Pripojit se</span></a><div class="bm"><div class="bn"><div class="bo"><span class="bp bq">nebo</span></div></div></div><a class="be bf br bs bt bu bk" href="https://m.facebook.com/login.php?next=https%3A%2F%2Fm.facebook.com%2Flogin%2Fdevice-based%2Fregular%2Flogin%2F%3Frefsrc%3Dhttps%253A%252F%252Fm.facebook.com%252F%26lwv%3D100%26refid%3D8&amp;ref=104&amp;refsrc=https%3A%2F%2Fm.facebook.com%2F"><span class="bl">Prihlásit se</span></a></div></div><div style="display:none"><div></div><div></div></div><span><img height="0" src="https://facebook.com/security/hsts-pixel.gif?c=3.2" style="display:none" width="0"/></span></div></div></div></div></body></html>
redirect <a class="h" href="/a/preferences.php?basic_site_devices=m_basic&amp;sr_link=1&amp;uri=https%3A%2F%2Fm.facebook.com%2Fhome.php&amp;gfid=AQClUuEXqVv3ADThrp0"
tabindex="-1"> </a>


==============================================================================
google text to speach


https://codelabs.developers.google.com/codelabs/cloud-speech-text-python3#8
https://cloud.google.com/speech-to-text/docs/languages


Czech (Czech Republic)	cs-CZ	Command and search	?		?		?
Czech (Czech Republic)	cs-CZ	Default	?		?		?
==============================================================================
google speech to text

(venv) C:\Users\micha\Projects\google_speech>python t2s.py

Audio content written to file "output.mp3"

==============================================================================
native window text speach does not use google.

(venv) C:\Users\micha\Projects\text-to-speech-api>python test_speach.py
==============================================================================
google callendar
References
----------

Template for `setup.py` was taken from `kennethreitz/setup.py`_


.. _`official API`: https://developers.google.com/calendar
.. _documentation: https://google-calendar-simple-api.readthedocs.io/en/latest/?badge=latest
.. _`Getting started page`: https://google-calendar-simple-api.readthedocs.io/en/latest/getting_started.html
.. _beautiful_date: https://github.com/beautiful-everything/beautiful-date
.. _`kennethreitz/setup.py`: https://github.com/kennethreitz/setup.py

calendar api
https://developers.google.com/resources/api-libraries/documentation/calendar/v3/python/latest/calendar_v3.events.html#insert)


==============================================================================
(venv) C:\Users\micha\Projects\google-calendar-simple-api>python quickstart.py
Getting the upcoming 10 events
2021-02-27 Alex svátek
2021-05-03 Alex svátek
2021-05-08 Výrocí seznámení
2021-06-08 Výrocí svatby
2021-11-02 Tobiáš svátek
2022-02-27 Alex svátek
2022-05-03 Alex svátek
2022-05-08 Výrocí seznámení
2022-06-08 Výrocí svatby
2022-11-02 Tobiáš svátek



(venv) C:\Users\micha\Projects\google-calendar-simple-api>python list_calendars.py
Getting list of calendars
eva.kocandrlova@gmail.com       eva.kocandrlova@gmail.com
Narozeniny      addressbook#contacts@group.v.calendar.google.com
Family  family04387413008796076849@group.calendar.google.com
michal.kocandrle@gmail.com      michal.kocandrle@gmail.com      Primary
Ceské státní svátky     cs.czech#holiday@group.v.calendar.google.com
Miko_test_class sekce ? classroom103191537454091589063@group.calendar.google.com
praha5sobe@gmail.com    praha5sobe@gmail.com


==============================================================================
miko file name
miko file_name

import os
file_location = '/srv/volume1/data/eds/eds_report.csv'
file_name = os.path.basename(file_location )  #eds_report.csv
location = os.path.dirname(file_location )    #/srv/volume1/data/eds


==============================================================================
miko facebook

https://developers.facebook.com/docs/facebook-login/permissions/review/

https://developers.facebook.com/apps/

facebook application.
https://developers.facebook.com/apps/857221951740762/add/
==============================================================================
stažení souboru z githubu
<a href="https://pyvec.github.io/cheatsheets/keyboard/keyboard-cs.pdf">


==============================================================================
miko data
miko data

miko data structures
miko datastructures

https://docs.python.org/3/library/collections.html


set unique
list
dict unique





https://naucse.python.cz/course/pyladies/



array
https://pyvec.github.io/cheatsheets/strings/strings-cs.pdf
==============================================================================
miko array
initialize
l = range(20)






seznam
==============================================================================
set
cisla = [1, 1, 2, 3, 5, 8, 13]
print(cisla)
ale i
seznam = [1, 'abc', True, None, range(10), len]
print(seznam)


>>> abeceda = list('abcdefghijklmnopqrstuvwxyz')
>>> cisla = list(range(22))
>>> print(abeceda)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
>>> print(cisla)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]


a = [1, 2, 3, 3]
b = list(a)

print(b)
[1, 2, 3, 3]

>>> a.append(4)
>>> print(b)
[1, 2, 3]
>>> print (a)
[1, 2, 3, 4]

split
>>> slova = 'Tato veta je složitá, rozdelme ji na slova!'.split()
>>> print(slova)
['Tato', 'veta', 'je', 'složitá,', 'rozdelme', 'ji', 'na', 'slova!']


'abc'.capitalize() == 'Abc'

list in list
seznam_seznamu = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

tabulka nasobilky

def vytvor_tabulku(velikost=11):
    seznam_radku = []
    for a in range(velikost):
        radek = []
        for b in range(velikost):
            radek.append(a * b)
        seznam_radku.append(radek)
    return seznam_radku

nasobilka = vytvor_tabulku()

print(nasobilka[2][3])  # dva krát tri
print(nasobilka[5][2])  # pet krát dva
print(nasobilka[8][7])  # osm krát sedm

# Vypsání celé tabulky
for radek in nasobilka:
    for cislo in radek:
        print(cislo, end=' ')
    print()
==============================================================================
N-tice
>>> for i in range(10): seznam_dvojic.append((i, i**2))
...
>>> print(seznam_dvojic)
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36), (7, 49), (8, 64), (9, 81)]


navratova hodnota funkce
>>> def podil_a_zbytek(a, b):
...     return a // b, a % b
...
>>> podil, zbytek = podil_a_zbytek(12, 5)
>>> podil
2
>>> zbytek
2



==============================================================================



seznam.append(**seznam[0])
>>> prvocisla = [2, 3, 5, 7, 11, 13, 17]
>>> print (prvocisla)
[2, 3, 5, 7, 11, 13, 17]
>>> dalsi_prvocisla = [23, 29, 31]
>>> prvocisla.extend(dalsi_prvocisla)
>>> print(prvocisla)
[2, 3, 5, 7, 11, 13, 17, 23, 29, 31]
prvocisla[1]=[]
print(prvocisla)

mazani zaznamu

prvocisla[1:2]=[]
print(prvocisla)
[2, 5, 7, 11, 13, 17, 23, 29, 31]


>>> cisla = [1, 2, 3, 4, 5, 6]
>>> del cisla[-1]
>>> print(cisla)
[1, 2, 3, 4, 5]
>>> del cisla[3:5]
>>> print(cisla)
[1, 2, 3]
>>> del cisla
>>> print(cisla)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'cisla' is not defined

>>> cisla = [1, 2, 3, 'abc', 4, 5, 6, 12]
>>> posledni = cisla.pop()
>>> print(posledni)
12
>>> cisla.remove('abc')
>>> print(cisla)
[1, 2, 3, 4, 5, 6]
>>> cisla.clear()
>>> print(cisla)
[]

seznam.sort()
seznam.sort(reverse=True)

vyhleda vsechny D
x=melodie.index('D')
while x:
    print (f'{x}')
    try:
        x += melodie[x+1:].index('D') + 1
    except:
        break

>>> melodie = ['C', 'E', 'G'] * 2 + ['E', 'E', 'D', 'E', 'F', 'D'] * 2 + ['E', 'D', 'C']
>>> print(melodie)
['C', 'E', 'G', 'C', 'E', 'G', 'E', 'E', 'D', 'E', 'F', 'D', 'E', 'E', 'D', 'E', 'F', 'D', 'E', 'D', 'C']

>>> print(len(melodie))         # Délka seznamu
21
>>> print(melodie.count('D'))   # Pocet 'D' v seznamu
5
>>> print(melodie.index('D'))   # Císlo prvního 'D'
8
>>> print('D' in melodie)       # Je 'D' v seznamu?
True

>>> print('DE' in melodie)
False
>>> print(melodie.count('DE'))
0
>>> print(melodie.index('DE'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 'DE' is not in list



==============================================================================
slovnik
==============================================================================

miko dict

https://naucse.python.cz/lessons/beginners/dict/
dict = {'{': 0, '[': 0, '(': 0, ')':0 , ']':0, '}':0}


ja = {'jméno': 'Anna', 'mesto': 'Brno', 'císla': [3, 7]}
>>> ja[ 'císla']
[3, 7]
>>> ja[ 'císla'][0]
3
>>> ja[ 'císla'][1]
7

== nacteni slovniku
barvy_po_tydnu = dict(barvy)

for klic in barvy_po_tydnu:
    barvy_po_tydnu[klic] = 'cerno-hnedo-' + barvy_po_tydnu[klic]

print(barvy['jablko'])
print(barvy_po_tydnu['jablko'])


== Druhá vec, která jde prevést na slovník, je sekvence dvojic klíc/hodnota:

data = [(1, 'jedna'), (2, 'dva'), (3, 'tri'), (1, 'one')]
nazvy_cisel = dict(data)


miko Dictionaries:
miko dict
miko zip
==============================================================================
print (f'zip("abcde", range(5)) [{zip("abcde", range(5))}]')

print (f'list(zip("abcde", range(5))) [{list(zip("abcde", range(5)))}]')

dict1 = dict(zip("abcde", range(5)))
print (f' dict1.keys {dict1.keys()}')
print (f' dict1.keys {dict1.values()}')

for en, el in enumerate (dict1):
    print (f'le = {el} dict1[el] = {dict1[el]}')

print (f'list(zip("abcde", range(5))) {dict1}')

==============================================================================
It is an unordered set of key value pairs

miko dict

Initialize an empty Dict
Syntax:

myDict = {}


Add an element with key "k" to the Dict
Syntax:

myDict["k"] = value
Update the element with key "k"
Syntax:

myDict["k"] = newValue
Get element with key "k"
Syntax:

myDict["k"] -- If the key is not present, a KeyError is raised
Check if the dictionary has key "k"
Syntax:

"k" in myDict
Get the list of keys
Syntax:

    myDict.keys()

Get the size of the dictionary
Syntax:

len(myDict)
Delete element with key "k" from the dictionary

Syntax:
    del myDict["k"]

Delete all the elements in the dictionary
Syntax:

myDict.clear()



direct maping
s = 'ABCDBCA'

translation = s.maketrans('A', 'a')
print(s.translate(translation))

translation = s.maketrans('ABCD', 'abcd')
print(s.translate(translation))






miko seznamy
miko prunik
miko rozdil
miko set



import sqlite3

def solution(A):
    s = {x for x in A if x > 0}
    if not s:
        return 1
    last = max(s)+1
    print ("s - ", s)
    # Find elements present in either of the two sets, but not common to both the sets
    s2 = set(range(1, last))
    print ("s2 od 1 do max - ",s2)
    #new_set = s2.intersection(s)
    new_set = s2.difference(s)
    #new_set = s^set(range(1, last))
    print("prunik? - ", new_set)

    if not new_set:
        return last

    return min(new_set)

#A = [4,2,3, 3, 3, 3]
#A= [1, 3, 6, 4, 1, 2]
#A=[-1, -3]
#A=[-1000000, 1000000]
#A=[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149]
#A=[90, 91, 92, 93]
#A=[1,2,3]
A=[1,2,3, 5, 99, 199]
print (solution(A))
==============================================================================
def solution(A):
    B = [x for x in A if x > 0]
    B = sorted(B)
    if 1 not in B:
        return 1
    for i in range(0, len(B) - 1):
        if B[i+1] - B[i] > 1:
            return B[i] + 1
    return max(B) + 1

A=[-1, -3]
print (solution(A))
==============================================================================
miko empty list
miko list


souhlasky=[]
samohlasky=[]
cislice=[]
s = {x for x in A if x > 0}
x = 5
path = [b for b in range(1,x)]


text = input("zadej slovo - ")
for a in text:
   if a in {"a","e","i","y","o","u","ï¿½","ï¿½","ï¿½","ï¿½","ï¿½","u","ï¿½"}:
      souhlasky.append(a)
   elif a == " ":
      pass
   elif a in "0123456789":
      cislice.append(a)
   else:
      samohlasky.append(a)

print("souhlasky -", souhlasky)
print("samohlasky - ", samohlasky)
print("cislice - ", cislice)
==============================================================================
miko slovnik
po = {']': '[', '}': '{', ')': '('}

the last element of array
a = a[-1]

seznam_1 = []
seznam_2 = [1, 2, 3]
seznam_3 = ["a", "b", "c"]
seznam_4 = ["a", 1, "b", 2]

eng2sp = {}
eng2sp['one'] = 'uno'
eng2sp['two'] = 'dos'
(eng2sp)
{'two': 'dos', 'one': 'uno'}


l1 = int(input("leva 1 :"))
p1 = int(input ("prava 1 :"))+1
l2 = int(input ("leva 2 :"))
p2 = int(input ("prava 2 "))+1
list1 = set(range(l1, p1))
list2 = set(range(l2, p2))
result={}
for i1 in list1:
   for i2 in list2:
      search = i1 + i2
      for s1 in list1:
         if search == s1:
            result[i1] = i2
      for s2 in list2:
         if search == s2:
            result[i2] = i1
print (result)

==============================================================================
miko empty list
miko list


souhlasky=[]
samohlasky=[]
cislice=[]
s = {x for x in A if x > 0}
x = 5
path = [b for b in range(1,x)]


text = input("zadej slovo - ")
for a in text:
   if a in {"a","e","i","y","o","u","ï¿½","ï¿½","ï¿½","ï¿½","ï¿½","u","ï¿½"}:
      souhlasky.append(a)
   elif a == " ":
      pass
   elif a in "0123456789":
      cislice.append(a)
   else:
      samohlasky.append(a)

print("souhlasky -", souhlasky)
print("samohlasky - ", samohlasky)print("cislice - ", cislice)
==============================================================================
miko init

l = list(range(100))
l =  [x for x in range(100)]
l = set(range(100))
l = list(string.ascii_lowercase)

==============================================================================
B = sorted(B)
ale
cisla.sort()
vraci NULL

for i, a in enumerate(s):


==============================================================================
miko string
import string
https://docs.python.org/3/library/stdtypes.html#string-methods
help(string)


   Public module variables:
    __all__ = ['ascii_letters', 'ascii_lowercase', 'ascii_uppercase', 'cap...
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    hexdigits = '0123456789abcdefABCDEF'
    octdigits = '01234567'
    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTU...
    punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
    whitespace = ' \t\n\r\x0b\x0c'

FILE
    c:\users\micha\appdata\local\programs\python\python38\lib\string.py

==============================================================================
miko language
miko czech

import locale
from icu import LocaleData

default, encoding = locale.getdefaultlocale()


==============================================================================
miko test

import string

def vynasob(a, b):
	a = a.replace(",", ".")
	print (a)
	return float(a) * b

a = "23,8"
b = 6
print(vynasob(a, b))



# test 3
def transform(text):
	print (text.split(","))
	res= list(text.split(","))
	return len (res)


text3="'a',2,3.55,'Brno','Dominik'"
print (transform(text3))

# test 4
miko even
miko odd

def get_even_odd():
	# l = list(range(100))
	l =  [x for x in range(100)]
	print(f'even {l[2::2]}')
	print(f'ood {l[1::2]}')

get_even_odd()


#test 5

def text_exists():
	file = open(f"text.txt", encoding="utf8")
	str = file.readlines()
	file.close()

	for line in str:
		if "príklad" in line:
			return True
		else:
			return False

print (text_exists())


#test 6
def compare(l1, l2):
	l1.sort()
	l2.sort()
	print (l1)
	print (l2)

	if len (l1) != len(l2):
		return False
	for x in range (0, len(l1)):
		if l1[x] != l2[x]:
			return False
	return True


l1 = [7, 1, 2, 3, 4, 5, 6]
l2 = [6, 5, 4, 3, 2, 1]

print ( compare(l1, l2) )


==============================================================================
- select sum(SkolaKapacita) from Praha_skoly where MistoDruhTyp = 'Základní škola' and RedAdresa1 = MistoAdresa1 and MistoAdresa2 in ('Košíre');
select * from Praha_skoly where MistoDruhTyp = 'Základní škola' and RedAdresa1 = MistoAdresa1 and MistoAdresa2 in ('Košíre', 'Smíchov', 'Jinonice') order by 2;
==============================================================================
tabulka zamestnancu

C:\Users\micha\Projects\web_scriping\tel_sez\tel_sez_scriping.py



# select * from lidi left JOIN lidi_final
# on lidi.jmeno = lidi_final.jmeno where lidi_final.jmeno is NULL;


#novi zamestnanci.

# select * from lidi_final left JOIN lidi
# on lidi.jmeno = lidi_final.jmeno where lidi.jmeno is NULL;


==============================================================================
miko multiprocessing
https://www.cloudcity.io/blog/2019/02/27/things-i-wish-they-told-me-about-multiprocessing-in-python/
asinco


def main():
    with MainContext() as main_ctx:
        init_signals(main_ctx.shutdown_event, default_signal_handler, default_signal_handler)

        send_q = main_ctx.MPQueue()
        reply_q = main_ctx.MPQueue()

        main_ctx.Proc("SEND", SendWorker, send_q)
        main_ctx.Proc("LISTEN", ListenWorker, reply_q)
        main_ctx.Proc("STATUS", StatusWorker)
        main_ctx.Proc("OBSERVATION", ObservationWorker)

        while not main_ctx.shutdown_event.is_set():
            event = main_ctx.event_queue.safe_get()
            if not event:
                continue
            elif event.msg_type == "STATUS":
                send_q.put(event)
            elif event.msg_type == "OBSERVATION":
                send_q.put(event)
            elif event.msg_type == "ERROR":
                send_q.put(event)
            elif event.msg_type == "REQUEST":
                request_handler(event, reply_q, main_ctx)
            elif event.msg_type == "FATAL":
                main_ctx.log(logging.INFO, f"Fatal Event received: {event.msg}")
                break
            elif event.msg_type == "END":
               main_ctx.log(logging.INFO, f"Shutdown Event received: {event.msg}")
               break
           else:
               main_ctx.log(logging.ERROR, f"Unknown Event: {event}")


==============================================================================

pro synchronizaci uzivej

event_q = multiprocessing.Queue()
send_q = multiprocessing.Queue()
# ...
event_q.put("FOO")e


# … in another subprocess ...
event = event_q.get(block=True, timeout=timeout)

# …
queue.close()
queue.join_thread()

==============================================================================

cisti po procesech
pouzij multiprocessing.Eventobjekt. EventObjekt

while not shutdown_event.is_set():
    try:
        item = work_queue.get(block=True, timeout=timeout)
    except queue.Empty:
        continue

    if item == "END":
        break
    # …
==============================================================================
uklizet a uklizet halvne otevrene soubory, porty a roury
def startup(self):
    # -- Called during worker process start up sequence
    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    self.socket.bind(('127.0.0.1', 9999))
    self.socket.settimeout(self.SOCKET_TIMEOUT)
    self.socket.listen(1)

def shutdown(self):
    # -- Called when worker process is shutting down
    self.socket.close()
==============================================================================
Vycisteni podprocesu cekat na konec podprocesu, aby nezustali zombici.

def stop_procs(self):
    self.shutdown_event.set()

    end_time = time.time() + self.STOP_WAIT_SECS
    num_terminated = 0
    num_failed = 0

    # -- Wait up to STOP_WAIT_SECS for all processes to complete
    for proc in self.procs:
        join_secs = max(0.0, min(end_time - time.time(), STOP_WAIT_SECS))
        proc.proc.join(join_secs)

    # -- Clear the procs list and _terminate_ any procs that
    # have not yet exited
    while self.procs:
        proc = self.procs.pop()
        if proc.proc.is_alive():
            proc.terminate()
            num_terminated += 1
        else:
            exitcode = proc.proc.exitcode
            if exitcode:
                num_failed += 1

    return num_failed, num_terminated
==============================================================================
na záver vycistit a uzavrit fronty
item = work_queue.get(block=False)
while item:
    try:
        work_queue.get(block=False)
    except Empty:
        break
work_queue.close()
work_queue.join_thread()
==============================================================================
vyvoláni ukonceni procesu sygnalem ctrl+c

class SignalObject:
    MAX_TERMINATE_CALLED = 3

    def __init__(self, shutdown_event):
        self.terminate_called = 0
        self.shutdown_event = shutdown_event

def default_signal_handler(
        signal_object,
        exception_class,
        signal_num,
        current_stack_frame):
    signal_object.terminate_called += 1
    signal_object.shutdown_event.set()
    if signal_object.terminate_called = signal_object.MAX_TERMINATE_CALLED:
        raise exception_class()

def init_signal(signal_num, signal_object, exception_class, handler):
    handler = functools.partial(handler, signal_object, exception_class)
    signal.signal(signal_num, handler)
    signal.siginterrupt(signal_num, False)

def init_signals(shutdown_event, int_handler, term_handler):
    signal_object = SignalObject(shutdown_event)
    init_signal(signal.SIGINT, signal_object, KeyboardInterrupt, int_handler)
    init_signal(signal.SIGTERM, signal_object, TerminateInterrupt, term_handler)
    return signal_object
==============================================================================
odolnost proti zaseknuti
pouzij timeouty, pokud mozno definovane

while not shutdown_event.is_set():
    try:
        item = work_queue.get(block=True, timeout=0.05)
    except queue.Empty:
        continue
    # ...
==============================================================================
operace clientu s timeout


self.socket.settimeout(0.1)
self.socket.listen(1)
# …
while not shutdown_event.is_set():
    try:
        clientsocket, address = self.socket.accept()
    except socket.timeout:
        continue
==============================================================================
prepocitavat cas pro dalsi smycku

class TimerProcWorker(ProcWorker):
    INTERVAL_SECS = 10
    MAX_SLEEP_SECS = 0.02

    def main_loop(self):
        next_time = time.time() + self.INTERVAL_SECS
        while not self.shutdown_event.is_set():
            sleep_secs = max(0.0, min(next_time - time.time(), self.MAX_SLEEP_SECS))
            time.sleep(sleep_secs)
            if time.time() = next_time:
                event_queue.put(“TIMER EVENT”)
                next_time = time.time() + self.INTERVAL_SECS

==============================================================================
python multiproc_example.py





==============================================================================



pipe
picklemodulu knihovny Pythonu

==============================================================================
https://www.zdrojak.cz/clanky/python-profesionalne-uvod/
https://www.zdrojak.cz/autori/michal-horejsek/

==============================================================================
miko opendata

Ceska otervrena data
https://github.com/kokes/od

datasety
CEDR - centrální evidence dotací je jeden z vetších datasetu, obsahuje dotace pro soukromé i verejné subjekty a tento dataset sahá až do roku 1999.
Hlavní nevýhodou je absence metadat u velké cásti záznamu. Aktualizován je kvartálne.

Dotace EU - mediálne asi nejpropíranejší téma, dataset je až prekvapive prímocarý, jde o jednu tabulku, resp.
dve, jednu pro každé rozpoctové období. Dataset spadá pod MMR, aktualizován je mesícne.

DotInfo - tretí informacní systém pro dotace, bohužel zatím není jasné, co je ve kterém.
Puristicky vzato by Dotace EU mel být subset CEDRu a DotInfo by nemelo existovat.
Bohužel je DotInfo do velké míry prekryvem CEDR, ale ne úplným. Je též mnohem kratší, sahá jen do cca roku 2011.

Verejné zakázky - shromáždení dat z nekolika systému zadávání verejných zakázek, pro nás doposud nejméne prostudovaný dataset,
s ním budeme potrebovat nejvíce pomoci. Je asi nejvíce ošemetný co se týce rozklícování složité struktury dat.

Registr smluv - od léta 2016 mají verejné subjekty povinnost zverejnovat smlouvy nad 50 tisíc Kc hodnoty,
tento revolucní zákon dramaticky zvýšil transparentnost verejného utrácení. Zprístupnil informace o výdajích mimo verejné zakázky,
ke všem výdajum též pridal samotné smlouvy, byt místy zacernené. Dataset patrí pod MVCR a je aktualizován denne.

Monitor státní pokladny - jeden z nejcitších datasetu státu nabízí pohled do vyúctování jednotlivých subjektu státu,
at už jde o ministerstva nebo obce. Zatím dataset nemáme zpracovaný, plánujeme jej použít na obohacení informací o verejných subjektech.
(Napr. u smlouvy na 1 miliardu clovek uvidí, kolik procent z rocního rozpoctu to je.)

ARES - nechvalne známý administrativní rejstrík ekonomických subjektu nabízí vhled nejen do právnických subjektu Ceska.
Klícové jsou základní informace o subjektech, možná využijeme i obchodní rejstrík. Nová otevrená data ARES nám bohužel moc platná nebudou,
více v README (TODO). Tento dataset bude bohužel jediný, který nejde volne stáhnout najednou.

PSP - Poslanecká snemovna Parlamentu nabízí velmi zajímavé datasety pro další zpracování, u nás najdete dva hlavní - informace o osobách
(a nejen poslancích, ale i senátorech nebo clenech vlád) a zpracování stenoprotokolu.

Volby - statistický úrad již nejaký pátek nabízí otevrená data, se kterými se celkem snadno pracuje, ale nejsou pripravené k analytice hned po stažení.
Navíc se jejich formát menil v case, takže se snažíme toto unifikovat.

Justice - data od Ministerstva spravedlnosti obsahují informace o jednotlivých ekonomických subjektech, jde o export z verejných rejstríku,
jak jsou mj. dostupné na webu Justice.

SZIF - data od Státního zemedelského intervencního fondu obsahují informace o príjemcích dotací, vcetne rozdelení na národní a evropské zdroje



zadavatelé verejnych zakazek
https://www.zindex.cz/




datové sady Praha doprava

https://opendata.praha.eu/dataset

vsechny datasety



Operátor ICT, a.s.
https://opendata.praha.eu/organization/operatorict

online pozice pid vozidel
https://golemioapi.docs.apiary.io/#reference/public-transport/gtfs-realtime-vehicle-positions/get-gtfs-realtime-trip-updates-protocol-buffer
==============================================================================




dotované informacni zdroje
https://www.aip.cz/novinky/2268-vedecka-videa-popularni-v-roce-2020/




https://open.toronto.ca/




https://www.volby.cz/opendata/opendata.htm
big data
big data
koncepce big data in python.
https://www.xmind.net/m/WvfC/

datové sady
http://apl.czso.cz/iSMS/cislist.jsp
miko velká data

Ceský statistický úrad:
    https://www.czso.cz/csu/2012edicniplan.nsf/krajp/06010-12-xa

IPR
    https://www.geoportalpraha.cz/cs/data/otevrena-data/seznam


Ceský statistický úrad:
    Scítání lidu, domu a bytu 2011 – Hlavní mesto Praha - analýza výsledku, Ceský statistický úrad, 2013
(URL:
        http://www.czso.cz/csu/2013edicniplan.nsf/krajpubl/104135-13-n+k3018_2013-xa)


Scítání lidu, domu a bytu 2001 – Hl. m. Praha, Ceský statistický úrad, 2003
(URL:
        http://notes3.czso.cz/csu/2003edicniplan.nsf/krajpubl/13-1111-03-rok_2001-xa)

Verejná databáze Ceského statistického úradu (URL: http://vdb.czso.cz/)
Základní výsledky Scítání lidu, domu a bytu 2011 – Hlavní mesto Praha, Ceský statistický úrad, 2012
(URL:
        http://www.czso.cz/csu/2012edicniplan.nsf/krajp/06010-12-xa)

https://www.czso.cz/csu/czso/otevrena-data-v-katalogu-produktu-csu?p_p_id=RSKapExtPortlet_WAR_rskap&p_p_lifecycle=0&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_count=3&p_p_col_pos=1&_RSKapExtPortlet_WAR_rskap__facesViewIdRender=%2Fviews%2FProduktyVerejne.xhtml



Institut plánování a rozvoje hl. m. Prahy:
Územne analytické podklady hl. m. Prahy 2012, Útvar rozvoje hl. m. Prahy, 2012
(URL:
        http://www.uppraha.cz/clanek/47/uzemne-analyticke-podklady)

Územne analytické podklady hl. m. Prahy 2014, Institut plánování a rozvoje hl. m. Prahy, 20




volby
https://www.volby.cz/opendata/opendata.htm


https://www.datacommunitydc.org/blog/2013/05/stepping-up-to-big-data-with-r-and-python


https://data.gov.cz/datov%C3%A9-sady
https://www.datacommunitydc.org/blog/2013/05/stepping-up-to-big-data-with-r-and-python





https://data.gov.cz/datov%C3%A9-sady?dotaz=

granty Technologická agentura CR.

https://starfos.tacr.cz/cs/search/ws6yaacjtg4a/


https://inkaviz.tacr.cz/data/INKA-2--Hodnocen%C3%AD-sb%C4%9Bru-prim%C3%A1rn%C3%ADch-dat-ve-firm%C3%A1ch.pdf
https://inkaviz.tacr.cz/


finance
https://linked.opendata.cz/dataset?tags=MF%C4%8CR


Národní katalog otevrených dat (NKOD)

data mesta energie doprava

https://www.cityone.cz/otevrena-data/s78



QGIS
mapbox
github.com/mapbox
github.com/mapbox/mapbox.js
github.com/mapbox/geopython
qgis.org/en/site
aws.amazon.com/s3
ydp.cuzk.cz
OpenStreetMap





www.kuloary.cz
www.insightee.com

www.datarozhlas.cz


https://www.nku.cz/cz/otevreny-urad/opendata/

https://github.com/jirih/rozhlasdl
https://dvojka.rozhlas.cz/vaclav-cilek-5002614

python rozhlasdl/rozhlasdl.py https://dvojka.rozhlas.cz/vaclav-cilek-5002614

==============================================================================
Kategorie OVM
Obce, mestské cástí nebo mestské obvody v hlavním meste Praze, vojenské újezdy
OVM vybírající správní poplatky (dle zákona c. 634/2004 Sb.)
Stavební úrady RUIAN
Kontaktní místa verejné správy
Krajské úrady a Úrady mestských cástí Praha 1 až Praha 22
Krajské úrady ve smyslu zákona c. 133/2000 Sb., o evidenci obyvatel
Matricní úrady (m. úrady, kterými jsou obec. úrady, v hl. m. Praze ÚMC, v územne cl. statut. mestech ÚMO nebo ÚMC a pro území voj. újezdu újezdní úrady, které urcí a jejich spr. obvody vymezí MV prov. pr. pr.; obec. úr. ORP)
Mestské cásti hlavního mesta Prahy
Mestské cásti HMP ve smyslu § 14 zák. c. 334/1992 Sb. (Praha 1 až 10)
Mestské cásti Prahy 1 – 22
Obce provádející vidimaci a legalizaci (kraj. úrady; obec. úrady ORP; obec. úrady, ÚMC, ÚMO územne clenených statut. mest a ÚMC hl. m. Prahy, jejichž seznam stanoví prov. pr. pr.; újezdní úrady, držitel poštovní licence, Hospodárská komora CR)
Obce s rozšírenou pusobností, mestské cásti v hlavním meste Praze
Obecné stavební úrady RÚIAN
Obecní úrad (s alespon dvema odbory) ve smyslu § 13 zákona c. 491/2001 Sb.
Obecní úrad obce s rozšírenou pusobností podle zákona c. 133/2000 Sb., o evidenci obyvatel
Obecní živnostenské úrady
Ohlašovny
Okrsková volební komise*
Poverený obecní úrad v sídle volebního obvodu ve smyslu § 13 zák. c. 247/1995 Sb.
Stavební úrady
Úrady mestských cástí
Volební orgány (starostové) ve smyslu § 6 písm. h) zák. c. 491/2001 Sb.
Všechna OVM bez škol, školských zarízení a vysokých škol

==============================================================================

* [3onyc](https://github.com/3onyc) - PEP8 Compliance.
* [DeKaN](https://github.com/DeKaN) - Getting PyPI packaging to work.
* [esouthren](https://github.com/esouthren) - Unit testing.
* [Hrily](https://github.com/Hrily) - Multithreading.
* [j-setiawan](https://github.com/j-setiawan) - Paths that work on all OSs.
* [michellemorales](https://github.com/michellemorales) - Confirmed OS/X support.
* [petermbenjamin](https://github.com/petermbenjamin) - Docker support.
* [quatroka](https://github.com/quatroka) - Fixed testing bugs.
* [stevelle](https://github.com/stevelle) - Respect robots.txt.
* [thatguywiththatname](https://github.com/thatguywiththatname) - README link corrections.
==============================================================================
https://github.com/Hrily/Python-Image2Ascii
https://github.com/Hrily/FaceRecognition
https://github.com/Hrily/TensorFlow-ML

==============================================================================


==============================================================================

def spawn_threads(robots_index):
    """
    Spawn the crawler threads
    """
    try:
        write_log('INIT', 'Spawning {0} worker threads...'.format(THREAD_COUNT))
        for i in range(THREAD_COUNT):
            t = threading.Thread(target=crawl_worker, args=(i+1, robots_index))
            write_log('INIT', 'Starting crawl...', worker=i+1)
            t.daemon = True
            t.start()
            THREAD_LIST.append(t)
        for t in THREAD_LIST:
            t.join()
    except KeyboardInterrupt:
        handle_keyboard_interrupt()


==============================================================================
import requests
from requests.auth import HTTPBasicAuth
import json
from pathlib import Path

file_ids = ''
headers={'Username': 'abc@gmail.com', 'apikey':'123-456'}
# Upload file

f = open('C:/Users/ADMIN/Downloads/abc.zip', 'rb')

files = {"file": ("C:/Users/ADMIN/Downloads/abc.zip", f)}

resp = requests.post("https:// ../analytics/upload_file", files=files, headers=headers )
print resp.text
print "status code " + str(resp.status_code)

if resp.status_code == 201:
    print ("Success")
    data = json.loads(resp.text)
    file_ids = data['file_ids']
    print file_ids
else:
    print ("Failure")


==============================================================================
miko curl
https://stackoverflow.com/questions/12667797/using-curl-to-upload-post-data-with-files


https://stackabuse.com/using-curl-in-python-with-pycurl/
?? nejde mi to nainstalovat


curl -F "filecomment=This is an csv file" -F "file=@C:\\Users\\micha\\Projects\\rest-api-evo1\\csvs\\20201221-212549.csv" http://127.0.0.1:8082/store



curl -v -F filename=image.jpg -F upload=@image.jpg http://localhost:8080/api/upload



curl -i -H "Content-Type: application/xml" --data "@test.xml" -v -X POST https://<url>/<uri/



curl -X POST -F name=jan -F surname=vlcinsky http://127.0.0.1:8082/posting_data

curl -X POST \
    'http://localhost:8082/posting_data' \
    -H 'authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyIsInR5cGUiOiJhY2Nlc3MifQ.eyJ1c2VySWQiOjEsImFjY291bnRJZCI6MSwiaWF0IjoxNTExMzMwMzg5LCJleHAiOjE1MTM5MjIzODksImF1ZCI6Imh0dHBzOi8veW91cmRvbWFpbi5jb20iLCJpc3MiOiJmZWF0aGVycyIsInN1YiI6ImFub255bW91cyJ9.HWk7qJ0uK6SEi8qSeeB6-TGslDlZOTpG51U6kVi8nYc' \
    -H 'content-type: application/x-www-form-urlencoded' \
    --data-binary '@/home/limitless/Downloads/iRoute Masters - Workers.csv'



curl -X POST \
    'http://localhost:8080/workers' \
    -H 'authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyIsInR5cGUiOiJhY2Nlc3MifQ.eyJ1c2VySWQiOjEsImFjY291bnRJZCI6MSwiaWF0IjoxNTExMzMwMzg5LCJleHAiOjE1MTM5MjIzODksImF1ZCI6Imh0dHBzOi8veW91cmRvbWFpbi5jb20iLCJpc3MiOiJmZWF0aGVycyIsInN1YiI6ImFub255bW91cyJ9.HWk7qJ0uK6SEi8qSeeB6-TGslDlZOTpG51U6kVi8nYc' \
    -H 'content-type: application/x-www-form-urlencoded' \
    --data-binary '@/home/limitless/Downloads/iRoute Masters - Workers.csv'

curl -X POST \

multipart
curl -X POST http://127.0.0.1:8080/api/xxx ... -H 'content-type: multipart/form-data; boundary=----xxx' \ -F file=@/Users/xxx.txt

curl -X POST http://127.0.0.1:8082/store ... -H 'content-type: multipart/form-data; boundary=----xxx' \ -F file=@C:\\Users\\micha\\Projects\\rest-api-evo1\\csvs\\20201221-212549.csv

curl -F "filecomment=This is an csv file" -F "file=@C:\\Users\\micha\\Projects\\rest-api-evo1\\csvs\\20201221-212549.csv" http://127.0.0.1:8082/store

==============================================================================
http://127.0.0.1:8082/upload.php

http://localhost/ProjectName/filename.php



==============================================================================
prostorová data
http://w3.impa.br/~diego/software/rply/
https://www.melowntech.com/
vcetne api

==============================================================================
7096 heslo do konference
==============================================================================






server on flask
http://127.0.0.1:8000/files
http://127.0.0.1:8000/files/C:\Users\micha\Projects\python-chunked-upload-example\tests\data


C:\Users\micha\Projects\python-chunked-upload-example\tests\data

with open('20201221-212549.csv') as fp:
    content = fp.read()

response = requests.post(
    '{}/files/20201221-212549.csv'.format(API_URL), headers=headers, data=content
)
response.status_code


http://127.0.0.1:8000/files/C:/Users/micha/Projects/rest-api-evo1/my_test_batch1.csv

==============================================================================
==============================================================================
flask_api.py

import os

from flask import Flask, request, abort, jsonify, send_from_directory


UPLOAD_DIRECTORY = "/api_uploaded_files"

if not os.path.exists(UPLOAD_DIRECTORY):
    os.makedirs(UPLOAD_DIRECTORY)


api = Flask(__name__)


@api.route("/files")
def list_files():
    """Endpoint to list files on the server."""
    files = []
    for filename in os.listdir(UPLOAD_DIRECTORY):
        path = os.path.join(UPLOAD_DIRECTORY, filename)
        if os.path.isfile(path):
            files.append(filename)
    return jsonify(files)


@api.route("/files/<path:path>")
def get_file(path):
    print ("in get_file")
    """Download a file."""
    return send_from_directory(UPLOAD_DIRECTORY, path, as_attachment=True)


@api.route("/files/<filename>", methods=["POST"])
def post_file(filename):
    """Upload a file."""
    print ("in post_file")
    if "/" in filename:
        # Return 400 BAD REQUEST
        abort(400, "no subdirectories allowed")
    print (f'filename [{filename}]')

    with open(os.path.join(UPLOAD_DIRECTORY, filename), "wb") as fp:
        fp.write(request.data)

    # Return 201 CREATED
    return "", 201


if __name__ == "__main__":
    api.run(debug=True, port=8000)
==============================================================================

==============================================================================
python restapi
miko flask
miko restapi
miko rest api

C:\Users\micha\Projects>python -m virtualenv python_rest_api_example\venv
C:\Users\micha\Projects>python_rest_api_example\venv\Scripts\activate

(venv) C:\Users\micha\Projects>pip install flask

(venv) C:\Users\micha\Projects>C:\Users\micha\Projects\python_rest_api_example\venv\Scripts\python.exe -m pip install --upgrade pip
(venv) C:\Users\micha\Projects>pip install flask-httpauth
(venv) C:\Users\micha\Projects>pip install Flask-API
(venv) C:\Users\micha\Projects>pip install requests

(venv) C:\Users\micha\Projects>python app.py

(venv) C:\Users\micha\Projects>cd

==============================================================================
miko restapi flask

https://docs.faculty.ai/user-guide/apis/flask_apis/flask_file_upload_download.html

==============================================================================
request HTML
https://requests.readthedocs.io/projects/requests-html/en/latest/


==============================================================================
Tohle by mohlo jít
https://www.tutorialspoint.com/requests/requests_file_upload.htm
https://requests.readthedocs.io/en/master/



Example
import requests
myurl = 'https://httpbin.org/post'
files = {'file': ('test1.txt', 'Welcome to TutorialsPoint')}
getdata = requests.post(myurl, files=files)
print(getdata.text)
Output
E:\prequests>python makeRequest.py
{
   "args": {},
   "data": "",
   "files": {
      "file": "Welcome to TutorialsPoint"
   },
   "form": {},
   "headers": {
      "Accept": "*/*",
      "Accept-Encoding": "gzip, deflate",
      "Content-Length": "170",
      "Content-Type": "multipart/form-data;
      boundary=f2837238286fe40e32080aa7e172be4f",
      "Host": "httpbin.org",
      "User-Agent": "python-requests/2.22.0"
   },
   "json": null,
   "origin": "117.223.63.135, 117.223.63.135",
   "url": "https://httpbin.org/post"
}


==============================================================================
upload multiple files.

https://stackoverflow.com/questions/56697512/how-to-upload-multiple-files-separately-in-flask
==============================================================================
read text file to restapi

https://stackoverflow.com/questions/14446447/how-to-read-a-local-text-file

==============================================================================
async and wait
https://stackoverflow.com/questions/50757497/simplest-async-await-example-possible-in-python

==============================================================================
jazyk R
pydiverse
==============================================================================
-- DELETE from '2018-10-05_kandidati' WHERE PRIJMENI is NULL;
-- DELETE from '2018-10-05_obce' WHERE OBEC is NULL;
-- DELETE from '2018-10-05_okrsky_hlasy' WHERE ID_OKRSKY is NULL;
-- delete from '2018-10-05_okrsky_prehled' where ID_OKRSKY is NULL;
-- DELETE from '2018-10-05_strany' where VSTRANA is Null;
-- delete from '2018-10-05_vysledky_obce' where OKRES is Null;
==============================================================================
ODS
select * from  "2018-10-05_kandidati" where okres='1100' and ostrana = '53'  and KODZASTUP =  '500143' order by POCHLASU DESC;


==============================================================================
CREATE TABLE "2018-10-05_kandidati" (
	"DATUM"	TEXT,
	"OKRES"	INTEGER,
	"KODZASTUP"	INTEGER,
	"COBVODU"	INTEGER,
	"POR_STR_HL"	INTEGER,
	"OSTRANA"	INTEGER,
	"PORCISLO"	INTEGER,
	"JMENO"	TEXT,
	"PRIJMENI"	TEXT,
	"TITULPRED"	TEXT,
	"TITULZA"	TEXT,
	"VEK"	INTEGER,
	"POVOLANI"	TEXT,
	"BYDLISTEN"	TEXT,
	"PSTRANA"	INTEGER,
	"NSTRANA"	INTEGER,
	"PLATNOST"	TEXT,
	"POCHLASU"	INTEGER,
	"POCHL_PRES"	INTEGER,
	"POCPROCVSE"	REAL,
	"MANDAT"	TEXT,
	"PORADIMAND"	INTEGER,
	"PORADINAHR"	INTEGER
)
CREATE TABLE "2018-10-05_strany" (
	"DATUM"	TEXT,
	"VSTRANA"	INTEGER,
	"NAZEVCELK"	TEXT,
	"NAZEV_STRV"	TEXT,
	"ZKRATKAV30"	TEXT,
	"ZKRATKAV8"	TEXT,
	"POCSTR_SLO"	INTEGER,
	"SLOZENI"	INTEGER,
	"ZKRATKA_OF"	TEXT,
	"TYPVS"	TEXT
)
CREATE TABLE "2018-10-05_obce" (
	"DATUM"	TEXT,
	"KRAJ"	INTEGER,
	"OKRES"	INTEGER,
	"TYPZASTUP"	INTEGER,
	"DRUHZASTUP"	INTEGER,
	"KODZASTUP"	INTEGER,
	"NAZEVZAST"	TEXT,
	"OBEC"	INTEGER,
	"NAZEVOBCE"	TEXT,
	"ORP"	INTEGER,
	"CPOU"	INTEGER,
	"REGURAD"	INTEGER,
	"OBVODY"	INTEGER,
	"COBVODU"	INTEGER,
	"MANDATY"	INTEGER,
	"POCOBYV"	INTEGER,
	"TYPDUVODU"	INTEGER,
	"POCET_VS"	INTEGER,
	"STAV_OBCE"	INTEGER
)
CREATE TABLE "2018-10-05_okrsky_hlasy" (
	"DATUM"	TEXT,
	"ID_OKRSKY"	INTEGER,
	"TYP_FORM"	INTEGER,
	"OPRAVA"	INTEGER,
	"CHYBA"	INTEGER,
	"OKRES"	INTEGER,
	"OBEC"	INTEGER,
	"OKRSEK"	INTEGER,
	"KC_1"	INTEGER,
	"TYPZASTUP"	INTEGER,
	"POR_STR_HL"	INTEGER,
	"POC_HLASU"	INTEGER,
	"KC_2"	INTEGER,
	"POSL_KAND"	INTEGER,
	"KC_SUM"	INTEGER,
	"HLASY"	TEXT
)

CREATE TABLE "2018-10-05_okrsky_prehled" (
	"DATUM"	TEXT,
	"ID_OKRSKY"	INTEGER,
	"TYP_FORM"	INTEGER,
	"OPRAVA"	INTEGER,
	"CHYBA"	INTEGER,
	"OKRES"	INTEGER,
	"OBEC"	INTEGER,
	"OKRSEK"	INTEGER,
	"KC_1"	INTEGER,
	"TYPZASTUP"	INTEGER,
	"COBVODU"	INTEGER,
	"VOL_SEZNAM"	INTEGER,
	"VYD_OBALKY"	INTEGER,
	"ODEVZ_OBAL"	INTEGER,
	"PL_HL_CELK"	INTEGER,
	"POCET_VS"	INTEGER,
	"POC_VS_HL"	INTEGER,
	"KC_2"	INTEGER,
	"KODZASTUP"	INTEGER
)
CREATE TABLE "2018-10-05_vysledky_obce" (
	"DATUM"	TEXT,
	"OKRES"	INTEGER,
	"KODZASTUP"	INTEGER,
	"NAZEVZAST"	TEXT,
	"COBVODU"	INTEGER,
	"POR_STR_HL"	INTEGER,
	"OSTRANA"	INTEGER,
	"VSTRANA"	INTEGER,
	"NAZEVCELK"	TEXT,
	"ZKRATKAO30"	TEXT,
	"ZKRATKAO8"	TEXT,
	"POCSTR_SLO"	INTEGER,
	"SLOZENI"	TEXT,
	"HLASY_STR"	INTEGER,
	"PROCHLSTR"	REAL,
	"MAND_STR"	INTEGER
)
-- select POCHLASU, PORCISLO, jmeno, PRIJMENI from  "2018-10-05_kandidati" where okres='1100' and ostrana = '53'  and KODZASTUP =  '500143' order by POCHLASU DESC;
select s.NAZEVCELK, k.POCHLASU, k.PORCISLO, k.jmeno, k.PRIJMENI  from  "2018-10-05_kandidati" k, "2018-10-05_strany" s  where k.OSTRANA = s.VSTRANA and okres='1100' and KODZASTUP =  '500143' and ostrana = '53';

-- select sum(POCHLASU)  from  "2018-10-05_kandidati" k, "2018-10-05_strany" s  where k.OSTRANA = s.VSTRANA and okres='1100' and KODZASTUP =  '500143' and ostrana = '53';
==============================================================================
miko sqlite


py manage.py makemigrations moviebook
py manage.py migrate
py manage.py createsuperuser/
py manage.py shell
==============================================================================

Deployment Options
https://tutorial.djangogirls.org/cs/deploy/
OOP
https://www.zdrojak.cz/serialy/principy-objektove-orientovaneho-navrhu/
python profi
https://www.zdrojak.cz/serialy/python-profesionalne/
dart (google language)
https://www.zdrojak.cz/serialy/uvod-do-dartu/
django
https://www.zdrojak.cz/serialy/hrajeme-si-s-djangem/
==============================================================================
python komunita
https://www.py.cz/FrontPage

==============================================================================
stepanka
==============================================================================
pro adastru
Navrhovat a implementovat rešení na míru pro klienta v jazyku Python, nebo Scala.
Práci s nejmodernejšími technologiemi - napr. Spark, Impala, Kafka, Cassandra a další NoSqldatabáze, Airflow,
frameworky pro machine learning a AI, nejnovejší knihovny ve Scale a Pythonu.
Tvorit datové transformace a integrace zejména ve Sparku
Prototypovat aplikace a rešení – zkoušet nové technologie a volit to nejvhodnejší pro daný problém.
Zavádet vše do praxe, analyzovat, kódovat, vyvíjet, tvorit dokumentaci.
Optimalizovat výkon a škálovat aplikace pro obrovské datové objemy.
Dle zájmu rešit úlohy typu end-to-end od dat až po frontend.
Jedeme hodne DevOps, takže budeš mít šanci si svuj kód i nasadit a starat se o nej.
Agile už je dneska samozrejmost.
Pokud nekteré z technologií výše neznáš, nic se nedeje.
Mnohé existují teprve pár let a urcite dostaneš šanci se je naucit.
Máme vlastní Hadoop cluster „na hraní“, kde mužeš všechno vyzkoušet.


==============================================================================
https://spark.apache.org/docs/0.9.2/python-programming-guide.html
https://spark.apache.org/

"hadoop python tutorial" on google many tutorials.
==============================================================================
https://naucse.python.cz/lessons/intro/async/

https://naucse.python.cz/course/mi-pyt/beginners/testing/
https://naucse.python.cz/course/mi-pyt/intro/testing/

test dri
==============================================================================
django pro holky
https://tutorial.djangogirls.org/cs/
==============================================================================
https://python.cz/
==============================================================================

https://www.zdrojak.cz/clanky/prvni-duvod-proc-zvolit-git-nerika-vam-jak-mate-pracovat/

==============================================================================
reaktivní programování v pythonuKnihovny
reaktivního programování pro dynamické jazyky
(například knihovny Lisp "Cells" a Python "Trellis")
 mohou sestavit graf závislostí z běhové analýzy hodnot
 čtených během provádění funkce, což umožňuje,
 aby specifikace toku dat byly implicitní i dynamické. Reaktivní programování - https://cs.qaz.wiki/wiki/Reactive_programming

==============================================================================
miko plyn

6 130,00 x 4
12 520 za rok
1600 m2
1m2 = 10,55 kWh
16880.0 kw za rok

==============================================================================

https://flask.palletsprojects.com/en/1.1.x/deploying/



==============================================================================
www.pythonanywhere.com

==============================================================================

https://micropython.org/

==============================================================================

00 2021-01-27 10:05:41,874: Traceback (most recent call last):
601 2021-01-27 10:05:41,880:   File "/home/miko73/rest-api-evo1/venv/lib/python3.8/site-packages/bottle.py", line 868, in _handle
602 2021-01-27 10:05:41,894:     return route.call(**args)
603 2021-01-27 10:05:41,898:   File "/home/miko73/rest-api-evo1/venv/lib/python3.8/site-packages/bottle.py", line 1748, in wrapper
604 2021-01-27 10:05:41,901:     rv = callback(*a, **ka)
605 2021-01-27 10:05:41,905:   File "./server_evo1.py", line 124, in upload_file_on_form_post
606 2021-01-27 10:05:41,909:     result = upload_batch(file_path)
607 2021-01-27 10:05:41,912:   File "./parse_data.py", line 37, in upload_batch
608 2021-01-27 10:05:41,917:     act_batch.load_from_file()
609 2021-01-27 10:05:41,920:   File "./models.py", line 217, in load_from_file
610 2021-01-27 10:05:41,924:     if self.connector.execute_one(insert_str) != None:
611 2021-01-27 10:05:41,928:   File "./models.py", line 48, in execute_one
612 2021-01-27 10:05:41,933:     print (f"in execute_one {sql_string}")
613 2021-01-27 10:05:41,937: BlockingIOError: [Errno 11] write could not complete without blocking

==============================================================================

[Design Patterns in C++]: https://github.com/JakubVojvoda/design-patterns-cpp
[Design Patterns in Java]: https://github.com/JakubVojvoda/design-patterns-java
[Design Patterns in Python]: https://github.com/JakubVojvoda/design-patterns-python

==============================================================================
==============================================================================
python numba = zrychlovač pythonu

==============================================================================
#PYTHON
encodings = ['utf-8', 'windows-1250', 'windows-1252'] # add more
for e in encodings:
    try:
        fh = codecs.open('file.txt', 'r', encoding=e)
        fh.readlines()
        fh.seek(0)
    except UnicodeDecodeError:
        print('got unicode error with %s , trying different encoding' % e)
    else:
        print('opening the file with encoding:  %s ' % e)
        break
==============================================================================
Error message
'charmap' codec can't encode character '\u0159' in position 39: character maps to <undefined>
resolved with


    with open('text_file.txt', "w", encoding="utf-8") as text_out:
        text_out.writelines(Sentences)
chaned to
    with open('text_file.txt', "w", encoding="utf-8") as text_out:
        text_out.writelines(Sentences)
==============================================================================
https://www.youtube.com/watch?v=46O73On0gyI&list=RDCMUC_ML5xP23TOWKUcc-oAE_Eg&start_radio=1&t=1720

==============================================================================\
# Step 1: Update your repositories
sudo apt-get update
# Step 2: Install pip for Python 3
sudo apt-get install build-essential libssl-dev libffi-dev python-dev
sudo apt install python3-pip
# Step 3: Use pip to install virtualenv
sudo pip3 install virtualenv
# Step 4: Launch your Python 3 virtual environment, here the name of my virtual environment will be env3
virtualenv -p python3 env3
# Step 5: Activate your new Python 3 environment. There are two ways to do this
. env3/bin/activate # or source env3/bin/activate which does exactly the same thing
# you can make sure you are now working with Python 3
python -- version
# this command will show you what is going on: the python executable you are using is now located inside your virtualenv repository
which python
# Step 6: code your stuff
# Step 7: done? leave the virtual environment
deactivate




cd /home/michal-kocanrdle/Python/python-texttospeech
ls
python -m venv venv
source venv/bin/activate
cd venv
cd bin
pip install google-cloud-texttospeech

==============================================================================
miko google developer accoun
https://console.developers.google.com/billing/enable?project=44855606298






==============================================================================
https://publi.cz/books/771/index.html?secured=false#02
oline

==============================================================================
online učebnice sítě programování, angličtina
https://eprigo.publi.cz/187-vse
==============================================================================
https://dspace5.zcu.cz/bitstream/11025/31871/1/Vyvoj%20android%20aplikaci%20v%20jazyce%20Python.pdf
==============================================================================

   print(list(range(0,10,2)))
   print([i for i in range(10)if i%2])

==============================================================================
http://howto.py.cz/index.htm
==============================================================================

 list_1 = [10, ‘Chelsea’, 20]
  tup_1 = (10, ‘Chelsea’ , 20)


==============================================================================
https://github.com/CarlosLannister/beautifulMaps
conda config --prepend channels conda-forge
conda create -n ox --strict-channel-priority osmnx

 python .\createMapRoads.py



same in pip
pip install https://download.lfd.uci.edu/pythonlibs/w4tscw6k/GDAL-3.2.2-cp38-cp38-win_amd64.whl
pip install https://download.lfd.uci.edu/pythonlibs/w4tscw6k/Fiona-1.8.19-cp38-cp38-win_amd64.whl









==============================================================================
augumentin reality
miko ar

https://www.rascasone.com/cs/blog/tipy-zacinajici-tech-startupy


==============================================================================

mapbox
token
pk.eyJ1IjoibWlrbzczIiwiYSI6ImNrbzRmZ214dDA1ajAyb256Ym9seHc3NDEifQ.3frNOJYFbMmqA2-hgqmM1g

https://docs.mapbox.com/android/beta/maps/guides/

sdk example
https://docs.mapbox.com/help/tutorials/first-steps-android-sdk/

==============================================================================

https://jupyter-gmaps.readthedocs.io/en/latest/install.html
run in Anaconda powershell

jupyter labextension install @jupyter-widgets/jupyterlab-manager
(base) PS C:\Users\micha\Projects\gmaps> jupyter lab build


AIzaSyD_r2kqSb_LZSeGZcUs5H3YKJF6wpqgW9c

$env:GOOGLE_APPLICATION_CREDENTIALS='AIzaSyD_r2kqSb_LZSeGZcUs5H3YKJF6wpqgW9c'


Set-Variable -Name $env:GOOGLE_APPLICATION_CREDENTIALS -Value 'AIzaSyD_r2kqSb_LZSeGZcUs5H3YKJF6wpqgW9c'

export GOOGLE_API_KEY=AIzaSyD_r2kqSb_LZSeGZcUs5H3YKJF6wpqgW9c



import gmaps
gmaps.configure(api_key='AIzaSyD_r2kqSb_LZSeGZcUs5H3YKJF6wpqgW9c')

==============================================================================
OSM open Street map

miko osm installation
https://github.com/metaodi/osmapi

pip install osmapi
==============================================================================

